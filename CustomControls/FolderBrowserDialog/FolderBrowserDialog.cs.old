using System;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows;
using System.Windows.Interop;

namespace CustomControls
{

	/// <summary>
	/// A dialog to browse for folders (and optionally files) that wraps the unmanaged SHBrowseForFolder function.
	/// </summary>
	/// <remarks>
	/// This is mostly based on the example given here: http://support.microsoft.com/default.aspx?scid=kb;[LN];306285
	/// with the main differences being that a) it allows the user to set an initial directory for the dialog, and
	/// b) it does something to address the bug in Win 7 (and above?) whereby the SHBrowseForFolder dialog won't
	/// always scroll to ensure visibility of the current selection.
	/// 
	/// Example usage:
	/// 
	/// FolderBrowser fb = new FolderBrowser();
	/// fb.Description = "Please select a file or folder below:";
	/// fb.IncludeFiles = true;
	/// fb.InitialDirectory = @"C:\Program Files\Windows Media Player";
	/// if (fb.ShowDialog() == DialogResult.OK)
	/// {
	///     string userSelection = fb.SelectedPath;
	///     ...
	///     
	/// </remarks>
	public class FolderBrowserDialog1
	{
		#region · Data members ·
		private IntPtr m_parent;
		#endregion

		#region · Properties ·

		// Root node of the tree view.
		private FolderID rootLocation = FolderID.Desktop;

		/// <summary>
		/// Gets or sets the descriptive text displayed above the tree view control in the dialog box.
		/// </summary>
		public string Description { get; set; }

		/// <summary>
		/// Gets or sets the initial directory displayed by the dialog box.
		/// </summary>
		public string InitialDirectory { get; set; }

		/// <summary>
		/// Gets or sets the path selected by the user.
		/// </summary>
		public string SelectedPath { get; set; }

		/// <summary>
		/// Gets or sets whether the dialog box will use the new style.
		/// </summary>
		public bool NewStyle { get; set; }

		/// <summary>
		/// Gets or sets whether the dialog box can be used to select files as well as folders.
		/// </summary>
		public bool IncludeFiles { get; set; }

		/// <summary>
		/// Gets or sets whether to include an edit control in the dialog box that allows the user to type the name of an item.
		/// </summary>
		public bool ShowEditBox { get; set; }

		/// <summary>
		/// Gets or sets whether to include the New Folder button in the dialog box.
		/// </summary>
		public bool ShowNewFolderButton { get; set; }

		#endregion

		#region · Constructor ·

		/// <summary>
		/// Default constructor
		/// </summary>
		public FolderBrowserDialog1()
		{
			Description = "Please select a folder below:";
			InitialDirectory = String.Empty;
			SelectedPath = String.Empty;
			NewStyle = true;
			IncludeFiles = false;
			ShowEditBox = false;
			ShowNewFolderButton = true;
			m_parent = IntPtr.Zero;
		}

		#endregion

		#region · Public members ·

		/// <summary>
		/// Creates flags for BROWSEINFO.ulFlags based on the values of boolean member properties.
		/// </summary>
		private int GetFlags()
		{
			int ret_val = 0;
			if (NewStyle) ret_val |= (int)BffStyles.NewDialogStyle;
			if (IncludeFiles) ret_val |= (int)BffStyles.IncludeFiles;
			if (!ShowNewFolderButton) ret_val |= (int)BffStyles.NoNewFolderButton;
			if (ShowEditBox) ret_val |= (int)BffStyles.ShowEditBox;
			return ret_val;
		}

		/// <summary>
		/// Shows the folder browser dialog box.
		/// </summary>
		public bool? ShowDialog()
		{
			return ShowDialog(null);
		}

		/// <summary>
		/// Shows the folder browser dialog box with the specified owner window.
		/// </summary>
		public bool? ShowDialog(Window owner)
		{
			IntPtr pidlRoot = IntPtr.Zero;
			m_parent = IntPtr.Zero;

			if (owner != null)
				m_parent = new WindowInteropHelper(owner).Handle;

			// Get the IDL for the specific startLocation.
			if(m_parent != IntPtr.Zero)
				SHGetSpecialFolderLocation(m_parent, (int)rootLocation, out pidlRoot);

			if (pidlRoot == IntPtr.Zero)
			{
				return false;
			}

			int flags = GetFlags();

			if ((flags & (int)BffStyles.NewDialogStyle) != 0)
			{
				/*if (System.Threading.ApartmentState.MTA == Application.OleRequired())
					flags = flags & (~(int)BffStyles.NewDialogStyle);*/
			}

			IntPtr pidlRet = IntPtr.Zero;

			try
			{
				// Construct a BROWSEINFO.
				BROWSEINFO bi = new BROWSEINFO();
				IntPtr buffer = Marshal.AllocHGlobal(MAX_PATH);

				bi.pidlRoot = pidlRoot;
				bi.hwndOwner = m_parent;
				bi.pszDisplayName = buffer;
				bi.lpszTitle = Description;
				bi.ulFlags = flags;
				bi.lpfn = new BFFCALLBACK(FolderBrowserCallback);

				// Show the dialog.
				pidlRet = SHBrowseForFolder(ref bi);

				// Free the buffer you've allocated on the global heap.
				Marshal.FreeHGlobal(buffer);

				if (pidlRet == IntPtr.Zero)
				{
					// User clicked Cancel.
					return false;
				}

				// Then retrieve the path from the IDList.
				StringBuilder sb = new StringBuilder(MAX_PATH);
				if (0 == SHGetPathFromIDList(pidlRet, sb))
				{
					return false;
				}

				// Convert to a string.
				SelectedPath = sb.ToString();
			}
			finally
			{
				IMalloc malloc = GetSHMalloc();
				malloc.Free(pidlRoot);

				if (pidlRet != IntPtr.Zero)
				{
					malloc.Free(pidlRet);
				}
			}
			return true;
		}

		#endregion

		#region · Private functions ·

		private int FolderBrowserCallback(IntPtr hwnd, uint uMsg, IntPtr lParam, IntPtr lpData)
		{
			switch (uMsg)
			{
				case BFFM_INITIALIZED:
					if (m_parent != IntPtr.Zero)
					{
						// center dialog
						RECT rcDlg;
						GetWindowRect(hwnd, out rcDlg);

						RECT rcRef;
						GetWindowRect(m_parent, out rcRef);

						int cx = (rcRef.Width - rcDlg.Width) / 2;
						int cy = (rcRef.Height - rcDlg.Height) / 2;
						MoveWindow(hwnd, rcRef.Left + cx, rcRef.Top + cy, rcDlg.Width, rcDlg.Height, true);
					}

					if (InitialDirectory != "")
					{
						// We get in here when the dialog is first displayed. If an initial directory
						// has been specified we will make this the selection now, and also make sure
						// that directory is expanded.
						HandleRef h = new HandleRef(null, hwnd);
						SendMessage(h, BFFM_SETSELECTIONW, 1, InitialDirectory);
						SendMessage(h, BFFM_SETEXPANDED, 1, InitialDirectory);
					}
					break;

				case BFFM_SELCHANGED:
					// We get in here whenever the selection in the dialog box changes. To cope with the bug in Win7 
					// (and above?) whereby the SHBrowseForFolder dialog won't always scroll the selection into view (see 
					// http://social.msdn.microsoft.com/Forums/en-US/vcgeneral/thread/a22b664e-cb30-44f4-bf77-b7a385de49f3/)
					// we follow the suggestion here: 
					// http://www.codeproject.com/Questions/179097/SHBrowseForFolder-and-SHGetPathFromIDList
					// to adjust the scroll position when the selection changes.
					IntPtr hbrowse = FindWindowEx(hwnd, IntPtr.Zero, "SHBrowseForFolder ShellNameSpace Control", null);
					IntPtr htree = FindWindowEx(hbrowse, IntPtr.Zero, "SysTreeView32", null);
					IntPtr htir = SendMessage(new HandleRef(null, htree), TVM_GETNEXTITEM, TVGN_ROOT, IntPtr.Zero);
					IntPtr htis = SendMessage(new HandleRef(null, htree), TVM_GETNEXTITEM, TVGN_CARET, IntPtr.Zero);
					IntPtr htic = SendMessage(new HandleRef(null, htree), TVM_GETNEXTITEM, TVGN_CHILD, htir);
					int count = 0;
					int pos = 0;
					for (; (int)htic != 0; htic = SendMessage(new HandleRef(null, htree), TVM_GETNEXTITEM, TVGN_NEXTVISIBLE, htic), count++)
					{
						if (htis == htic)
							pos = count;
					}
					SCROLLINFO si = new SCROLLINFO();
					si.cbSize = (uint)Marshal.SizeOf(si);
					si.fMask = SIF_POS | SIF_RANGE | SIF_PAGE;
					GetScrollInfo(htree, SB_VERT, ref si);
					si.nPage /= 2;
					if ((pos > (int)(si.nMin + si.nPage)) && (pos <= (int)(si.nMax - si.nMin - si.nPage)))
					{
						si.nMax = si.nPos - si.nMin + (int)si.nPage;
						for (; pos < si.nMax; pos++) PostMessage(htree, WM_VSCROLL, SB_LINEUP, 0);
						for (; pos > si.nMax; pos--) PostMessage(htree, WM_VSCROLL, SB_LINEDOWN, 0);
					}
					break;
			}
			return 0;
		}
		#endregion

		#region · DLL Import ·
		// C# representation of the IMalloc interface.
		[InterfaceType(ComInterfaceType.InterfaceIsIUnknown), Guid("00000002-0000-0000-C000-000000000046")]
		private interface IMalloc
		{
			[PreserveSig]
			IntPtr Alloc([In] int cb);
			[PreserveSig]
			IntPtr Realloc([In] IntPtr pv, [In] int cb);
			[PreserveSig]
			void Free([In] IntPtr pv);
			[PreserveSig]
			int GetSize([In] IntPtr pv);
			[PreserveSig]
			int DidAlloc(IntPtr pv);
			[PreserveSig]
			void HeapMinimize();
		}

		// C# representation of struct containing scroll bar parameters
		[Serializable, StructLayout(LayoutKind.Sequential)]
		private struct SCROLLINFO
		{
			public uint cbSize;
			public uint fMask;
			public int nMin;
			public int nMax;
			public uint nPage;
			public int nPos;
			public int nTrackPos;
		}

		// Styles affecting the appearance and behaviour of the browser dialog. This is a subset of the styles 
		// available as we're not exposing the full list of options in this simple wrapper.
		// See http://msdn.microsoft.com/en-us/library/windows/desktop/bb773205%28v=vs.85%29.aspx for the complete
		// list.
		private enum BffStyles
		{
			ShowEditBox = 0x0010, // BIF_EDITBOX
			ValidateSelection = 0x0020, // BIF_VALIDATE
			NewDialogStyle = 0x0040, // BIF_NEWDIALOGSTYLE
			UsageHint = 0x0100, // BIF_UAHINT
			NoNewFolderButton = 0x0200, // BIF_NONEWFOLDERBUTTON
			IncludeFiles = 0x4000, // BIF_BROWSEINCLUDEFILES
		}

		// Delegate type used in BROWSEINFO.lpfn field.
		private delegate int BFFCALLBACK(IntPtr hwnd, uint uMsg, IntPtr lParam, IntPtr lpData);

		// Struct to pass parameters to the SHBrowseForFolder function.
		[StructLayout(LayoutKind.Sequential, Pack = 8)]
		private struct BROWSEINFO
		{
			public IntPtr hwndOwner;
			public IntPtr pidlRoot;
			public IntPtr pszDisplayName;
			[MarshalAs(UnmanagedType.LPTStr)]
			public string lpszTitle;
			public int ulFlags;
			[MarshalAs(UnmanagedType.FunctionPtr)]
			public BFFCALLBACK lpfn;
			public IntPtr lParam;
			public int iImage;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct RECT
		{
			public int Left;
			public int Top;
			public int Right;
			public int Bottom;

			public RECT(int left, int top, int width, int height)
			{
				this.Left = left;
				this.Top = top;
				this.Right = left + width;
				this.Bottom = top + height;
			}

			public int Height { get { return this.Bottom - this.Top; } }
			public int Width { get { return this.Right - this.Left; } }
		}



		[DllImport("User32.DLL")]
		private static extern IntPtr GetActiveWindow();

		[DllImport("Shell32.DLL")]
		private static extern int SHGetMalloc(out IMalloc ppMalloc);

		[DllImport("Shell32.DLL")]
		private static extern int SHGetSpecialFolderLocation(IntPtr hwndOwner, int nFolder, out IntPtr ppidl);

		[DllImport("Shell32.DLL")]
		private static extern int SHGetPathFromIDList(IntPtr pidl, StringBuilder Path);

		[DllImport("Shell32.DLL", CharSet = CharSet.Auto)]
		private static extern IntPtr SHBrowseForFolder(ref BROWSEINFO bi);

		[DllImport("user32.dll")]
		[return: MarshalAs(UnmanagedType.Bool)]
		private static extern bool GetScrollInfo(IntPtr hwnd, int fnBar, ref SCROLLINFO lpsi);

		[DllImport("user32.dll", CharSet = CharSet.Auto)]
		private static extern IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, string lParam);

		[DllImport("user32.dll", CharSet = CharSet.Auto)]
		private static extern IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, IntPtr lParam);

		[DllImport("user32.dll")]
		private static extern bool PostMessage(IntPtr hWnd, uint Msg, int wParam, int lParam);

		[DllImport("user32.dll", SetLastError = true)]
		private static extern IntPtr FindWindowEx(IntPtr parentHandle, IntPtr childAfter, string className, string windowTitle);

		[DllImport("user32.dll", SetLastError = true)]
		public static extern bool MoveWindow(IntPtr hWnd, int X, int Y, int nWidth, int nHeight, bool bRepaint);

		[DllImport("user32.dll")]
		[return: MarshalAs(UnmanagedType.Bool)]
		public static extern bool GetWindowRect(IntPtr hWnd, out RECT lpRect);

		private static readonly int MAX_PATH = 260;

		/// <summary>
		/// Helper function that returns the IMalloc interface used by the shell.
		/// </summary>
		private static IMalloc GetSHMalloc()
		{
			IMalloc malloc;
			SHGetMalloc(out malloc);
			return malloc;
		}

		/// <summary>
		/// Enum of CSIDLs identifying standard shell folders.
		/// </summary>
		private enum FolderID
		{
			Desktop = 0x0000,
			Printers = 0x0004,
			MyDocuments = 0x0005,
			Favorites = 0x0006,
			Recent = 0x0008,
			SendTo = 0x0009,
			StartMenu = 0x000b,
			MyComputer = 0x0011,
			NetworkNeighborhood = 0x0012,
			Templates = 0x0015,
			MyPictures = 0x0027,
			NetAndDialUpConnections = 0x0031,
		}

		// Constants for sending and receiving messages in BrowseCallBackProc.
		private const int WM_USER = 0x400;
		private const int BFFM_INITIALIZED = 1;
		private const int BFFM_SELCHANGED = 2;
		private const int BFFM_SETSELECTIONW = WM_USER + 103;
		private const int BFFM_SETEXPANDED = WM_USER + 106;

		// Constants for sending messages to a Tree-View Control.
		private const int TV_FIRST = 0x1100;
		private const int TVM_GETNEXTITEM = (TV_FIRST + 10);
		private const int TVGN_ROOT = 0x0;
		private const int TVGN_CHILD = 0x4;
		private const int TVGN_NEXTVISIBLE = 0x6;
		private const int TVGN_CARET = 0x9;

		// Constants defining scroll bar parameters to set or retrieve.
		private const int SIF_RANGE = 0x1;
		private const int SIF_PAGE = 0x2;
		private const int SIF_POS = 0x4;

		// Identifies Vertical Scrollbar.
		private const int SB_VERT = 0x1;

		// Used for vertical scroll bar message.
		private const int SB_LINEUP = 0;
		private const int SB_LINEDOWN = 1;
		private const int WM_VSCROLL = 0x115;

		#endregion

	}
}
