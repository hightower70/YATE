NanoSDROM_func_cd.a80(16): error: Duplicate label: PATH_SEND_LOOP
NanoSDROM_func_cd.a80(24): error: Duplicate label: SEND_PATH_CLOSE
NanoSDROM_func_cd.a80(26): error: Duplicate label: WAIT_FOR_CD_RESPONSE
NanoSDROM_func_cd.a80(40): error: Duplicate label: CD_EXIT
NanoSDROM_func_mkdir.a80(16): error: Duplicate label: PATH_SEND_LOOP
NanoSDROM_func_mkdir.a80(24): error: Duplicate label: SEND_PATH_CLOSE
NanoSDROM_func_rmdir.a80(16): error: Duplicate label: PATH_SEND_LOOP
NanoSDROM_func_rmdir.a80(24): error: Duplicate label: SEND_PATH_CLOSE
NanoSDROM_func_delete.a80(16): error: Duplicate label: PATH_SEND_LOOP
NanoSDROM_func_delete.a80(24): error: Duplicate label: SEND_PATH_CLOSE
NanoSDROM_tools.a80(301): warning[fwdref]: forward reference of symbol: IF      debug=1
NanoSDROM_tools.a80(301): warning[fwdref]: forward reference of symbol: IF      debug=1
# file opened: NanoSDROM.a80
   1  0000              DEBUG       EQU     0
   2  0000              EXPORTTOROM EQU     1
   3  0000
NanoSDROM.a80(4): warning: String literal truncated to 0x302E3332: "00.32"
   4  0000              BUILDVER = "00.32"
   5  0000
   6  0000              ; TODO
   7  0000              ; ====
   8  0000              ; - Enter to Menu from CLI? - Will NOT be implemented
   9  0000              ; - functions getting just input shall return an early response - to detect no SD available
  10  0000              ; - remove debug codes from release env
  11  0000              ;   - dummy dir list and their helper methods
  12  0000              ;   - blkint A,BC,DE printout
  13  0000              ; - Check if * in opening filename works - NO
  14  0000              ; KNOWN BUGS
  15  0000              ; - Setting SPI speed on Nano to FULL from HALF causes SD read to slow down..
  16  0000              ; - New card, root directory -> no / printed at pwd box, .. is present (fixed in Nano?)
  17  0000              ; 1.00
  18  0000              ; - release version as of 2021-01-27, obsolete!
  19  0000
  20  0000              ; 0.32 2021-05-03
  21  0000              ; - fix on VER at last line of screen,
  22  0000              ; 0.31
  23  0000              ; - fix for no SD
  24  0000              ; 0.30
  25  0000              ; - minor enhancements, fix in Nano fw
  26  0000              ; 0.29
  27  0000              ; - SD library in Nano: getting each file iterates through the complete
  28  0000              ;   directory from the first element. In case of large dir (>100) this slows
  29  0000              ;   down the directory load. In case of >200 this is 4-5 files/sec.
  30  0000              ;   FIXED in NanoSD fw v0.29
  31  0000              ; - Print 'Press ESC to enter MENU' in case of skip-menu configured
  32  0000              ; - CLI cmd VER prints the Nano fw version also
  33  0000              ; - Header strings changes slightly
  34  0000              ; - Exit from CLI with ESC also
  35  0000              ; 0.28
  36  0000              ; - DIR /W prints directories inside [] 's
  37  0000              ; - Relocated the char buffer for load, sndmx card uses $2000 area and it
  38  0000              ;   conflicts with NanoSD
  39  0000              ; - DIRNEXT routine checks bit 7. Set bit 7 means normal DIRNEXT, cleared bit 7
  40  0000              ;   means stop directory iteration
  41  0000              ; * VERIFY implemented
  42  0000              ; 0.27
  43  0000              ; - Available data in opened file always determined by the size of file (on Nano FW)
  44  0000              ; - reading over the file caused erratical behaviour, fixed
  45  0000              ; - directory sort is maintained between dir changes/reboots
  46  0000              ; - ^ in front of NAME or SIZE when list is sorted in menu
  47  0000              ; - auto sense of card remove/re-insert is missing
  48  0000              ; - File not found print fixed
  49  0000              ; - CLI uses C' instead of H' (AF', C' and DE' is usable in EXT and USR)
  50  0000              ; 0.26
  51  0000              ; - DIR /W and CLS implemented
  52  0000              ; - handling CTRL-ESC during dir in CLI
  53  0000              ; - reset during menu (soft reset is executing...)
  54  0000              ; - mkdir, rmdir, del fixed
  55  0000              ; - SNDMX generated .CAS files fixed
  56  0000              ; - sorting to be implemented. When file list is sorted
  57  0000              ;   - directory names always come first
  58  0000              ;   - directories always sorted by names
  59  0000              ;   - file sort state is also to be stored on Nano (done)
  60  0000              ; 0.25
  61  0000              ; - fixed long directory name print
  62  0000              ; - boot status save fixed
  63  0000              ;   - config param refactored in Nano firmware
  64  0000              ; - moving selection in menu sped up
  65  0000              ; - directory list store is redesigned, easier to sort
  66  0000              ; 0.24
  67  0000              ; - Directory entry counter is printed during directory load
  68  0000              ; - 16 bit decimal print now prints 0
  69  0000              ; - TODO
  70  0000              ;  - sort to be implemented/saved in EEPROM
  71  0000              ;  - reset during MENU causes soft reset: exit, no EXT0 installed
  72  0000              ; 0.23
  73  0000              ; - new TVC/CLI functions: mkdir, rmdir, del
  74  0000              ; - directory and path listing fixed, menu works
  75  0000              ; - dir functions fixed
  76  0000              ; - SAVE works
  77  0000              ; - ESC on boot works
  78  0000              ; 0.22
  79  0000              ; - keyboard handling in menu
  80  0000              ; - ESC works, up/dn, pg up/dn, CD works, LOAD works
  81  0000              ; - interrupt routine rewritted for LOAD (keyboard buffer fill is done
  82  0000              ;   from the ISR routine)
  83  0000              ; - TODO:
  84  0000              ;   - test menu with real HW
  85  0000              ;   - SAVE still not tested
  86  0000              ;   - sorting needs to be rethink and implement
  87  0000              ;   - extending CLI with mkdir, del, rmdir
  88  0000              ; 0.20
  89  0000              ; - fixed blkio out
  90  0000              ; - Introducing Menu
  91  0000              ; 0.19
  92  0000              ; - CLI keyboard input buffer is located in the cassette outbuffer
  93  0000              ; - BLKOUT routine fixed, HL is not ruined during the write cycle,
  94  0000              ;   BC, DE is stored on stack
  95  0000              ;   OUTPUT:
  96  0000              ;   - on failure BC is set to the num of remaining bytes, otherwise it is
  97  0000              ;     the original value
  98  0000              ;   - DE is the original value
  99  0000              ;   - A 0x00 on success, otherwise an error code
 100  0000              ; 0.18
 101  0000              ; - file size is sent back as 4 bytes
 102  0000              ; - dirfirst and dirnext functions implemented
 103  0000              ; - pwd function implemented
 104  0000              ; - filenames refactored to have "func" in functions files
 105  0000              ; - new function in Nano: menu status in EEPROM
 106  0000              ; - DIRFIRST, DIRNEXT, PWD, CD functions are API documented in the source file's
 107  0000              ;   header
 108  0000              ; 0.17
 109  0000              ; - CAS file definition:
 110  0000              ;   - has .cas extension
 111  0000              ;   - first byte is either 0x11 or 0x01
 112  0000              ; - open/create use this as definition
 113  0000
 114  0000                      ORG    $C000
 115  C000
 116  C000
 117  C000              ; **********************************************************
 118  C000              ; *** Between any OUT and IN at least 32T time must pass ***
 119  C000              ; **********************************************************
 120  C000
 121  C000
 122  C000              ; CAS_CHIN D1               0b11010001
 123  C000              ; CAS_CHOUT 51              0b01010001
 124  C000              ; CAS_BKIN D2               0b11010010
 125  C000              ; CAS_BKOUT 52              0b01010010
 126  C000              ; CAS_OPEN D3               0b11010011
 127  C000              ; CAS_CRTE 53               0b01010011
 128  C000              ; CAS_CLOSE D4 (for read)   0b11010100
 129  C000              ; CAS_CLOSE 54 (for write)  0b01010100
 130  C000              ; CAS_VERIFY D5             0b11010101
 131  C000
 132  C000              RETVAL_OK   EQU     0x00
 133  C000              RETVAL_OPEN_OK EQU  0x01
 134  C000              RETVAL_DATA_NOT_READY_YET EQU 0x80
 135  C000              RETVAL_WAITING_FOR_INPUT EQU 0x81
 136  C000              RETVAL_FILE_NOT_FOUND EQU 0x82
 137  C000              RETVAL_END_OF_FILE EQU 0x83
 138  C000              RETVAL_END_OF_LIST EQU 0x84
 139  C000              RETVAL_FILE_NOT_OPEN EQU 0x85
 140  C000              RETVAL_CARD_NOT_READY EQU 0x86
 141  C000              RETVAL_READ_OUT_OF_SYNC EQU 0x87
 142  C000              RETVAL_BUFFER_OVERRUN EQU 0x88
 143  C000              RETVAL_BUFFER_UNDERRUN EQU 0x89
 144  C000              RETVAL_CLOSE_OK EQU 0x8a
 145  C000              RETVAL_CLOSE_FAILED EQU 0x8b
 146  C000              RETVAL_CHDIR_OK EQU 0x8c
 147  C000              RETVAL_CHDIR_FAILED EQU 0x8d
 148  C000              RETVAL_BANK_SELECT_DONE EQU 0x8e
 149  C000              RETVAL_CREATE_OK EQU 0x8f
 150  C000              RETVAL_CREATE_FAILED EQU 0x90
 151  C000              RETVAL_DATA_RECEIVED EQU 0x91
 152  C000              RETVAL_DATA_FAILED_TO_RECEIVE EQU 0x92
 153  C000              RETVAL_MKDIR_OK EQU 0x93
 154  C000              RETVAL_MKDIR_FAILED EQU 0x94
 155  C000              RETVAL_RMDIR_OK EQU 0x95
 156  C000              RETVAL_RMDIR_FAILED EQU 0x96
 157  C000              RETVAL_DELETE_OK EQU 0x97
 158  C000              RETVAL_DELETE_FAILED EQU 0x98
 159  C000              RETVAL_INVALID_PARAMETER_ID EQU 0x99
 160  C000              RETVAL_PARAMETER_SET EQU 0x9A
 161  C000
 162  C000              CAS_IN_HW_REDIRECT_ADDR EQU $0B05
 163  C000              CAS_OUT_HW_REDIRECT_ADDR EQU $0B0D
 164  C000
 165  C000              OPEN_FOR_READ_FILE_TYPE EQU $0BF3 ; 0x00 no open file, 0x01 buffered, 0x11 unbuffered
 166  C000              OPEN_FOR_WRITE_FILE_TYPE EQU $0D14 ; 0x00 no open file, 0x01 buffered, 0x11 unbuffered
 167  C000
 168  C000              VERIFY_ONGOING EQU  $0BF1
 169  C000              AVAILABLE_FOR_GET EQU $0BF4
 170  C000              REMAINING_BYTES EQU $0D05
 171  C000              BUFFER      EQU     $0B6B ; 00: non-buffered, otherwise: buffered
 172  C000              END_OF_FILE EQU     $0B6E
 173  C000              BORDER_COLOR EQU    $0B4F
 174  C000              INK_COLOR   EQU     $0B4D
 175  C000              PAPER_COLOR EQU     $0B4E
 176  C000              PORT02_SHADOW EQU   $0003
 177  C000              PORT03_SHADOW EQU   $0B11
 178  C000              PICTURE     EQU     $0B51
 179  C000
 180  C000
 181  C000
 182  C000              ;
 183  C000              ;   OPEN = 0, // Open a file. Parameter is a null terminated string. Returns 0: ok
 184  C000              ;   CLOSE,   // Closes the open file. Returns OK
 185  C000              ;   CHDIR,   // Change dir. Parameter is a null terminated string. Returns 0:ok, 1:FILE_NOT_FOUND
 186  C000              ;   LIST,    // Gets the list of files in the current directory (fName, type, size)
 187  C000              ;   ACK_LIST, //
 188  C000              ;   GETDATA,   // Returns OK, then [num of bytes to return (GETDATA_SIZE)]. After num of bytes read TVC must send ACK_GETDATA;
 189  C000              ;   FINFO,   // Returns the file info. Param: null terminated file name.
 190  C000              ;   GETCDIR  // Returns the current path: length of string + string
 191  C000              ;   NONE = 255
 192  C000              ;
 193  C000
 194  C000              SDISK_NANO_CMD_OPEN_RO EQU 0x00
 195  C000              SDISK_NANO_CMD_CLOSE_RO EQU 0x01
 196  C000              SDISK_NANO_CMD_CHDIR EQU 0x02
 197  C000              SDISK_NANO_CMD_LIST EQU 0x03
 198  C000              SDISK_NANO_CMD_ACKLIST EQU 0x04
 199  C000              SDISK_NANO_CMD_GETDATA EQU 0x05
 200  C000              SDISK_NANO_CMD_GETCDIR EQU 0x07
 201  C000              SDISK_NANO_CMD_BANKTO0 EQU 0x08
 202  C000              SDISK_NANO_CMD_BANKTO1 EQU 0x09
 203  C000              SDISK_NANO_CMD_CREATE EQU 0x0A
 204  C000              SDISK_NANO_CMD_PUTDATA EQU 0x0B
 205  C000              SDISK_NANO_CMD_CLOSEWRITE EQU 0x0C
 206  C000              SDISK_NANO_CMD_GETPARAMETER EQU 0x0D
 207  C000              SDISK_NANO_CMD_SETPARAMETER EQU 0x0E
 208  C000              SDISK_NANO_CMD_MKDIR EQU 0x0F
 209  C000              SDISK_NANO_CMD_RMDIR EQU 0x10
 210  C000              SDISK_NANO_CMD_DELETE EQU 0x11
 211  C000
 212  C000
 213  C000              NUM_OF_FUNCTIONS EQU 14
 214  C000              F_ISR       EQU     0
 215  C000              F_CHIO      EQU     1
 216  C000              F_CHOUT     EQU     $51
 217  C000              F_CHIN      EQU     $D1
 218  C000              F_BLKIO     EQU     2
 219  C000              F_BLKOUT    EQU     $52
 220  C000              F_BLKIN     EQU     $D2
 221  C000              F_OPEN      EQU     3
 222  C000              F_CREATE    EQU     $53
 223  C000              F_OPENF     EQU     $D3
 224  C000              F_CLOSE     EQU     4
 225  C000              F_VERIFY    EQU     5
 226  C000              F_PWD       EQU     6
 227  C000              F_DIRFIRST  EQU     $D7
 228  C000              F_DIRNEXT   EQU     $D8
 229  C000              F_CHDIR     EQU     9
 230  C000              F_MKDIR     EQU     10
 231  C000              F_RMDIR     EQU     11
 232  C000              F_DELETE    EQU     12
 233  C000              F_PARAM     EQU     13
 234  C000              F_SETPARAM  EQU     $5D
 235  C000              F_GETPARAM  EQU     $DD
 236  C000
 237  C000
 238  C000              F_VIDMODE   EQU     $04
 239  C000              F_EDCHOUT   EQU     $21
 240  C000              F_EDBLKOUT  EQU     $22
 241  C000              F_EDCPOS    EQU     $23
 242  C000
 243  C000              PARAM_MENUONBOOT EQU $00
 244  C000              PARAM_SORTORDER  EQU $01
 245  C000              ; read-only, live parameter! A hack, on the nano
 246  C000              ; flash read (for checking ID) happens, and so on...
 247  C000              ; not a cheap operation, occurs in every 3 secs.
 248  C000              PARAM_SDAVAILABLE EQU $02
 249  C000              ; read-only, returns the firmware version of the
 250  C000              ; Arduino Nano code. Same flash read as above
 251  C000              PARAM_GET_FW_VERSION EQU $03
 252  C000
 253  C000
 254  C000                      ORG    $C000
 255  C000 4D 4F 50 53          DB      "MOPS"
 256  C004              CARD_SHORT_NAME_LENGTH:
 257  C004 06                   DB      6
 258  C005              CARD_SHORT_NAME:
 259  C005 4E 41 4E 4F          DB      "NANOSD"
 259  C009 53 44
 260  C00B                      ORG    $C00B
 261  C00B 40 C0                DW      INIT
 262  C00D 0E                   DB      NUM_OF_FUNCTIONS
 263  C00E A9 D3                DW      INTERRUPT_HANDLER_EXIT  ;  0
 264  C010 AA D3                DW      CHARIO_HANDLER          ;  1
 265  C012 5E D4                DW      BLOCKIO_HANDLER         ;  2
 266  C014 0C D5                DW      OPEN_HANDLER            ;  3
 267  C016 1F D6                DW      CLOSE_HANDLER           ;  4
 268  C018 7C D6                DW      VERIFY_HANDLER          ;  5
 269  C01A A0 D6                DW      PWD_HANDLER             ;  6
 270  C01C CF D6                DW      DIRFIRST_HANDLER        ;  7
 271  C01E 04 D7                DW      DIRNEXT_HANDLER         ;  8
 272  C020 22 D7                DW      CHDIR_HANDLER           ;  9
 273  C022 56 D7                DW      MKDIR_HANDLER           ; 10
 274  C024 8B D7                DW      RMDIR_HANDLER           ; 11
 275  C026 C0 D7                DW      DELETE_HANDLER          ; 12
 276  C028 F5 D7                DW      PARAM_HANDLER           ; 13
 277  C02A
 278  C02A                      MACRO PSTR strng
 279  C02A ~                    BYTE .endstr-.startstr
 280  C02A ~            .startstr
 281  C02A ~                    BYTE strng
 282  C02A ~            .endstr
 283  C02A                      ENDM
 284  C02A
 285  C02A                      MACRO PSTR2 str1, str2
 286  C02A ~                    BYTE .endstr-.startstr
 287  C02A ~            .startstr
 288  C02A ~                    BYTE str1, str2
 289  C02A ~            .endstr
 290  C02A                      ENDM
 291  C02A
 292  C02A
 293  C02A                      ORG    $C040
 294  C040
 295  C040                      INCLUDE "NanoSDROM_INIT.a80"
# file opened: NanoSDROM_INIT.a80
   1+ C040              INIT:
   2+ C040 DD E5                    PUSH    IX ; IX points to the 30h bytes long buffer assigned to this IO card (40h, 70h, A0h, D0h)
   3+ C042 E1                       POP     HL ; HL= IX
   4+ C043 7D                       LD      A,L
   5+ C044 D6 10                    SUB     $10
   6+ C046 E6 C0                    AND     $C0 ; 0x00, 0x40, 0x80, 0xc0
   7+ C048 32 11 0B                 LD      (PORT03_SHADOW),A
   8+ C04B 0F                       RRCA
   9+ C04C 0F                       RRCA     ; 0x00, 0x10, 0x20, 0x30
  10+ C04D C6 10                    ADD     A,$10
  11+ C04F DD 77 08                 LD      (IX+8),A
  12+ C052 0F                       RRCA
  13+ C053 0F                       RRCA
  14+ C054 0F                       RRCA
  15+ C055 0F                       RRCA
  16+ C056 D6 01                    SUB     $01
  17+ C058 F6 80                    OR      $80
  18+ C05A              ;           CAS read routines
  19+ C05A 32 05 0B                 LD      (CAS_IN_HW_REDIRECT_ADDR),A
  20+ C05D              ;           CAS write routines
  21+ C05D 32 0D 0B                 LD      (CAS_OUT_HW_REDIRECT_ADDR),A
  22+ C060
  23+ C060 3E F0                    LD      a,$f0 ; U0-U1-U2-EXT
  24+ C062 32 03 00                 LD      (PORT02_SHADOW),A
  25+ C065
  26+ C065 3A 22 0B                 LD      a,($0B22)
  27+ C068 F5                       PUSH    AF
  28+ C069
  29+ C069 3A 21 0B                 LD      a,($0B21)
  30+ C06C 3C                       INC     a
  31+ C06D 28 4D                    JR      z,SKIPPED_HARD_SETUP
  32+ C06F
  33+ C06F 3E FF                    LD      a,$FF ; pressing reset during menu/status header -> COLD RESET
  34+ C071 32 22 0B                 LD      ($0B22),A
  35+ C074
  36+ C074              ; setup a fake EXT0
  37+ C074 3E 48                    LD      A,$48
  38+ C076 32 21 00                 LD      ($0021),A
  39+ C079 3E 0B                    LD      A,$0b
  40+ C07B 32 22 00                 LD      ($0022),A
  41+ C07E 3E FF                    LD      A,$FF
  42+ C080 32 FB 1F                 LD      (KEY_PRESS_IDX),A
  43+ C083
  44+ C083 CD E4 C0                 CALL    PRINT_VERSION ; interrupts are disabled after this
  45+ C086
  46+ C086 CD 6F C1                 CALL    GET_MENUSTATUS
  47+ C089 32 FF 1F                 LD      (SHOW_MENU_ON_BOOT),A
  48+ C08C B7                       OR      A
  49+ C08D 28 05                    JR      z,WAIT_FOR_LOOP
  50+ C08F
  51+ C08F              INIT_SHOW_MENU:
  52+ C08F CD 7E C1                 CALL    SHOW_MENU
  53+ C092
  54+ C092 18 25                    JR      SKIP_WAIT
  55+ C094
  56+ C094              WAIT_FOR_LOOP:
  57+ C094 01 03 1B                 LD      BC,$100 * (64-37) + $03
  58+ C097 F7                       RST     $30
  59+ C098 23                       DB      F_EDCPOS
  60+ C099 21 EE D9                 LD      HL,PRESS_ESC_STR
  61+ C09C CD 9F D8                 CALL    INIT_PRINT_STRING
  62+ C09F
  63+ C09F 21 D0 07                 LD      HL,2000
  64+ C0A2 3A 11 0B                 LD      A,(PORT03_SHADOW)
  65+ C0A5 E6 F0                    AND     $F0
  66+ C0A7 F6 07                    OR      $07
  67+ C0A9 D3 03                    OUT     ($03),A
  68+ C0AB              WAIT_INIT_LOOP:
NanoSDROM_INIT.a80(69): error: Label not found: WAIT_1ms
  69+ C0AB CD 00 00                 CALL    WAIT_1ms
  70+ C0AE DB 58                    IN      A,($58)
  71+ C0B0 CB 5F                    BIT     3,A
  72+ C0B2 28 0D                    JR      z,INIT_ESC_PRESSED
  73+ C0B4 2B                       DEC     HL
  74+ C0B5 7C                       LD      A,H
  75+ C0B6 B5                       OR      L
  76+ C0B7 20 F2                    JR      nz,WAIT_INIT_LOOP
  77+ C0B9
  78+ C0B9              SKIP_WAIT:
  79+ C0B9 CD 2D C1                 CALL    SETUP_ISR
  80+ C0BC
  81+ C0BC              SKIPPED_HARD_SETUP:
  82+ C0BC F1                       POP     AF
  83+ C0BD 32 22 0B                 LD      ($0B22),A
  84+ C0C0
  85+ C0C0 C9                       RET
  86+ C0C1
  87+ C0C1              INIT_ESC_PRESSED:
NanoSDROM_INIT.a80(88): error: Label not found: WAIT_1mS
  88+ C0C1 CD 00 00                 CALL    WAIT_1mS
  89+ C0C4 DB 58                    IN      A,($58)
  90+ C0C6 CB 5F                    BIT     3,A
  91+ C0C8 28 F7                    JR      z,INIT_ESC_PRESSED
  92+ C0CA 3A 11 0B                 LD      A,(PORT03_SHADOW)
  93+ C0CD D3 03                    OUT     ($03),A
  94+ C0CF
  95+ C0CF 01 03 1B                 LD      BC,$100 * (64-37) + $03
  96+ C0D2 F7                       RST     $30
  97+ C0D3 23                       DB      F_EDCPOS
  98+ C0D4 21 EE D9                 LD      HL,PRESS_ESC_STR
  99+ C0D7 06 25                    LD      B,37
 100+ C0D9 0E 20                    LD      C,$20
 101+ C0DB              CLR_PRESS_ESC_LOOP:
 102+ C0DB C5                       PUSH    BC
 103+ C0DC CD E8 D8                 CALL    INIT_PRINT_CHAR
 104+ C0DF C1                       POP     BC
 105+ C0E0 10 F9                    DJNZ    CLR_PRESS_ESC_LOOP
 106+ C0E2
 107+ C0E2 18 AB                    JR      INIT_SHOW_MENU
 108+ C0E4
 109+ C0E4
 110+ C0E4              PRINT_VERSION:
 111+ C0E4 CD 08 C1                 CALL    INIT_SCREEN
 112+ C0E7 0E 00                    LD      C,00 ;   VID-MODE , 2-col
 113+ C0E9 F7                       RST     $30
 114+ C0EA 04                       DB      F_VIDMODE
 115+ C0EB
 116+ C0EB 01 01 01                 LD      BC,$0101
 117+ C0EE F7                       RST     $30
 118+ C0EF 23                       DB      F_EDCPOS
 119+ C0F0 21 C0 D9                 LD      HL,SDISK_VERSION_STR
 120+ C0F3 CD 9F D8                 CALL    INIT_PRINT_STRING
 121+ C0F6 21 DF D9                 LD      hl,SDISK_BYSANYI_STR
 122+ C0F9 0E 01                    LD      C,$01
 123+ C0FB 3E 40                    LD      A,64
 124+ C0FD 96                       SUB     (HL)
 125+ C0FE 47                       LD      B,A
 126+ C0FF F7                       RST     $30
 127+ C100 23                       DB      F_EDCPOS
 128+ C101
 129+ C101 21 DF D9                 LD      HL,SDISK_BYSANYI_STR
 130+ C104 CD 9F D8                 CALL    INIT_PRINT_STRING
 131+ C107
 132+ C107 C9                       RET
 133+ C108
 134+ C108              INIT_SCREEN:
 135+ C108 3E 01                    LD      a,01
 136+ C10A 32 4D 0B                 LD      (INK_COLOR),a ; ink
 137+ C10D 3E 00                    LD      a,0
 138+ C10F 32 4E 0B                 LD      (PAPER_COLOR),a ; paper
 139+ C112 3E 00                    LD      a,00
 140+ C114 32 73 0B                 LD      ($0b73),a ; resolution
 141+ C117 3E 00                    LD      a,00
 142+ C119 32 4F 0B                 LD      ($0b4f),a ; background
 143+ C11C
 144+ C11C              ; white for characters
 145+ C11C 3E 00                    LD      a,$00
 146+ C11E D3 60                    OUT     ($60),a
 147+ C120 3E 50                    LD      a,$50 ;
 148+ C122 D3 61                    OUT     ($61),a
 149+ C124 3E 10                    LD      a,$10
 150+ C126 D3 62                    OUT     ($62),a
 151+ C128 3E FF                    LD      a,$ff
 152+ C12A D3 62                    OUT     ($62),a
 153+ C12C C9                       RET
 154+ C12D
 155+ C12D              SETUP_ISR:
 156+ C12D              ; COPY_EXT_JUMP:
 157+ C12D 11 0A 00                 LD      de,$000A
 158+ C130 DD 19                    ADD     IX,de
 159+ C132 DD E5                    PUSH    IX ; 004a, 007a, 00aa, 00da
 160+ C134 D1                       POP     DE
 161+ C135 D5                       PUSH    de ; 004a, 007a, 00aa, 00da
 162+ C136 D5                       PUSH    de ; 004a, 007a, 00aa, 00da
 163+ C137 21 9E D9                 LD      HL,JUMPER_CODE
 164+ C13A 01 22 00                 LD      BC,JUMPER_CODE_END - JUMPER_CODE
 165+ C13D ED B0                    LDIR
 166+ C13F
 167+ C13F D1                       POP     DE
 168+ C140 D5                       PUSH    DE
 169+ C141 1B                       DEC     DE
 170+ C142 1B                       DEC     DE ; IO Base addr in mem (0048, 0078, 00A8, 00D8)
 171+ C143 7B                       LD      A,E
 172+ C144 21 14 00                 LD      HL,IO_BASE_LDC + 1 - JUMPER_CODE_U0 + 2
 173+ C147 19                       ADD     HL,DE
 174+ C148 77                       LD      (HL),A
 175+ C149
 176+ C149 2A 3E 00                 LD      HL,($003e) ; let's store the original ISR jump addr
 177+ C14C 22 00 00                 LD      ($0000),HL
 178+ C14F
 179+ C14F D1                       POP     DE
 180+ C150 D5                       PUSH    DE
 181+ C151 21 20 00                 LD      HL,FINISH_JUMPER_CODE + 1 - JUMPER_CODE_U0
 182+ C154 19                       ADD     HL,DE
 183+ C155 ED 5B 00 00              LD      DE,($0000)
 184+ C159 73                       LD      (HL),E
 185+ C15A 23                       INC     HL
 186+ C15B 72                       LD      (HL),D
 187+ C15C
 188+ C15C E1                       POP     HL ; start addr of U0 jump, but for ISR we skip di and push af.
 189+ C15D 23                       INC     HL
 190+ C15E 23                       INC     HL
 191+ C15F 22 3E 00                 LD      ($003e),HL
 192+ C162
 193+ C162 E1                       POP     HL ; IX  - 004A, 007A, 00aA, 00dA
 194+ C163 7D                       LD      A,L
 195+ C164 D6 10                    SUB     $10
 196+ C166 E6 C0                    AND     $C0 ; 0x00, 0x40, 0x80, 0xc0
 197+ C168 11 0E 00                 LD      DE,EXT_SELECTION + 1 - JUMPER_CODE_U0
 198+ C16B 19                       ADD     HL,DE
 199+ C16C B6                       OR      (HL)
 200+ C16D 77                       LD      (HL),A
 201+ C16E C9                       RET
 202+ C16F
 203+ C16F              GET_MENUSTATUS:
 204+ C16F 0E 00                    LD      C,PARAM_MENUONBOOT
 205+ C171 F7                       RST     $30
 206+ C172 DD                       DB      F_GETPARAM ; READ PARAM
 207+ C173 B7                       OR      A
 208+ C174 20 05                    JR      nz,PARM_READ_DEFAULT
 209+ C176 7B                       LD      A,E
 210+ C177 B7                       OR      A
 211+ C178 20 01                    JR      nz,PARM_READ_DEFAULT
 212+ C17A C9                       RET
 213+ C17B              PARM_READ_DEFAULT:
 214+ C17B 3E 01                    LD      A,1 ; default value: show menu
 215+ C17D C9                       RET
 216+ C17E
 217+ C17E
 218+ C17E
 219+ C17E
 220+ C17E
 221+ C17E
 222+ C17E
 223+ C17E
 224+ C17E
 225+ C17E
# file closed: NanoSDROM_INIT.a80
 296  C17E
 297  C17E                      INCLUDE "NanoSDROM_MENU.a80"
# file opened: NanoSDROM_MENU.a80
   1+ C17E              SHOW_MENU:
   2+ C17E CD FD C9                 CALL    DRAW_TABLE
   3+ C181 CD 02 C9                 CALL    PRINT_HELP_TEXTS
   4+ C184 CD 8D C1                 CALL    INIT_INPUT_VARIABLES
   5+ C187 CD 61 C7                 CALL    SETUP_SORT_SIGN
   6+ C18A C3 75 C8                 JP      MENU_LOOP
   7+ C18D
   8+ C18D              LAST_KNOWN_SD_STATE EQU $1FE0
   9+ C18D              CHECK_SD_COUNTER EQU $1FE1
  10+ C18D              SORT_OF_VISIBLE_LIST EQU $1FE3
  11+ C18D              VAR_SORT_START_POI EQU $1FE4
  12+ C18D              VAR_SORT_END_POI EQU $1FE4
  13+ C18D              VAR_FIRST_DIR_POI EQU $1FE8
  14+ C18D              VAR_FIRST_FILE_POI EQU $1FEA
  15+ C18D              INCREASE_LINE EQU   $1FEC ; 2 bytes
  16+ C18D              MENU_FIRST_ROW EQU  $1FEE ; 1 byte
  17+ C18D              MENU_LAST_ROW EQU   $1FEF ; 1 byte
  18+ C18D              WINDOW_POS  EQU     $1FF0 ; 2 bytes starting line pos (0 - DIR_SIZE-1)
  19+ C18D              SELECT_POS  EQU     $1FF2 ; 1 byte  selected line on screen (0-15)
  20+ C18D              DIR_SIZE    EQU     $1FF3 ; 2 bytes size of directory (0 - 2400)
  21+ C18D              IS_IN_ROOT  EQU     $1FF5 ; 1 byte -> 0-not in root, otheriwse: in the root
  22+ C18D              HIGHLIGHTED EQU     $1FF6 ; 1 byte -> 0 not in selected line
  23+ C18D
  24+ C18D              AUTOLOAD_STR_BUFFER EQU $1F00 ; should be aligned to $100 due to ISR calc routine
  25+ C18D              PRESSED_KEY EQU     $1FF7
  26+ C18D              PRESSED_KEY_COUNTER EQU $1FF8
  27+ C18D              KEY_REPEATED EQU    $1FF9
  28+ C18D              OLD_PRESSED_KEY EQU $1FFA
  29+ C18D              KEY_PRESS_IDX EQU   $1FFB
  30+ C18D              DIR_ENTRY_ADDR EQU  $1FFC ; (2 bytes)
  31+ C18D              SORT_ORDER  EQU     $1FFE
  32+ C18D              SHOW_MENU_ON_BOOT EQU $1FFF ; important to position here, not zeroed by INIT_INPUT_VARIABLES
  33+ C18D              PATH_INPUT  EQU     $2000
  34+ C18D              DIR_INPUT   EQU     $2040
  35+ C18D              STATUS_LINE_BACKUP EQU $2080
  36+ C18D              DIR_ENTRY_POIS EQU  $2100
  37+ C18D              DIR_DATA    EQU     $3000
  38+ C18D              DIR_ENTRY_LEN EQU   17
  39+ C18D              FIRST_KBD_COUNTER EQU 20
  40+ C18D              NEXT_KBD_COUNTER EQU 6
  41+ C18D              MENU_ON_BOOT_TXT_ROW EQU 4
  42+ C18D              MENU_ON_BOOT_TXT_COL EQU 40
  43+ C18D              CHECK_SD_CNT_VAL EQU 300
  44+ C18D
  45+ C18D
  46+ C18D              KEY_UP      EQU     $05
  47+ C18D              KEY_DOWN    EQU     $18
  48+ C18D              KEY_A       EQU     $61
  49+ C18D              KEY_Y       EQU     $79
  50+ C18D              KEY_EACUTE  EQU     $91
  51+ C18D              KEY_COLON   EQU     $01
  52+ C18D              KEY_LEFT    EQU     $13
  53+ C18D              KEY_RIGHT   EQU     $04
  54+ C18D              KEY_ESC     EQU     $1B
  55+ C18D              KEY_RETURN  EQU     $0D
  56+ C18D              KEY_SPACE   EQU     $20
  57+ C18D              KEY_S       EQU     $73
  58+ C18D              KEY_N       EQU     $6E
  59+ C18D              KEY_O       EQU     $6F
  60+ C18D
  61+ C18D
  62+ C18D              START_COL   EQU     01
  63+ C18D              START_ROW   EQU     02
  64+ C18D
  65+ C18D
  66+ C18D              INIT_INPUT_VARIABLES:
  67+ C18D AF                       XOR     A
  68+ C18E 21 F0 1F                 LD      HL,WINDOW_POS
  69+ C191 11 F1 1F                 LD      DE,WINDOW_POS+1
  70+ C194 77                       LD      (HL),A
  71+ C195 01 0E 00                 LD      BC,$000E
  72+ C198 ED B0                    LDIR
  73+ C19A 32 EE 1F                 LD      (MENU_FIRST_ROW),A ; 00
  74+ C19D 3D                       DEC     A
  75+ C19E 32 FB 1F                 LD      (KEY_PRESS_IDX),A
  76+ C1A1 11 00 21                 LD      DE,DIR_ENTRY_POIS
  77+ C1A4 21 FC 1F                 LD      HL,DIR_ENTRY_ADDR
  78+ C1A7 73                       LD      (HL),E
  79+ C1A8 23                       INC     HL
  80+ C1A9 72                       LD      (HL),D
  81+ C1AA 3E 0F                    LD      A,15
  82+ C1AC 32 EF 1F                 LD      (MENU_LAST_ROW),A ; 15
  83+ C1AF 0E 01                    LD      C,PARAM_SORTORDER
  84+ C1B1 F7                       RST     $30
  85+ C1B2 DD                       DB      F_GETPARAM
  86+ C1B3 7B                       LD      A,E
  87+ C1B4 32 FE 1F                 LD      (SORT_ORDER),A
  88+ C1B7 21 2C 01                 LD      HL,CHECK_SD_CNT_VAL ; check in each 3sec
  89+ C1BA 22 E1 1F                 LD      (CHECK_SD_COUNTER),HL
  90+ C1BD 0E 02                    LD      C,PARAM_SDAVAILABLE
  91+ C1BF F7                       RST     $30
  92+ C1C0 DD                       DB      F_GETPARAM
  93+ C1C1 7B                       LD      A,E
  94+ C1C2 32 E0 1F                 LD      (LAST_KNOWN_SD_STATE),A
  95+ C1C5 C9                       RET
  96+ C1C6
  97+ C1C6              LOAD_DIR:
  98+ C1C6 AF                       XOR     A
  99+ C1C7 32 E3 1F                 LD      (SORT_OF_VISIBLE_LIST),A
 100+ C1CA 21 6D CC                 LD      HL,LOADING_DIRECTORY_STR
 101+ C1CD CD A7 CA                 CALL    PRINT_STATUS_MSG
 102+ C1D0 21 00 21                 LD      hl,DIR_ENTRY_POIS
 103+ C1D3 22 FC 1F                 LD      (DIR_ENTRY_ADDR),HL
 104+ C1D6 21 00 00                 LD      HL,0
 105+ C1D9 22 F3 1F                 LD      (DIR_SIZE),HL
 106+ C1DC 11 00 30                 LD      DE,DIR_DATA
 107+ C1DF 3A F5 1F                 LD      A,(IS_IN_ROOT)
 108+ C1E2 B7                       OR      A
 109+ C1E3 20 18                    JR      nz,SKIP_CDUP
 110+ C1E5
 111+ C1E5 2A FC 1F                 LD      HL,(DIR_ENTRY_ADDR) ; HL -> DIR_ENTRY_POIS
 112+ C1E8 73                       LD      (HL),E
 113+ C1E9 23                       INC     HL
 114+ C1EA 72                       LD      (HL),D
 115+ C1EB 23                       INC     HL
 116+ C1EC 22 FC 1F                 LD      (DIR_ENTRY_ADDR),HL
 117+ C1EF
 118+ C1EF 21 01 00                 LD      HL,1
 119+ C1F2 22 F3 1F                 LD      (DIR_SIZE),HL
 120+ C1F5 21 CB CA                 LD      HL,CDUP_RECORD
 121+ C1F8 01 11 00                 LD      BC,DIR_ENTRY_LEN
 122+ C1FB ED B0                    LDIR
 123+ C1FD
 124+ C1FD              SKIP_CDUP:
 125+ C1FD EB                       EX      DE,HL ; HL is the current DIR_DATA record pointer
 126+ C1FE 11 40 20                 LD      DE,DIR_INPUT
 127+ C201 E5                       PUSH    HL
 128+ C202 F7                       RST     30h
 129+ C203 D7                       DB      F_DIRFIRST
 130+ C204 E1                       POP     HL
 131+ C205 B7                       OR      A
 132+ C206 20 34                    JR      nz,NO_MORE_FILES ; failed to read or no more files - either way: we are finished
 133+ C208
 134+ C208              PROCESS_DIR_ENRY_LOOP:
 135+ C208 EB                       EX      DE,HL ; DE is current DIR_DATA pointer
 136+ C209 2A FC 1F                 LD      HL,(DIR_ENTRY_ADDR)
 137+ C20C 73                       LD      (HL),E
 138+ C20D 23                       INC     HL
 139+ C20E 72                       LD      (HL),D
 140+ C20F 23                       INC     HL
 141+ C210 22 FC 1F                 LD      (DIR_ENTRY_ADDR),HL
 142+ C213 21 40 20                 LD      HL,DIR_INPUT
 143+ C216 01 11 00                 LD      BC,DIR_ENTRY_LEN
 144+ C219 ED B0                    LDIR
 145+ C21B 2A F3 1F                 LD      HL,(DIR_SIZE)
 146+ C21E 23                       INC     HL
 147+ C21F 22 F3 1F                 LD      (DIR_SIZE),HL
 148+ C222
 149+ C222 D5                       PUSH    de
 150+ C223 01 16 0F                 LD      bc,$100*(START_COL+14) + (START_ROW+20)
 151+ C226 F7                       RST     $30
 152+ C227 23                       DB      F_EDCPOS
 153+ C228 2A F3 1F                 LD      hl,(DIR_SIZE)
 154+ C22B CD B1 D8                 CALL    INIT_PRINT_16BIT_DECIMAL_NUMBER
 155+ C22E D1                       POP     de
 156+ C22F EB                       EX      DE,HL ; HL is current DIR_DATA pointer
 157+ C230 11 40 20                 LD      DE,DIR_INPUT
 158+ C233 E5                       PUSH    HL
 159+ C234 F7                       RST     30h
 160+ C235 D8                       DB      F_DIRNEXT
 161+ C236 E1                       POP     HL
 162+ C237 B7                       OR      A
 163+ C238 20 02                    JR      nz,NO_MORE_FILES ; failed to read
 164+ C23A 18 CC                    JR      PROCESS_DIR_ENRY_LOOP
 165+ C23C
 166+ C23C              NO_MORE_FILES:
 167+ C23C CD BF CA                 CALL    REVERT_STATUS_MSG
 168+ C23F C9                       RET
 169+ C240
 170+ C240              MUL_HL_BY_17:
 171+ C240 C5                       PUSH    bc
 172+ C241 E5                       PUSH    hl
 173+ C242 06 04                    LD      b,4
 174+ C244              MUL2:
 175+ C244 CB 25                    SLA     l
 176+ C246 CB 14                    RL      h
 177+ C248 10 FA                    DJNZ    MUL2
 178+ C24A D1                       POP     DE
 179+ C24B 19                       ADD     HL,DE
 180+ C24C C1                       POP     BC
 181+ C24D C9                       RET
 182+ C24E
 183+ C24E              PRINT_FILENAME:
 184+ C24E 01 0C 00                 LD      BC,12
 185+ C251 F7                       RST     30h
 186+ C252 22                       DB      F_EDBLKOUT
 187+ C253 C9                       RET
 188+ C254
 189+ C254              PRINT_CURRENT_LIST:
 190+ C254 3A 38 00                 LD      A,($0038)
 191+ C257 F5                       PUSH    AF
 192+ C258 3E C9                    LD      A,$C9
 193+ C25A 32 38 00                 LD      ($0038),A
 194+ C25D
 195+ C25D 2A F0 1F                 LD      HL,(WINDOW_POS)
 196+ C260 3A EE 1F                 LD      A,(MENU_FIRST_ROW)
 197+ C263 4F                       LD      C,A
 198+ C264 06 00                    LD      B,0
 199+ C266 09                       ADD     HL,BC
 200+ C267 CB 25                    SLA     L
 201+ C269 CB 14                    RL      H
 202+ C26B 11 00 21                 LD      DE,DIR_ENTRY_POIS
 203+ C26E 19                       ADD     HL,DE
 204+ C26F 22 FC 1F                 LD      (DIR_ENTRY_ADDR),HL ; DIR_ENTY_ADDR contains the first entry* to be drawn
 205+ C272
 206+ C272              PRINT_LIST_LOOP:     ; C - list idx
 207+ C272 79                       LD      A,C
 208+ C273 FE 10                    CP      16
 209+ C275 CA 14 C3                 JP      z,END_OF_LIST_REACHED
 210+ C278 3A EF 1F                 LD      A,(MENU_LAST_ROW)
 211+ C27B 3C                       INC     A
 212+ C27C B9                       CP      C
 213+ C27D CA 14 C3                 JP      z,END_OF_LIST_REACHED
 214+ C280
 215+ C280 2A F0 1F                 LD      HL,(WINDOW_POS)
 216+ C283 09                       ADD     HL,BC
 217+ C284 EB                       EX      DE,HL
 218+ C285 2A F3 1F                 LD      HL,(DIR_SIZE) ; HL is item number to be drawn
 219+ C288 AF                       XOR     A
 220+ C289 ED 52                    SBC     HL,DE
 221+ C28B CA 14 C3                 JP      z,END_OF_LIST_REACHED
 222+ C28E EB                       EX      DE,HL
 223+ C28F
 224+ C28F 3A F2 1F                 LD      A,(SELECT_POS)
 225+ C292 B9                       CP      C
 226+ C293 20 13                    JR      nz,INVERT_PRINT_SKIP
 227+ C295 3A 4D 0B                 LD      A,(INK_COLOR)
 228+ C298 47                       LD      B,A
 229+ C299 3A 4E 0B                 LD      A,(PAPER_COLOR)
 230+ C29C 32 4D 0B                 LD      (INK_COLOR),A
 231+ C29F 78                       LD      A,B
 232+ C2A0 32 4E 0B                 LD      (PAPER_COLOR),A
 233+ C2A3 3E 01                    LD      A,1
 234+ C2A5 32 F6 1F                 LD      (HIGHLIGHTED),A
 235+ C2A8              INVERT_PRINT_SKIP:
 236+ C2A8 C5                       PUSH    BC ; C current row counter
 237+ C2A9 3E 05                    LD      A,START_ROW + 3
 238+ C2AB 81                       ADD     A,C
 239+ C2AC 4F                       LD      C,A ; row number on screen
 240+ C2AD 06 02                    LD      B,START_COL + 1 ; col number on screen
 241+ C2AF C5                       PUSH    BC ; Current cursor position, filename start
 242+ C2B0 F7                       RST     $30
 243+ C2B1 23                       DB      F_EDCPOS
 244+ C2B2 2A FC 1F                 LD      HL,(DIR_ENTRY_ADDR)
 245+ C2B5 5E                       LD      E,(HL)
 246+ C2B6 23                       INC     HL
 247+ C2B7 56                       LD      D,(HL)
 248+ C2B8 CD 4E C2                 CALL    PRINT_FILENAME
 249+ C2BB C1                       POP     BC
 250+ C2BC 06 0F                    LD      B,START_COL + 1 + 13
 251+ C2BE F7                       RST     $30
 252+ C2BF 23                       DB      F_EDCPOS
 253+ C2C0 2A FC 1F                 LD      HL,(DIR_ENTRY_ADDR)
 254+ C2C3 5E                       LD      E,(HL)
 255+ C2C4 23                       INC     HL
 256+ C2C5 56                       LD      D,(HL)
 257+ C2C6 EB                       EX      de,hl
 258+ C2C7 11 0C 00                 LD      DE,12
 259+ C2CA 19                       ADD     HL,DE
 260+ C2CB 7E                       LD      A,(HL)
 261+ C2CC B7                       OR      A
 262+ C2CD 20 08                    JR      nz,PRINT_FILE_SIZE
 263+ C2CF 21 87 D2                 LD      HL,TYPE_DIR_STR
 264+ C2D2 CD FB D8                 CALL    PRINT_STRING
 265+ C2D5 18 18                    JR      DIR_LINE_END
 266+ C2D7              PRINT_FILE_SIZE:
 267+ C2D7 23                       INC     hl
 268+ C2D8 5E                       LD      e,(hl) ; low-to-high order bytes of filesize
 269+ C2D9 23                       INC     hl
 270+ C2DA 56                       LD      d,(hl)
 271+ C2DB 23                       INC     hl
 272+ C2DC D5                       PUSH    de
 273+ C2DD 5E                       LD      e,(hl)
 274+ C2DE 23                       INC     hl
 275+ C2DF 7E                       LD      a,(hl)
 276+ C2E0 E1                       POP     hl ; HL contains the low 16 bit of filesize
 277+ C2E1 B3                       OR      e
 278+ C2E2 20 05                    JR      nz,PRINT_LARGE_SIZE
 279+ C2E4 CD 42 D9                 CALL    PRINT_16BIT_DECIMAL_NUMBER
 280+ C2E7 18 06                    JR      DIR_LINE_END
 281+ C2E9              PRINT_LARGE_SIZE:
 282+ C2E9 21 8D D2                 LD      hl,LARGE_SIZE_STR
 283+ C2EC CD FB D8                 CALL    PRINT_STRING
 284+ C2EF              DIR_LINE_END:
 285+ C2EF C1                       POP     BC ; C contains the current ROW
 286+ C2F0 3A F6 1F                 LD      A,(HIGHLIGHTED)
 287+ C2F3 B7                       OR      A
 288+ C2F4 28 12                    JR      z,PRINT_COLORS_OK
 289+ C2F6
 290+ C2F6 3A 4D 0B                 LD      A,(INK_COLOR)
 291+ C2F9 47                       LD      B,A
 292+ C2FA 3A 4E 0B                 LD      A,(PAPER_COLOR)
 293+ C2FD 32 4D 0B                 LD      (INK_COLOR),A
 294+ C300 78                       LD      A,B
 295+ C301 32 4E 0B                 LD      (PAPER_COLOR),A
 296+ C304 AF                       XOR     A
 297+ C305 32 F6 1F                 LD      (HIGHLIGHTED),A
 298+ C308              PRINT_COLORS_OK:
 299+ C308 2A FC 1F                 LD      HL,(DIR_ENTRY_ADDR)
 300+ C30B 23                       INC     HL
 301+ C30C 23                       INC     HL
 302+ C30D 22 FC 1F                 LD      (DIR_ENTRY_ADDR),HL
 303+ C310 0C                       INC     C
 304+ C311 C3 72 C2                 JP      PRINT_LIST_LOOP
 305+ C314              END_OF_LIST_REACHED:
 306+ C314 F3                       DI
 307+ C315 F1                       POP     AF
 308+ C316 32 38 00                 LD      ($0038),A
 309+ C319 C9                       RET
 310+ C31A
 311+ C31A              CLEAR_TABLE:
 312+ C31A 3A 03 00                 LD      A,(PORT02_SHADOW)
 313+ C31D F5                       PUSH    AF
 314+ C31E 3E D0                    LD      A,$D0 ; U0-U1-VID-EXT
 315+ C320 D3 02                    OUT     ($02),A
 316+ C322
 317+ C322 21 01 8A                 LD      HL,(START_ROW-1 + 3)*640 + (START_COL-1 + 1) + $8000
 318+ C325 AF                       XOR     A
 319+ C326 06 10                    LD      b,16
 320+ C328              CLEAR_TBL_LOOP:
 321+ C328 C5                       PUSH    bc ; chr line number in stack
 322+ C329 06 0A                    LD      b,10
 323+ C32B              ONE_CHAR_HEIGHT_LOOP:
 324+ C32B C5                       PUSH    bc
 325+ C32C 06 0C                    LD      b,12 ; 12 characters (8+3 filenames + period)
 326+ C32E E5                       PUSH    hl ; starting address of the pixel line
 327+ C32F              FN_ONE_PXLINE_LOOP:
 328+ C32F 77                       LD      (HL),a
 329+ C330 23                       INC     HL
 330+ C331 10 FC                    DJNZ    FN_ONE_PXLINE_LOOP
 331+ C333 23                       INC     HL ; skip vertical bar
 332+ C334 06 05                    LD      b,5 ; fill 5 char long filesize
 333+ C336              FS_ONE_PXLINE_LOOP:
 334+ C336 77                       LD      (HL),a
 335+ C337 23                       INC     HL
 336+ C338 10 FC                    DJNZ    FS_ONE_PXLINE_LOOP
 337+ C33A E1                       POP     HL
 338+ C33B 11 40 00                 LD      DE,64
 339+ C33E 19                       ADD     HL,DE
 340+ C33F C1                       POP     BC
 341+ C340 10 E9                    DJNZ    ONE_CHAR_HEIGHT_LOOP
 342+ C342 C1                       POP     BC
 343+ C343 10 E3                    DJNZ    CLEAR_TBL_LOOP
 344+ C345 F1                       POP     AF
NanoSDROM_MENU.a80(345): error: Label not found: PORT02_shadow
 345+ C346 32 00 00                 LD      (PORT02_shadow),A
 346+ C349 D3 02                    OUT     ($02),A
 347+ C34B C9                       RET
 348+ C34C
 349+ C34C              CHECK_KEYS:
 350+ C34C 3A 59 0B                 LD      A,(PICTURE+8)
 351+ C34F 0E 13                    LD      C,KEY_LEFT
 352+ C351 CB 77                    BIT     6,A ; LEFT
 353+ C353 CA C5 C3                 JP      z,KEY_PRESSED
 354+ C356 0E 04                    LD      C,KEY_RIGHT ; RIGHT
 355+ C358 CB 6F                    BIT     5,A
 356+ C35A CA C5 C3                 JP      z,KEY_PRESSED
 357+ C35D 0E 05                    LD      C,KEY_UP ; UP
 358+ C35F CB 4F                    BIT     1,A
 359+ C361 CA C5 C3                 JP      z,KEY_PRESSED
 360+ C364 0E 18                    LD      C,KEY_DOWN ; DOWN
 361+ C366 CB 57                    BIT     2,A
 362+ C368 CA C5 C3                 JP      z,KEY_PRESSED
 363+ C36B 3A 54 0B                 LD      A,(PICTURE+3)
 364+ C36E 0E 6F                    LD      C,KEY_O ; O
 365+ C370 CB 57                    BIT     2,A
 366+ C372 CA C5 C3                 JP      z,KEY_PRESSED
 367+ C375              ; A/Y up/dn
 368+ C375              ; É/: le/ri
 369+ C375 3A 55 0B                 LD      A,(PICTURE+4)
 370+ C378 0E 61                    LD      C,KEY_A ; A
 371+ C37A CB 77                    BIT     6,A
 372+ C37C CA C5 C3                 JP      z,KEY_PRESSED
 373+ C37F 0E 73                    LD      C,KEY_S
 374+ C381 CB 57                    BIT     2,A
 375+ C383 CA C5 C3                 JP      z,KEY_PRESSED
 376+ C386 3A 56 0B                 LD      A,(PICTURE+5)
 377+ C389 0E 91                    LD      C,$91 ; É
 378+ C38B CB 77                    BIT     6,A
 379+ C38D CA C5 C3                 JP      z,KEY_PRESSED
 380+ C390 0E 0D                    LD      C,$0D ; RET
 381+ C392 CB 67                    BIT     4,A
 382+ C394 CA C5 C3                 JP      z,KEY_PRESSED
 383+ C397 3A 57 0B                 LD      A,(PICTURE+6)
 384+ C39A 0E 79                    LD      C,KEY_Y ; Y
 385+ C39C CB 77                    BIT     6,A
 386+ C39E CA C5 C3                 JP      z,KEY_PRESSED
 387+ C3A1 0E 6E                    LD      C,KEY_N
 388+ C3A3 CB 67                    BIT     4,A
 389+ C3A5 CA C5 C3                 JP      z,KEY_PRESSED
 390+ C3A8 3A 58 0B                 LD      A,(PICTURE+7)
 391+ C3AB 0E 01                    LD      C,KEY_COLON ; : (colon)
 392+ C3AD CB 57                    BIT     2,A
 393+ C3AF CA C5 C3                 JP      z,KEY_PRESSED
 394+ C3B2 0E 1B                    LD      C,KEY_ESC ; ESC
 395+ C3B4 CB 5F                    BIT     3,A
 396+ C3B6 CA C5 C3                 JP      z,KEY_PRESSED
 397+ C3B9 0E 20                    LD      C,KEY_SPACE ; SPACE
 398+ C3BB CB 6F                    BIT     5,A
 399+ C3BD CA C5 C3                 JP      z,KEY_PRESSED
 400+ C3C0 AF                       XOR     A
 401+ C3C1 32 F7 1F                 LD      (PRESSED_KEY),A
 402+ C3C4 C9                       RET
 403+ C3C5
 404+ C3C5              KEY_PRESSED:
 405+ C3C5 3A F7 1F                 LD      A,(PRESSED_KEY)
 406+ C3C8 B9                       CP      C
 407+ C3C9 28 0E                    JR      z,OLD_KEY_PRESSED
 408+ C3CB AF                       XOR     A
 409+ C3CC 32 F9 1F                 LD      (KEY_REPEATED),A
 410+ C3CF 79                       LD      A,C
 411+ C3D0 32 F7 1F                 LD      (PRESSED_KEY),A
 412+ C3D3 3E 14                    LD      A,FIRST_KBD_COUNTER
 413+ C3D5 32 F8 1F                 LD      (PRESSED_KEY_COUNTER),A
 414+ C3D8 C9                       RET
 415+ C3D9              OLD_KEY_PRESSED:
 416+ C3D9 B7                       OR      A
 417+ C3DA 28 04                    JR      z,NO_KEY_PRESSED
 418+ C3DC 21 F8 1F                 LD      HL,PRESSED_KEY_COUNTER
 419+ C3DF 35                       DEC     (HL)
 420+ C3E0              NO_KEY_PRESSED:
 421+ C3E0 C9                       RET
 422+ C3E1
 423+ C3E1              GET_KEY:
 424+ C3E1 3A F7 1F                 LD      A,(PRESSED_KEY)
 425+ C3E4 4F                       LD      C,A
 426+ C3E5 B7                       OR      A
 427+ C3E6 28 0C                    JR      z,KEY_FOUND
 428+ C3E8 3A F8 1F                 LD      A,(PRESSED_KEY_COUNTER)
 429+ C3EB FE 14                    CP      FIRST_KBD_COUNTER
 430+ C3ED 28 05                    JR      z,KEY_FOUND
 431+ C3EF B7                       OR      A
 432+ C3F0 28 03                    JR      z,REPEAT_KEY
 433+ C3F2 0E 00                    LD      C,0
 434+ C3F4              KEY_FOUND:
 435+ C3F4 C9                       RET
 436+ C3F5
 437+ C3F5              REPEAT_KEY:
 438+ C3F5 3E 06                    LD      A,NEXT_KBD_COUNTER
 439+ C3F7 32 F8 1F                 LD      (PRESSED_KEY_COUNTER),A
 440+ C3FA C9                       RET
 441+ C3FB
 442+ C3FB
 443+ C3FB              FILL_PICTURE:
 444+ C3FB 06 09                    LD      B,9
 445+ C3FD 21 5A 0B                 LD      HL,PICTURE + 9
 446+ C400              SCAN_KBD_LOOP:
 447+ C400 3A 11 0B                 LD      A,(PORT03_SHADOW)
 448+ C403 E6 F0                    AND     $F0
 449+ C405 B0                       OR      B
 450+ C406 D3 03                    OUT     ($03),A
 451+ C408 DB 58                    IN      A,($58)
 452+ C40A 77                       LD      (HL),A
 453+ C40B 2B                       DEC     HL
 454+ C40C 05                       DEC     B
 455+ C40D F2 00 C4                 JP      p,SCAN_KBD_LOOP
 456+ C410 C9                       RET
 457+ C411
 458+ C411              UPDATE_SCREEN:
 459+ C411 CD 54 C2                 CALL    PRINT_CURRENT_LIST
 460+ C414 C3 F8 C8                 JP      WAIT_IN_INPUT
 461+ C417              PROCESS_UP:
 462+ C417 3A F2 1F                 LD      A,(SELECT_POS)
 463+ C41A B7                       OR      A
 464+ C41B 28 1A                    JR      z,ALREADY_FIRST_SELECTED
 465+ C41D 3D                       DEC     A
 466+ C41E 32 F2 1F                 LD      (SELECT_POS),A
 467+ C421 32 EE 1F                 LD      (MENU_FIRST_ROW),A
 468+ C424 3C                       INC     A
 469+ C425 32 EF 1F                 LD      (MENU_LAST_ROW),A
 470+ C428 CD 54 C2                 CALL    PRINT_CURRENT_LIST
 471+ C42B AF                       XOR     a
 472+ C42C 32 EE 1F                 LD      (MENU_FIRST_ROW),A
 473+ C42F 3E 0F                    LD      A,15
 474+ C431 32 EF 1F                 LD      (MENU_LAST_ROW),A
 475+ C434 C3 F8 C8                 JP      WAIT_IN_INPUT
 476+ C437
 477+ C437              ALREADY_FIRST_SELECTED:
 478+ C437 2A F0 1F                 LD      HL,(WINDOW_POS)
 479+ C43A 7C                       LD      A,H
 480+ C43B B5                       OR      L
 481+ C43C 28 14                    JR      z,NOTHING_TO_DO
 482+ C43E 2B                       DEC     HL
 483+ C43F 22 F0 1F                 LD      (WINDOW_POS),HL
 484+ C442 CD B7 C4                 CALL    MOVE_ONELINE_DOWN
 485+ C445 3E 01                    LD      a,1
 486+ C447 32 EF 1F                 LD      (MENU_LAST_ROW),A
 487+ C44A CD 54 C2                 CALL    PRINT_CURRENT_LIST
 488+ C44D 3E 0F                    LD      a,15
 489+ C44F 32 EF 1F                 LD      (MENU_LAST_ROW),A
 490+ C452              NOTHING_TO_DO:
 491+ C452 C3 F8 C8                 JP      WAIT_IN_INPUT
 492+ C455
 493+ C455              PROCESS_DOWN:
 494+ C455 AF                       XOR     A
 495+ C456 57                       LD      D,A
 496+ C457 3A F2 1F                 LD      A,(SELECT_POS)
 497+ C45A 5F                       LD      E,A
 498+ C45B 2A F0 1F                 LD      HL,(WINDOW_POS)
 499+ C45E 19                       ADD     HL,DE
 500+ C45F EB                       EX      DE,HL
 501+ C460 2A F3 1F                 LD      HL,(DIR_SIZE)
 502+ C463 7C                       LD      A,H
 503+ C464 B5                       OR      L
 504+ C465 28 EB                    JR      z,NOTHING_TO_DO ; no item in list
 505+ C467 2B                       DEC     HL ; last position
 506+ C468 ED 52                    SBC     HL,DE
 507+ C46A 28 E6                    JR      z,NOTHING_TO_DO ; SELECT_POS + WINDOW_POS is at last position
 508+ C46C 3A F2 1F                 LD      A,(SELECT_POS)
 509+ C46F FE 0F                    CP      15
 510+ C471 28 1A                    JR      z,MOVE_WINDOW
 511+ C473 3C                       INC     A
 512+ C474 32 F2 1F                 LD      (SELECT_POS),A
 513+ C477 32 EF 1F                 LD      (MENU_LAST_ROW),A
 514+ C47A 3D                       DEC     A
 515+ C47B 32 EE 1F                 LD      (MENU_FIRST_ROW),A
 516+ C47E CD 54 C2                 CALL    PRINT_CURRENT_LIST
 517+ C481 AF                       XOR     a
 518+ C482 32 EE 1F                 LD      (MENU_FIRST_ROW),A
 519+ C485 3E 0F                    LD      A,15
 520+ C487 32 EF 1F                 LD      (MENU_LAST_ROW),A
 521+ C48A C3 F8 C8                 JP      WAIT_IN_INPUT
 522+ C48D
 523+ C48D              MOVE_WINDOW:
 524+ C48D 2A F0 1F                 LD      HL,(WINDOW_POS)
 525+ C490 23                       INC     HL
 526+ C491 22 F0 1F                 LD      (WINDOW_POS),HL
 527+ C494
 528+ C494 CD A7 C4                 CALL    MOVE_ONELINE_UP
 529+ C497 3E 0E                    LD      a,14
 530+ C499 32 EE 1F                 LD      (MENU_FIRST_ROW),A
 531+ C49C CD 54 C2                 CALL    PRINT_CURRENT_LIST
 532+ C49F 3E 00                    LD      a,0
 533+ C4A1 32 EE 1F                 LD      (MENU_FIRST_ROW),A
 534+ C4A4 C3 F8 C8                 JP      WAIT_IN_INPUT
 535+ C4A7
 536+ C4A7              MOVE_ONELINE_UP:
 537+ C4A7 21 40 00                 LD      HL,64
 538+ C4AA 22 EC 1F                 LD      (INCREASE_LINE),HL
 539+ C4AD 21 81 8C                 LD      HL,$8000 + ((START_ROW - 1 + 4) * 640) + (START_COL)
 540+ C4B0 11 01 8A                 LD      DE,$8000 + ((START_ROW - 1 + 3) * 640) + (START_COL)
 541+ C4B3 06 8C                    LD      B,14*10
 542+ C4B5 18 0E                    JR      MOVE_LINES
 543+ C4B7
 544+ C4B7              MOVE_ONELINE_DOWN:
 545+ C4B7 21 C0 FF                 LD      HL,-64
 546+ C4BA 22 EC 1F                 LD      (INCREASE_LINE),HL
 547+ C4BD 21 41 AF                 LD      HL,$8000 + ((START_ROW - 1 + 17) * 640) + (START_COL) + 9*64
 548+ C4C0 11 C1 B1                 LD      DE,$8000 + ((START_ROW - 1 + 18) * 640) + (START_COL) + 9*64
 549+ C4C3 06 8C                    LD      B,14*10
 550+ C4C5              MOVE_LINES:
 551+ C4C5 3E D0                    LD      a,$D0 ; U0-U1-VID-EXT
 552+ C4C7 D3 02                    OUT     ($02),a
 553+ C4C9              MOVE_LINE_LOOP:
 554+ C4C9 C5                       PUSH    bc
 555+ C4CA D5                       PUSH    de
 556+ C4CB E5                       PUSH    hl
 557+ C4CC 01 12 00                 LD      bc,18
 558+ C4CF ED B0                    LDIR
 559+ C4D1 E1                       POP     hl
 560+ C4D2 ED 5B EC 1F              LD      de,(INCREASE_LINE)
 561+ C4D6 19                       ADD     hl,de
 562+ C4D7 D1                       POP     DE
 563+ C4D8 E5                       PUSH    hl
 564+ C4D9 EB                       EX      de,hl
 565+ C4DA ED 5B EC 1F              LD      de,(INCREASE_LINE)
 566+ C4DE 19                       ADD     hl,de
 567+ C4DF EB                       EX      de,hl
 568+ C4E0 E1                       POP     hl
 569+ C4E1 C1                       POP     bc
 570+ C4E2 10 E5                    DJNZ    MOVE_LINE_LOOP
 571+ C4E4 3A 03 00                 LD      a,(PORT02_SHADOW)
 572+ C4E7 D3 02                    OUT     ($02),A
 573+ C4E9 C9                       RET
 574+ C4EA
 575+ C4EA              PROCESS_PGUP:
 576+ C4EA 2A F0 1F                 LD      HL,(WINDOW_POS)
 577+ C4ED 7C                       LD      A,H
 578+ C4EE B5                       OR      L
 579+ C4EF 28 11                    JR      z,ALREADY_ON_TOP
 580+ C4F1 11 10 00                 LD      DE,16
 581+ C4F4 AF                       XOR     A
 582+ C4F5 ED 52                    SBC     HL,DE
 583+ C4F7 30 03                    JR      nc,NO_OVERFLOW_ON_PGUP
 584+ C4F9 21 00 00                 LD      HL,0
 585+ C4FC              NO_OVERFLOW_ON_PGUP:
 586+ C4FC 22 F0 1F                 LD      (WINDOW_POS),HL
 587+ C4FF C3 11 C4                 JP      UPDATE_SCREEN
 588+ C502              ALREADY_ON_TOP:
 589+ C502 32 F2 1F                 LD      (SELECT_POS),A
 590+ C505 C3 11 C4                 JP      UPDATE_SCREEN
 591+ C508
 592+ C508
 593+ C508
 594+ C508
 595+ C508              PROCESS_PGDN:
 596+ C508              ; dir_size = 0-16, fits in one page, last item must be selected
 597+ C508 2A F3 1F                 LD      HL,(DIR_SIZE)
 598+ C50B 11 11 00                 LD      DE,17
 599+ C50E AF                       XOR     A
 600+ C50F ED 52                    SBC     HL,DE
 601+ C511 DA BA C5                 JP      c,SELECT_ONE_PAGE_LAST_ITEM
 602+ C514
 603+ C514              ; current window_pos is+16 > dir_size, we are on the last page
 604+ C514 2A F0 1F                 LD      HL,(WINDOW_POS)
 605+ C517 11 10 00                 LD      DE,16
 606+ C51A 19                       ADD     HL,DE
 607+ C51B EB                       EX      DE,HL
 608+ C51C 2A F3 1F                 LD      HL,(DIR_SIZE)
 609+ C51F AF                       XOR     A
 610+ C520 ED 52                    SBC     HL,DE
 611+ C522 CA C7 C5                 JP      z,SELECT_LAST_ITEM
 612+ C525
 613+ C525              ; current window_pos is < dir_size - 32, we cannot fully pgdn,
 614+ C525              ; let's show the last page fully
 615+ C525 2A F0 1F                 LD      HL,(WINDOW_POS)
 616+ C528 11 20 00                 LD      DE,32
 617+ C52B 19                       ADD     HL,DE
 618+ C52C EB                       EX      DE,HL
 619+ C52D 2A F3 1F                 LD      HL,(DIR_SIZE)
 620+ C530 AF                       XOR     A
 621+ C531 ED 52                    SBC     HL,DE
 622+ C533 DA CF C5                 JP      c,PGDN_TO_LAST_PAGE
 623+ C536
 624+ C536              ; we can safely page down one full page
 625+ C536 2A F0 1F                 LD      hl,(WINDOW_POS)
 626+ C539 11 10 00                 LD      de,16
 627+ C53C 19                       ADD     hl,de
 628+ C53D 22 F0 1F                 LD      (WINDOW_POS),HL
 629+ C540 C3 11 C4                 JP      UPDATE_SCREEN
 630+ C543
 631+ C543              PROCESS_RETURN:
 632+ C543 2A F0 1F                 LD      HL,(WINDOW_POS)
 633+ C546 16 00                    LD      D,0
 634+ C548 3A F2 1F                 LD      A,(SELECT_POS)
 635+ C54B 5F                       LD      E,A
 636+ C54C 19                       ADD     HL,DE
 637+ C54D CB 25                    SLA     L
 638+ C54F CB 14                    RL      H
 639+ C551 11 00 21                 LD      DE,DIR_ENTRY_POIS
 640+ C554 19                       ADD     HL,DE
 641+ C555 5E                       LD      E,(HL)
 642+ C556 23                       INC     HL
 643+ C557 56                       LD      D,(HL)
 644+ C558 EB                       EX      DE,HL
 645+ C559 E5                       PUSH    HL
 646+ C55A 11 0C 00                 LD      DE,12
 647+ C55D 19                       ADD     HL,DE
 648+ C55E 7E                       LD      A,(HL) ; type of entry
 649+ C55F E1                       POP     HL ; HL: addr of entry
 650+ C560 B7                       OR      A
 651+ C561 20 32                    JR      nz,FILE_SELECTED
 652+ C563 E5                       PUSH    HL
 653+ C564 11 0C 00                 LD      DE,12 ; let's start at the entry type..
 654+ C567 19                       ADD     HL,DE
 655+ C568 3E 20                    LD      A," "
 656+ C56A 0E 0D                    LD      C,13
 657+ C56C              TRUNCATE_FILE_LOOP:
 658+ C56C 2B                       DEC     HL
 659+ C56D 0D                       DEC     C
 660+ C56E 28 21                    JR      z,WHAT_THE_HECK
 661+ C570 BE                       CP      (HL)
 662+ C571 28 F9                    JR      z,TRUNCATE_FILE_LOOP
 663+ C573 AF                       XOR     A
 664+ C574 47                       LD      B,A
 665+ C575 E1                       POP     HL
 666+ C576 11 40 20                 LD      DE,DIR_INPUT
 667+ C579 ED B0                    LDIR
 668+ C57B 12                       LD      (DE),A
 669+ C57C 11 40 20                 LD      DE,DIR_INPUT
 670+ C57F F7                       RST     $30
 671+ C580 59                       DB      F_CHDIR + $50
 672+ C581 CD 1A C3                 CALL    CLEAR_TABLE
 673+ C584 21 00 00                 LD      hl,0
 674+ C587 22 F0 1F                 LD      (WINDOW_POS),HL
 675+ C58A AF                       XOR     a
 676+ C58B 32 F2 1F                 LD      (SELECT_POS),A
 677+ C58E              ;            LD      (SORT_OF_VISIBLE_LIST),A
 678+ C58E C3 75 C8                 JP      MENU_LOOP
 679+ C591
 680+ C591
 681+ C591              WHAT_THE_HECK:
 682+ C591 E1                       POP     HL ; do nothing...
 683+ C592 C3 75 C8                 JP      MENU_LOOP
 684+ C595
 685+ C595              FILE_SELECTED:
 686+ C595 E5                       PUSH    HL
 687+ C596 01 07 00                 LD      bc,LOAD_STR_END - LOAD_STR
 688+ C599 21 66 CC                 LD      hl,LOAD_STR
 689+ C59C 11 00 1F                 LD      DE,AUTOLOAD_STR_BUFFER
 690+ C59F ED B0                    LDIR
 691+ C5A1 E1                       POP     HL
 692+ C5A2 01 0C 00                 LD      bc,12
 693+ C5A5 ED B0                    LDIR
 694+ C5A7              FIND_FNAME_END_LOOP:
 695+ C5A7 1B                       DEC     DE
 696+ C5A8 1A                       LD      a,(DE)
 697+ C5A9 FE 20                    CP      $20
 698+ C5AB 28 FA                    JR      z,FIND_FNAME_END_LOOP
 699+ C5AD 13                       INC     DE
 700+ C5AE 3E 22                    LD      a,$22 ; "
 701+ C5B0 12                       LD      (DE),A
 702+ C5B1 13                       INC     DE
 703+ C5B2 3E 0D                    LD      a,$0D
 704+ C5B4 12                       LD      (DE),A
 705+ C5B5
 706+ C5B5 AF                       XOR     A
 707+ C5B6 32 FB 1F                 LD      (KEY_PRESS_IDX),A
 708+ C5B9
 709+ C5B9 C9                       RET
 710+ C5BA
 711+ C5BA
 712+ C5BA              SELECT_ONE_PAGE_LAST_ITEM:
 713+ C5BA 3A F3 1F                 LD      A,(DIR_SIZE)
 714+ C5BD 3D                       DEC     A
 715+ C5BE FA 52 C4                 JP      M,NOTHING_TO_DO ; DIR_SIZE is 0
 716+ C5C1 32 F2 1F                 LD      (SELECT_POS),A
 717+ C5C4 C3 11 C4                 JP      UPDATE_SCREEN
 718+ C5C7
 719+ C5C7              SELECT_LAST_ITEM:
 720+ C5C7 3E 0F                    LD      a,15
 721+ C5C9 32 F2 1F                 LD      (SELECT_POS),A
 722+ C5CC C3 11 C4                 JP      UPDATE_SCREEN
 723+ C5CF
 724+ C5CF              PGDN_TO_LAST_PAGE:
 725+ C5CF 2A F3 1F                 LD      HL,(DIR_SIZE)
 726+ C5D2 11 10 00                 LD      DE,16
 727+ C5D5 AF                       XOR     A
 728+ C5D6 ED 52                    SBC     HL,DE
 729+ C5D8 22 F0 1F                 LD      (WINDOW_POS),HL
 730+ C5DB C3 11 C4                 JP      UPDATE_SCREEN
 731+ C5DE
 732+ C5DE              PROCESS_SPACE:
 733+ C5DE 01 04 3C                 LD      bc,(MENU_ON_BOOT_TXT_COL+20)*256 + MENU_ON_BOOT_TXT_ROW
 734+ C5E1 F7                       RST     $30
 735+ C5E2 23                       DB      F_EDCPOS
 736+ C5E3 21 FF 1F                 LD      HL,SHOW_MENU_ON_BOOT
 737+ C5E6 3E 01                    LD      a,1
 738+ C5E8 96                       SUB     (hl)
 739+ C5E9 77                       LD      (HL),A
 740+ C5EA F5                       PUSH    AF
 741+ C5EB 5F                       LD      E,A ; boot value
 742+ C5EC 0E 00                    LD      c,PARAM_MENUONBOOT ; param boot
 743+ C5EE F7                       RST     $30
 744+ C5EF 5D                       DB      F_SETPARAM
 745+ C5F0 F1                       POP     AF
 746+ C5F1 B7                       OR      A
 747+ C5F2 28 05                    JR      z,PRINT_NEXT_BOOT_NO
 748+ C5F4 21 65 CC                 LD      HL,MENU_ON_BOOT_YES_STR
 749+ C5F7 18 03                    JR      PRINT_NEXT_BOOT_VALUE
 750+ C5F9              PRINT_NEXT_BOOT_NO:
 751+ C5F9 21 65 CC                 LD      HL,MENU_ON_BOOT_NO_STR
 752+ C5FC              PRINT_NEXT_BOOT_VALUE:
 753+ C5FC CD 9F D8                 CALL    INIT_PRINT_STRING
 754+ C5FF 7E                       LD      A,(HL)
 755+ C600 C3 F8 C8                 JP      WAIT_IN_INPUT
 756+ C603
 757+ C603              PROCESS_ORIGINAL_ORDER:
 758+ C603 3A FE 1F                 LD      A,(SORT_ORDER)
 759+ C606 B7                       OR      A
 760+ C607 CA 96 C8                 JP      z,INPUT_LOOP
 761+ C60A 0E 01                    LD      C,PARAM_SORTORDER ; let's store the sort order (no sort)
 762+ C60C 1E 00                    LD      E,0 ; no sort
 763+ C60E F7                       RST     $30
 764+ C60F 5D                       DB      F_SETPARAM
 765+ C610 01 00 00                 LD      BC,0
 766+ C613 11 00 30                 LD      DE,DIR_DATA
 767+ C616 21 00 21                 LD      HL,DIR_ENTRY_POIS
 768+ C619              ORIG_ORDER_LOOP:
 769+ C619 3A F3 1F                 LD      A,(DIR_SIZE)
 770+ C61C B9                       CP      C
 771+ C61D 20 1F                    JR      nz,GO_ON_WITH_FILL
 772+ C61F 3A F4 1F                 LD      A,(DIR_SIZE+1)
 773+ C622 B8                       CP      B
 774+ C623 20 19                    JR      nz,GO_ON_WITH_FILL
 775+ C625 21 00 00                 LD      HL,0
 776+ C628 22 F0 1F                 LD      (WINDOW_POS),HL
 777+ C62B AF                       XOR     A
 778+ C62C 32 F2 1F                 LD      (SELECT_POS),A
 779+ C62F 32 E3 1F                 LD      (SORT_OF_VISIBLE_LIST),A
 780+ C632 32 FE 1F                 LD      (SORT_ORDER),A
 781+ C635 CD 54 C2                 CALL    PRINT_CURRENT_LIST
 782+ C638 CD 61 C7                 CALL    SETUP_SORT_SIGN
 783+ C63B C3 96 C8                 JP      INPUT_LOOP
 784+ C63E
 785+ C63E              GO_ON_WITH_FILL:
 786+ C63E 73                       LD      (HL),E
 787+ C63F 23                       INC     HL
 788+ C640 72                       LD      (HL),D
 789+ C641 23                       INC     HL
 790+ C642 E5                       PUSH    HL
 791+ C643 EB                       EX      DE,HL
 792+ C644 11 11 00                 LD      DE,DIR_ENTRY_LEN
 793+ C647 19                       ADD     HL,DE
 794+ C648 EB                       EX      DE,HL
 795+ C649 E1                       POP     HL
 796+ C64A 03                       INC     BC
 797+ C64B 18 CC                    JR      ORIG_ORDER_LOOP
 798+ C64D
 799+ C64D              SEPARATE_FILES_AND_DIRECTORIES:
 800+ C64D 21 00 21                 LD      HL,DIR_ENTRY_POIS
 801+ C650 01 00 00                 LD      BC,0
 802+ C653              ; let's find first non-dir entry
 803+ C653 22 E8 1F                 LD      (VAR_FIRST_DIR_POI),HL
 804+ C656              SEPARATE_LOOP:
 805+ C656 EB                       EX      de,hl
 806+ C657 2A F3 1F                 LD      HL,(DIR_SIZE)
 807+ C65A AF                       XOR     A
 808+ C65B ED 42                    SBC     HL,BC
 809+ C65D EB                       EX      de,hl
 810+ C65E 28 15                    JR      z,END_OF_SEPARATELIST_REACHED
 811+ C660
 812+ C660 5E                       LD      E,(HL)
 813+ C661 23                       INC     HL
 814+ C662 56                       LD      D,(HL)
 815+ C663 2B                       DEC     HL
 816+ C664 E5                       PUSH    HL
 817+ C665 EB                       EX      DE,HL
 818+ C666 11 0C 00                 LD      DE,12
 819+ C669 19                       ADD     HL,DE
 820+ C66A 7E                       LD      A,(HL)
 821+ C66B E1                       POP     HL
 822+ C66C B7                       OR      A
 823+ C66D 20 06                    JR      nz,FILE_FOUND
 824+ C66F 03                       INC     BC
 825+ C670 23                       INC     HL
 826+ C671 23                       INC     HL
 827+ C672 C3 56 C6                 JP      SEPARATE_LOOP
 828+ C675              END_OF_SEPARATELIST_REACHED:
 829+ C675              FILE_FOUND:
 830+ C675 22 EA 1F                 LD      (VAR_FIRST_FILE_POI),HL
 831+ C678 C8                       RET     z
 832+ C679              DIR_FILE_EXCHANGE_LOOP:
 833+ C679 E5                       PUSH    hl
 834+ C67A 5E                       LD      e,(hl)
 835+ C67B 23                       INC     hl
 836+ C67C 56                       LD      d,(hl)
 837+ C67D EB                       EX      de,hl
 838+ C67E 11 0C 00                 LD      de,12
 839+ C681 19                       ADD     hl,de
 840+ C682 7E                       LD      a,(hl)
 841+ C683 E1                       POP     hl
 842+ C684 B7                       OR      A
 843+ C685 20 1B                    JR      nz,CHECK_NEXT_ENTRY
 844+ C687 C5                       PUSH    bc
 845+ C688 E5                       PUSH    hl ; s1 act poi
 846+ C689 5E                       LD      e,(hl)
 847+ C68A 23                       INC     hl
 848+ C68B 56                       LD      d,(hl)
 849+ C68C 2A EA 1F                 LD      hl,(VAR_FIRST_FILE_POI)
 850+ C68F E5                       PUSH    hl ; s2 first file poi
 851+ C690 4E                       LD      c,(hl)
 852+ C691 23                       INC     hl
 853+ C692 46                       LD      b,(hl)
 854+ C693 E1                       POP     hl ; first file po
 855+ C694 73                       LD      (hl),e
 856+ C695 23                       INC     hl
 857+ C696 72                       LD      (hl),d
 858+ C697 23                       INC     hl ; ffp + 1
 859+ C698 22 EA 1F                 LD      (VAR_FIRST_FILE_POI),HL
 860+ C69B E1                       POP     hl ; s1 act poi
 861+ C69C E5                       PUSH    hl
 862+ C69D 71                       LD      (hl),c
 863+ C69E 23                       INC     hl
 864+ C69F 70                       LD      (hl),b
 865+ C6A0 E1                       POP     hl
 866+ C6A1 C1                       POP     bc
 867+ C6A2              CHECK_NEXT_ENTRY:
 868+ C6A2 23                       INC     hl
 869+ C6A3 23                       INC     hl
 870+ C6A4 03                       INC     bc
 871+ C6A5 E5                       PUSH    HL
 872+ C6A6 2A F3 1F                 LD      HL,(DIR_SIZE)
 873+ C6A9 AF                       XOR     a
 874+ C6AA ED 42                    SBC     HL,BC
 875+ C6AC E1                       POP     HL
 876+ C6AD 20 CA                    JR      nz,DIR_FILE_EXCHANGE_LOOP
 877+ C6AF C9                       RET
 878+ C6B0
 879+ C6B0              PROCESS_SORT_BY_NAME:
 880+ C6B0 3A E3 1F                 LD      a,(SORT_OF_VISIBLE_LIST)
 881+ C6B3 FE 01                    CP      1
 882+ C6B5 CA 96 C8                 JP      z,INPUT_LOOP
 883+ C6B8 21 6D CC                 LD      hl,SORTING_BY_NAME_STR
 884+ C6BB CD A7 CA                 CALL    PRINT_STATUS_MSG
 885+ C6BE 3A E3 1F                 LD      a,(SORT_OF_VISIBLE_LIST)
 886+ C6C1 FE 02                    CP      2
 887+ C6C3 28 0F                    JR      z,SKIP_SEPARATE_IN_BY_NAME
 888+ C6C5 CD 4D C6                 CALL    SEPARATE_FILES_AND_DIRECTORIES
 889+ C6C8 2A E8 1F                 LD      HL,(VAR_FIRST_DIR_POI)
 890+ C6CB ED 5B EA 1F              LD      DE,(VAR_FIRST_FILE_POI)
 891+ C6CF 1B                       DEC     DE
 892+ C6D0 1B                       DEC     DE
 893+ C6D1 CD DE C7                 CALL    SORT_RANGE_BY_NAME
 894+ C6D4              SKIP_SEPARATE_IN_BY_NAME:
 895+ C6D4 ED 5B F3 1F              LD      DE,(DIR_SIZE)
 896+ C6D8 1B                       DEC     DE
 897+ C6D9 CB 23                    SLA     E
 898+ C6DB CB 12                    RL      D
 899+ C6DD 21 00 21                 LD      HL,DIR_ENTRY_POIS
 900+ C6E0 19                       ADD     HL,DE
 901+ C6E1 EB                       EX      DE,HL
 902+ C6E2 2A EA 1F                 LD      HL,(VAR_FIRST_FILE_POI)
 903+ C6E5 CD DE C7                 CALL    SORT_RANGE_BY_NAME
 904+ C6E8 3E 01                    LD      A,1
 905+ C6EA 32 E3 1F                 LD      (SORT_OF_VISIBLE_LIST),A
 906+ C6ED 21 FE 1F                 LD      HL,SORT_ORDER
 907+ C6F0 BE                       CP      (HL)
 908+ C6F1 28 09                    JR      z,PARAM_SAVED_AFTER_SORT
 909+ C6F3 77                       LD      (HL),A
 910+ C6F4 0E 01                    LD      C,PARAM_SORTORDER ; let's store the sort order
 911+ C6F6 5F                       LD      E,A ; value -> by name
 912+ C6F7 F7                       RST     $30
 913+ C6F8 5D                       DB      F_SETPARAM
 914+ C6F9 CD 61 C7                 CALL    SETUP_SORT_SIGN
 915+ C6FC              PARAM_SAVED_AFTER_SORT:
 916+ C6FC 21 00 00                 LD      HL,0
 917+ C6FF 22 F0 1F                 LD      (WINDOW_POS),HL
 918+ C702 AF                       XOR     A
 919+ C703 32 F2 1F                 LD      (SELECT_POS),A
 920+ C706 CD 54 C2                 CALL    PRINT_CURRENT_LIST
 921+ C709 CD BF CA                 CALL    REVERT_STATUS_MSG
 922+ C70C C3 96 C8                 JP      INPUT_LOOP
 923+ C70F
 924+ C70F              PROCESS_SORT_BY_SIZE:
 925+ C70F 3A E3 1F                 LD      A,(SORT_OF_VISIBLE_LIST)
 926+ C712 FE 02                    CP      2
 927+ C714 CA 96 C8                 JP      z,INPUT_LOOP
 928+ C717 21 6D CC                 LD      hl,SORTING_BY_SIZE_STR
 929+ C71A CD A7 CA                 CALL    PRINT_STATUS_MSG
 930+ C71D 3A E3 1F                 LD      A,(SORT_OF_VISIBLE_LIST)
 931+ C720 FE 01                    CP      1
 932+ C722 28 0F                    JR      z,SKIP_SEPARATE_IN_BY_SIZE
 933+ C724 CD 4D C6                 CALL    SEPARATE_FILES_AND_DIRECTORIES
 934+ C727 2A E8 1F                 LD      HL,(VAR_FIRST_DIR_POI)
 935+ C72A ED 5B EA 1F              LD      DE,(VAR_FIRST_FILE_POI)
 936+ C72E 1B                       DEC     DE
 937+ C72F 1B                       DEC     DE
 938+ C730 CD DE C7                 CALL    SORT_RANGE_BY_NAME
 939+ C733              SKIP_SEPARATE_IN_BY_SIZE:
 940+ C733 2A E8 1F                 LD      HL,(VAR_FIRST_DIR_POI)
 941+ C736 ED 5B F3 1F              LD      DE,(DIR_SIZE)
 942+ C73A 1B                       DEC     de
 943+ C73B CB 23                    SLA     E
 944+ C73D CB 12                    RL      D
 945+ C73F 21 00 21                 LD      HL,DIR_ENTRY_POIS
 946+ C742 19                       ADD     HL,DE
 947+ C743 EB                       EX      DE,HL
 948+ C744 2A EA 1F                 LD      HL,(VAR_FIRST_FILE_POI)
 949+ C747 CD 12 C8                 CALL    SORT_RANGE_BY_SIZE
 950+ C74A
 951+ C74A 3E 02                    LD      A,2
 952+ C74C 32 E3 1F                 LD      (SORT_OF_VISIBLE_LIST),A
 953+ C74F 21 FE 1F                 LD      HL,SORT_ORDER
 954+ C752 BE                       CP      (HL)
 955+ C753 28 A7                    JR      z,PARAM_SAVED_AFTER_SORT
 956+ C755 77                       LD      (HL),A
 957+ C756 0E 01                    LD      C,PARAM_SORTORDER ; let's store the sort order
 958+ C758 5F                       LD      E,A ; value -> by size
 959+ C759 F7                       RST     $30
 960+ C75A 5D                       DB      F_SETPARAM
 961+ C75B CD 61 C7                 CALL    SETUP_SORT_SIGN
 962+ C75E
 963+ C75E C3 FC C6                 JP      PARAM_SAVED_AFTER_SORT
 964+ C761
 965+ C761              SETUP_SORT_SIGN:
 966+ C761 01 03 05                 LD      bc,0100h * (START_COL + 4) + (START_ROW + 1)
 967+ C764 F7                       RST     $30
 968+ C765 23                       DB      F_EDCPOS
 969+ C766 3A FE 1F                 LD      A,(SORT_ORDER)
 970+ C769 0E 20                    LD      C,$20
 971+ C76B FE 01                    CP      1
 972+ C76D 20 02                    JR      nz,PRINT_NAME_SORT_SIGN
 973+ C76F 0E 5E                    LD      C,$5E
 974+ C771              PRINT_NAME_SORT_SIGN:
 975+ C771 CD E8 D8                 CALL    INIT_PRINT_CHAR
 976+ C774
 977+ C774 01 03 0F                 LD      BC,0100h * (START_COL + 14) + (START_ROW + 1)
 978+ C777 F7                       RST     $30
 979+ C778 23                       DB      F_EDCPOS
 980+ C779 3A FE 1F                 LD      A,(SORT_ORDER)
 981+ C77C 0E 20                    LD      C,$20
 982+ C77E FE 02                    CP      2
 983+ C780 20 02                    JR      nz,PRINT_SIZE_SORT_SIGN
 984+ C782 0E 5E                    LD      C,$5E
 985+ C784              PRINT_SIZE_SORT_SIGN:
 986+ C784 CD E8 D8                 CALL    INIT_PRINT_CHAR
 987+ C787 C9                       RET
 988+ C788
 989+ C788              COMP_BY_NAME:
 990+ C788 E5                       PUSH    hl
 991+ C789 D5                       PUSH    de
 992+ C78A 4E                       LD      c,(hl)
 993+ C78B 23                       INC     hl
 994+ C78C 46                       LD      b,(hl)
 995+ C78D C5                       PUSH    bc
 996+ C78E EB                       EX      de,hl
 997+ C78F 4E                       LD      c,(hl)
 998+ C790 23                       INC     hl
 999+ C791 46                       LD      b,(hl)
1000+ C792 C5                       PUSH    bc
1001+ C793 D1                       POP     de
1002+ C794 E1                       POP     hl
1003+ C795 06 0C                    LD      b,12
1004+ C797              COMP_NAME_LOOP:
1005+ C797 1A                       LD      a,(de)
1006+ C798 BE                       CP      (hl)
1007+ C799 20 04                    JR      nz,EXIT_COMP_NAME_LOOP
1008+ C79B 23                       INC     hl
1009+ C79C 13                       INC     de
1010+ C79D 10 F8                    DJNZ    COMP_NAME_LOOP
1011+ C79F              EXIT_COMP_NAME_LOOP:
1012+ C79F D1                       POP     de
1013+ C7A0 E1                       POP     hl
1014+ C7A1 C9                       RET
1015+ C7A2
1016+ C7A2              COMP_BY_SIZE:
1017+ C7A2 E5                       PUSH    hl
1018+ C7A3 D5                       PUSH    de
1019+ C7A4 4E                       LD      c,(hl)
1020+ C7A5 23                       INC     hl
1021+ C7A6 46                       LD      b,(hl)
1022+ C7A7 21 10 00                 LD      hl,16
1023+ C7AA 09                       ADD     hl,bc
1024+ C7AB E5                       PUSH    hl
1025+ C7AC EB                       EX      de,hl
1026+ C7AD 4E                       LD      c,(hl)
1027+ C7AE 23                       INC     hl
1028+ C7AF 46                       LD      b,(hl)
1029+ C7B0 21 10 00                 LD      hl,16
1030+ C7B3 09                       ADD     hl,bc
1031+ C7B4 E5                       PUSH    hl
1032+ C7B5 D1                       POP     de
1033+ C7B6 E1                       POP     hl
1034+ C7B7 06 04                    LD      b,4
1035+ C7B9              COMP_SIZE_LOOP:
1036+ C7B9 1A                       LD      a,(de)
1037+ C7BA BE                       CP      (hl)
1038+ C7BB 20 04                    JR      nz,EXIT_COMP_SIZE_LOOP
1039+ C7BD 2B                       DEC     hl
1040+ C7BE 1B                       DEC     de
1041+ C7BF 10 F8                    DJNZ    COMP_SIZE_LOOP
1042+ C7C1              EXIT_COMP_SIZE_LOOP:
1043+ C7C1 D1                       POP     de
1044+ C7C2 E1                       POP     hl
1045+ C7C3 CC 88 C7                 CALL    z,COMP_BY_NAME
1046+ C7C6 C9                       RET
1047+ C7C7
1048+ C7C7              SWITCH_DE_HL_POINTED_POIS:
1049+ C7C7 4E                       LD      c,(hl)
1050+ C7C8 23                       INC     hl
1051+ C7C9 46                       LD      b,(hl)
1052+ C7CA 2B                       DEC     hl
1053+ C7CB C5                       PUSH    bc
1054+ C7CC EB                       EX      de,hl
1055+ C7CD 4E                       LD      c,(hl)
1056+ C7CE 23                       INC     hl
1057+ C7CF 46                       LD      b,(hl)
1058+ C7D0 2B                       DEC     hl
1059+ C7D1 EB                       EX      de,hl
1060+ C7D2 71                       LD      (hl),c
1061+ C7D3 23                       INC     hl
1062+ C7D4 70                       LD      (hl),b
1063+ C7D5 2B                       DEC     hl
1064+ C7D6 C1                       POP     bc
1065+ C7D7 EB                       EX      de,hl
1066+ C7D8 71                       LD      (hl),c
1067+ C7D9 23                       INC     hl
1068+ C7DA 70                       LD      (hl),b
1069+ C7DB 2B                       DEC     hl
1070+ C7DC EB                       EX      de,hl
1071+ C7DD C9                       RET
1072+ C7DE
1073+ C7DE              SORT_RANGE_BY_NAME:
1074+ C7DE 22 E4 1F                 LD      (VAR_SORT_START_POI),HL
1075+ C7E1 ED 53 E4 1F              LD      (VAR_SORT_END_POI),DE
1076+ C7E5 AF                       XOR     a
1077+ C7E6 EB                       EX      de,hl
1078+ C7E7 ED 52                    SBC     hl,de
1079+ C7E9 C8                       RET     z ; 1 element in range
1080+ C7EA D8                       RET     c ; 0 element in range
1081+ C7EB EB                       EX      de,hl
1082+ C7EC ED 5B E4 1F              LD      DE,(VAR_SORT_END_POI)
1083+ C7F0              RANGE_BY_NAME_OUTER_LOOP:
1084+ C7F0 54                       LD      d,h
1085+ C7F1 5D                       LD      e,l
1086+ C7F2              RANGE_BY_NAME_INNER_LOOP:
1087+ C7F2 E5                       PUSH    hl
1088+ C7F3 13                       INC     de
1089+ C7F4 13                       INC     de
1090+ C7F5 CD 88 C7                 CALL    COMP_BY_NAME
1091+ C7F8 DC C7 C7                 CALL    c,SWITCH_DE_HL_POINTED_POIS
1092+ C7FB 2A E4 1F                 LD      hl,(VAR_SORT_END_POI)
1093+ C7FE AF                       XOR     a
1094+ C7FF ED 52                    SBC     hl,de
1095+ C801 E1                       POP     hl
1096+ C802 20 EE                    JR      nz,RANGE_BY_NAME_INNER_LOOP
1097+ C804 23                       INC     hl
1098+ C805 23                       INC     hl
1099+ C806 ED 5B E4 1F              LD      de,(VAR_SORT_END_POI)
1100+ C80A EB                       EX      de,hl
1101+ C80B AF                       XOR     a
1102+ C80C ED 52                    SBC     hl,de
1103+ C80E EB                       EX      de,hl
1104+ C80F 20 DF                    JR      nz,RANGE_BY_NAME_OUTER_LOOP
1105+ C811 C9                       RET
1106+ C812
1107+ C812              SORT_RANGE_BY_SIZE:
1108+ C812 22 E4 1F                 LD      (VAR_SORT_START_POI),HL
1109+ C815 ED 53 E4 1F              LD      (VAR_SORT_END_POI),DE
1110+ C819 EB                       EX      de,hl
1111+ C81A AF                       XOR     a
1112+ C81B ED 52                    SBC     hl,de
1113+ C81D C8                       RET     z ; 1 element in range
1114+ C81E D8                       RET     c ; 0 element in range
1115+ C81F EB                       EX      de,hl
1116+ C820 ED 5B E4 1F              LD      DE,(VAR_SORT_END_POI)
1117+ C824              RANGE_BY_SIZE_OUTER_LOOP:
1118+ C824 54                       LD      d,h
1119+ C825 5D                       LD      e,l
1120+ C826              RANGE_BY_SIZE_INNER_LOOP:
1121+ C826 E5                       PUSH    hl
1122+ C827 13                       INC     de
1123+ C828 13                       INC     de
1124+ C829 CD A2 C7                 CALL    COMP_BY_SIZE
1125+ C82C DC C7 C7                 CALL    c,SWITCH_DE_HL_POINTED_POIS
1126+ C82F 2A E4 1F                 LD      hl,(VAR_SORT_END_POI)
1127+ C832 AF                       XOR     a
1128+ C833 ED 52                    SBC     hl,de
1129+ C835 E1                       POP     hl
1130+ C836 20 EE                    JR      nz,RANGE_BY_SIZE_INNER_LOOP
1131+ C838 23                       INC     hl
1132+ C839 23                       INC     hl
1133+ C83A ED 5B E4 1F              LD      de,(VAR_SORT_END_POI)
1134+ C83E EB                       EX      de,hl
1135+ C83F AF                       XOR     a
1136+ C840 ED 52                    SBC     hl,de
1137+ C842 EB                       EX      de,hl
1138+ C843 20 DF                    JR      nz,RANGE_BY_SIZE_OUTER_LOOP
1139+ C845 C9                       RET
1140+ C846
1141+ C846              SORT_IF_NEEDED:
1142+ C846 C9                       RET
1143+ C847
1144+ C847              CHECK_SD:
1145+ C847 2A E1 1F                 LD      HL,(CHECK_SD_COUNTER)
1146+ C84A 2B                       DEC     HL
1147+ C84B 22 E1 1F                 LD      (CHECK_SD_COUNTER),HL
1148+ C84E 7D                       LD      A,L
1149+ C84F B4                       OR      H
1150+ C850 C0                       RET     nz
1151+ C851 21 2C 01                 LD      HL,CHECK_SD_CNT_VAL
1152+ C854 22 E1 1F                 LD      (CHECK_SD_COUNTER),HL
1153+ C857 0E 02                    LD      C,PARAM_SDAVAILABLE
1154+ C859 F7                       RST     $30
1155+ C85A DD                       DB      F_GETPARAM
1156+ C85B B7                       OR      A
1157+ C85C C0                       RET     nz ; param not available -> nano is not available, let's try after a few secs again
1158+ C85D 21 E0 1F                 LD      HL,LAST_KNOWN_SD_STATE
1159+ C860 7B                       LD      A,E
1160+ C861 BE                       CP      (HL)
1161+ C862 C8                       RET     z ; no change
1162+ C863 77                       LD      (HL),A
1163+ C864 21 00 00                 LD      hl,0 ; let!s reset the seelction line (on every SD avail change..,never mind)
1164+ C867 7D                       LD      a,l
1165+ C868 22 F0 1F                 LD      (WINDOW_POS),HL
1166+ C86B 32 F2 1F                 LD      (SELECT_POS),A
1167+ C86E 22 F3 1F                 LD      (DIR_SIZE),HL
1168+ C871 E1                       POP     HL ; let's drop the CALL (Ugliest solution ever!!)
1169+ C872 CD 1A C3                 CALL    CLEAR_TABLE
1170+ C875              ;            JR      MENU_LOOP ; reread everyting..
1171+ C875
1172+ C875              MENU_LOOP:
1173+ C875 CD 57 C9                 CALL    LOAD_PWD
1174+ C878              ;            CALL    FILL_PWD_WITH_TEST_DATA
1175+ C878 3A 3F 20                 LD      A,(PATH_INPUT+$3F)
1176+ C87B B7                       OR      A
1177+ C87C F5                       PUSH    AF
1178+ C87D C4 C6 C1                 CALL    nz,LOAD_DIR ;   skip dir load on no path/no SD
1179+ C880 CD 81 C9                 CALL    PRINT_PATH_FIELD
1180+ C883 F1                       POP     AF
1181+ C884 28 10                    JR      z,INPUT_LOOP ; let's not sort on no SD available
1182+ C886 3A FE 1F                 LD      A,(SORT_ORDER)
1183+ C889 FE 01                    CP      1
1184+ C88B CA B0 C6                 JP      z,PROCESS_SORT_BY_NAME
1185+ C88E FE 02                    CP      2
1186+ C890 CA 0F C7                 JP      z,PROCESS_SORT_BY_SIZE
1187+ C893
1188+ C893              ;            CALL    FILL_DIR_WITH_TEST_DATA
1189+ C893 CD 54 C2                 CALL    PRINT_CURRENT_LIST
1190+ C896
1191+ C896              INPUT_LOOP:
1192+ C896 CD 47 C8                 CALL    CHECK_SD
1193+ C899 CD FB C3                 CALL    FILL_PICTURE
1194+ C89C CD 4C C3                 CALL    CHECK_KEYS
1195+ C89F CD E1 C3                 CALL    GET_KEY
1196+ C8A2
1197+ C8A2 AF                       XOR     a
1198+ C8A3 B9                       CP      C
1199+ C8A4 28 52                    JR      z,WAIT_IN_INPUT
1200+ C8A6 3E 1B                    LD      A,KEY_ESC
1201+ C8A8 B9                       CP      C
1202+ C8A9 C8                       RET     z
1203+ C8AA 3E 05                    LD      A,KEY_UP
1204+ C8AC B9                       CP      C
1205+ C8AD CA 17 C4                 JP      z,PROCESS_UP
1206+ C8B0 3E 61                    LD      A,KEY_A
1207+ C8B2 B9                       CP      C
1208+ C8B3 CA 17 C4                 JP      z,PROCESS_UP
1209+ C8B6 3E 18                    LD      A,KEY_DOWN
1210+ C8B8 B9                       CP      C
1211+ C8B9 CA 55 C4                 JP      z,PROCESS_DOWN
1212+ C8BC 3E 79                    LD      A,KEY_Y
1213+ C8BE B9                       CP      C
1214+ C8BF CA 55 C4                 JP      z,PROCESS_DOWN
1215+ C8C2 3E 13                    LD      A,KEY_LEFT
1216+ C8C4 B9                       CP      C
1217+ C8C5 CA EA C4                 JP      z,PROCESS_PGUP
1218+ C8C8 3E 91                    LD      A,KEY_EACUTE
1219+ C8CA B9                       CP      C
1220+ C8CB CA EA C4                 JP      z,PROCESS_PGUP
1221+ C8CE 3E 04                    LD      A,KEY_RIGHT
1222+ C8D0 B9                       CP      C
1223+ C8D1 CA 08 C5                 JP      z,PROCESS_PGDN
1224+ C8D4 3E 01                    LD      A,KEY_COLON
1225+ C8D6 B9                       CP      C
1226+ C8D7 CA 08 C5                 JP      z,PROCESS_PGDN
1227+ C8DA 3E 0D                    LD      A,KEY_RETURN
1228+ C8DC B9                       CP      C
1229+ C8DD CA 43 C5                 JP      z,PROCESS_RETURN
1230+ C8E0 3E 20                    LD      a,KEY_SPACE
1231+ C8E2 B9                       CP      C
1232+ C8E3 CA DE C5                 JP      z,PROCESS_SPACE
1233+ C8E6 3E 6F                    LD      a,KEY_O
1234+ C8E8 B9                       CP      C
1235+ C8E9 CA 03 C6                 JP      z,PROCESS_ORIGINAL_ORDER
1236+ C8EC 3E 6E                    LD      a,KEY_N
1237+ C8EE B9                       CP      C
1238+ C8EF CA B0 C6                 JP      z,PROCESS_SORT_BY_NAME
1239+ C8F2 3E 73                    LD      a,KEY_S
1240+ C8F4 B9                       CP      C
1241+ C8F5 CA 0F C7                 JP      z,PROCESS_SORT_BY_SIZE
1242+ C8F8
1243+ C8F8              WAIT_IN_INPUT:
1244+ C8F8 06 0A                    LD      b,10
1245+ C8FA              WAIT_IN_INPUT_LOOP:
NanoSDROM_MENU.a80(1246): error: Label not found: wait_1ms
1246+ C8FA CD 00 00                 CALL    wait_1ms
1247+ C8FD 10 FB                    DJNZ    WAIT_IN_INPUT_LOOP
1248+ C8FF C3 96 C8                 JP      INPUT_LOOP
1249+ C902
1250+ C902              PRINT_HELP_TEXTS:
1251+ C902 3A 38 00                 LD      A,($0038)
1252+ C905 F5                       PUSH    AF
1253+ C906 3E C9                    LD      A,$C9
1254+ C908 32 38 00                 LD      ($0038),A
1255+ C90B
1256+ C90B 01 04 28                 LD      bc,MENU_ON_BOOT_TXT_COL*256+MENU_ON_BOOT_TXT_ROW
1257+ C90E F7                       RST     $30
1258+ C90F 23                       DB      F_EDCPOS
1259+ C910 21 65 CC                 LD      HL,MENU_ON_BOOT_STR
1260+ C913 CD FB D8                 CALL    PRINT_STRING
1261+ C916 3A FF 1F                 LD      A,(SHOW_MENU_ON_BOOT)
1262+ C919 B7                       OR      A
1263+ C91A 28 05                    JR      z,SHOW_NO_ON_NEXT_BOOT
1264+ C91C 21 65 CC                 LD      HL,MENU_ON_BOOT_YES_STR
1265+ C91F 18 03                    JR      PRINT_BOOT_VALUE
1266+ C921              SHOW_NO_ON_NEXT_BOOT:
1267+ C921 21 65 CC                 LD      HL,MENU_ON_BOOT_NO_STR
1268+ C924              PRINT_BOOT_VALUE:
1269+ C924 CD FB D8                 CALL    PRINT_STRING
1270+ C927
1271+ C927 01 07 18                 LD      bc,24*256+7
1272+ C92A 21 65 CC                 LD      HL,MENU_HELP_TEXT_STR
1273+ C92D              HELP_TEXT_LINE:
1274+ C92D C5                       PUSH    BC
1275+ C92E F7                       RST     $30
1276+ C92F 23                       DB      F_EDCPOS
1277+ C930              PRINT_HELP_TEXT_LOOP:
1278+ C930 4E                       LD      c,(hl)
1279+ C931 3E FF                    LD      A,$FF
1280+ C933 B9                       CP      C
1281+ C934 28 0E                    JR      z,END_OF_HELP_TEXT
1282+ C936 3C                       INC     A
1283+ C937 B9                       CP      C
1284+ C938 28 05                    JR      z,END_OF_LINE
1285+ C93A F7                       RST     $30
1286+ C93B 21                       DB      F_EDCHOUT
1287+ C93C 23                       INC     HL
1288+ C93D 18 F1                    JR      PRINT_HELP_TEXT_LOOP
1289+ C93F              END_OF_LINE:
1290+ C93F C1                       POP     BC
1291+ C940 0C                       INC     C
1292+ C941 23                       INC     HL
1293+ C942 18 E9                    JR      HELP_TEXT_LINE
1294+ C944              END_OF_HELP_TEXT:
1295+ C944 C1                       POP     BC
1296+ C945 F3                       DI
1297+ C946 F1                       POP     AF
1298+ C947 32 38 00                 LD      ($0038),A
1299+ C94A C9                       RET
1300+ C94B
1301+ C94B              CALC_CSTR_LEN:
1302+ C94B E5                       PUSH    HL
1303+ C94C 06 FF                    LD      b,$FF
1304+ C94E              CHECK_NEXT_CHAR:
1305+ C94E 04                       INC     B
1306+ C94F 7E                       LD      a,(HL)
1307+ C950 23                       INC     HL
1308+ C951 B7                       OR      A
NanoSDROM_MENU.a80(1309): error: Label not found: check_next_char
NanoSDROM_MENU.a80(1309): error: [JR] Target out of range (-51540)
1309+ C952 20 00                    JR      nz,check_next_char
1310+ C954 78                       LD      a,b
1311+ C955 E1                       POP     HL
1312+ C956 C9                       RET
1313+ C957
1314+ C957              LOAD_PWD:
1315+ C957 11 00 20                 LD      de,PATH_INPUT
1316+ C95A F7                       RST     $30
1317+ C95B 56                       DB      F_PWD+$50
1318+ C95C 32 F5 1F                 LD      (IS_IN_ROOT),A ; in case of failure: no ".." in the list
1319+ C95F B7                       OR      A
1320+ C960 20 1A                    JR      nz,GETTING_PWD_FAILED
1321+ C962 21 00 20                 LD      hl,PATH_INPUT
1322+ C965 CD 4B C9                 CALL    CALC_CSTR_LEN
1323+ C968 32 3F 20                 LD      (PATH_INPUT + $3F),A
1324+ C96B FE 01                    CP      1
1325+ C96D 20 0C                    JR      nz,LOAD_PWD_DONE
1326+ C96F 3A 00 20                 LD      A,(PATH_INPUT)
1327+ C972 FE 2F                    CP      "/"
1328+ C974 20 05                    JR      nz,LOAD_PWD_DONE ; nonsense...
1329+ C976 3E 01                    LD      A,1
1330+ C978 32 F5 1F                 LD      (IS_IN_ROOT),A
1331+ C97B              LOAD_PWD_DONE:
1332+ C97B C9                       RET
1333+ C97C              GETTING_PWD_FAILED:
1334+ C97C AF                       XOR     A ; no valid path in buffer
1335+ C97D 32 3F 20                 LD      (PATH_INPUT+$3F),A
1336+ C980 C9                       RET
1337+ C981
1338+ C981              PRINT_PATH_FIELD:
1339+ C981 01 16 02                 LD      BC,$100 * (START_COL + 1) + (START_ROW + 20)
1340+ C984 F7                       RST     $30
1341+ C985 23                       DB      F_EDCPOS
1342+ C986 3A 3F 20                 LD      A,(PATH_INPUT+$3F)
1343+ C989 B7                       OR      A
1344+ C98A CA F7 C9                 JP      z,PWD_FAILED
1345+ C98D
1346+ C98D              PRINT_PWD:
1347+ C98D FE 13                    CP      19 ; length is >= 19
1348+ C98F 30 26                    JR      nc,TRUNCATE_WORKDIR
1349+ C991 21 00 20                 LD      HL,PATH_INPUT
1350+ C994 CD D6 D8                 CALL    INIT_PRINT_CSTRING
1351+ C997 21 3F 20                 LD      hl,PATH_INPUT + $3F
1352+ C99A 3E 12                    LD      A,18
1353+ C99C 96                       SUB     (HL)
1354+ C99D B7                       OR      A
1355+ C99E C8                       RET     z
1356+ C99F 47                       LD      B,A
1357+ C9A0 3A 38 00                 LD      A,($0038)
1358+ C9A3 F5                       PUSH    AF
1359+ C9A4 3E C9                    LD      A,$C9
1360+ C9A6 32 38 00                 LD      ($0038),A
1361+ C9A9 0E 20                    LD      C," "
1362+ C9AB              PAD_PATH_LOOP:
1363+ C9AB C5                       PUSH    BC
1364+ C9AC F7                       RST     $30
1365+ C9AD 21                       DB      F_EDCHOUT
1366+ C9AE C1                       POP     BC
1367+ C9AF 10 FA                    DJNZ    PAD_PATH_LOOP
1368+ C9B1              PRINT_PATH_DONE:
1369+ C9B1 F3                       DI
1370+ C9B2 F1                       POP     AF
1371+ C9B3 32 38 00                 LD      ($0038),A
1372+ C9B6 C9                       RET
1373+ C9B7              TRUNCATE_WORKDIR:
1374+ C9B7 3A 38 00                 LD      A,($0038)
1375+ C9BA F5                       PUSH    AF
1376+ C9BB 3E C9                    LD      A,$C9
1377+ C9BD 32 38 00                 LD      ($0038),A
1378+ C9C0 21 00 20                 LD      HL,PATH_INPUT
1379+ C9C3 16 00                    LD      D,00
1380+ C9C5              BEGIN_PATH_LOOP:
1381+ C9C5 D5                       PUSH    DE
1382+ C9C6 4E                       LD      C,(hl)
1383+ C9C7 F7                       RST     $30
1384+ C9C8 21                       DB      F_EDCHOUT
1385+ C9C9 D1                       POP     de
1386+ C9CA 14                       INC     d
1387+ C9CB 23                       INC     hl
1388+ C9CC 7A                       LD      a,d
1389+ C9CD FE 0B                    CP      11
1390+ C9CF 20 F4                    JR      nz,BEGIN_PATH_LOOP
1391+ C9D1
1392+ C9D1 3A 3F 20                 LD      A,(PATH_INPUT+$3F)
1393+ C9D4 5F                       LD      E,A
1394+ C9D5 16 00                    LD      d,0
1395+ C9D7 06 0F                    LD      B,START_COL + 1 + 13
1396+ C9D9 21 00 20                 LD      HL,PATH_INPUT
1397+ C9DC 19                       ADD     HL,DE ; HL -> points to zero closing of path
1398+ C9DD 2B                       DEC     HL
1399+ C9DE 3E 2F                    LD      A,"/"
1400+ C9E0
1401+ C9E0              FIND_LAST_SLASH_LOOP:
1402+ C9E0 2B                       DEC     HL
1403+ C9E1 05                       DEC     B
1404+ C9E2 BE                       CP      (HL)
1405+ C9E3 20 FB                    JR      nz,FIND_LAST_SLASH_LOOP
1406+ C9E5 E5                       PUSH    HL
1407+ C9E6 0E 16                    LD      C,START_ROW + 20
1408+ C9E8 F7                       RST     $30
1409+ C9E9 23                       DB      F_EDCPOS
1410+ C9EA 21 A7 CA                 LD      HL,TRUNCATED_PATH_STR
1411+ C9ED CD 9F D8                 CALL    INIT_PRINT_STRING
1412+ C9F0 E1                       POP     HL
1413+ C9F1 CD D6 D8                 CALL    INIT_PRINT_CSTRING
1414+ C9F4 C3 B1 C9                 JP      PRINT_PATH_DONE
1415+ C9F7              PWD_FAILED:
1416+ C9F7 21 A7 CA                 LD      HL,PWD_READ_FAILED_STR
1417+ C9FA C3 9F D8                 JP      INIT_PRINT_STRING
1418+ C9FD
1419+ C9FD              DRAW_TABLE:
1420+ C9FD 3A 38 00                 LD      A,($0038) ; store first instruction of RST $38 (IRQ)
1421+ CA00 F5                       PUSH    AF
1422+ CA01 3E C9                    LD      A,$C9 ; and set it RET to ignore it, because of a v2.2 bug
1423+ CA03 32 38 00                 LD      ($0038),a
1424+ CA06
1425+ CA06 01 02 01                 LD      BC,START_COL * $100 + START_ROW
1426+ CA09 F7                       RST     $30
1427+ CA0A 23                       DB      F_EDCPOS
1428+ CA0B 21 79 CA                 LD      HL,TOP_HEADER_LINE
1429+ CA0E CD FB D8                 CALL    PRINT_STRING
1430+ CA11 21 7F CA                 LD      HL,TXT_HEADER_LINE
1431+ CA14 CD FB D8                 CALL    PRINT_STRING
1432+ CA17 21 96 CA                 LD      HL,MID_HEADER_LINE
1433+ CA1A CD FB D8                 CALL    PRINT_STRING
1434+ CA1D
1435+ CA1D 0E 00                    LD      C,00
1436+ CA1F
1437+ CA1F              DRAW_TABLE_LOOP:
1438+ CA1F C5                       PUSH    BC ; store the counter in C
1439+ CA20 79                       LD      A,C
1440+ CA21
1441+ CA21 01 05 01                 LD      BC,START_COL * $100 + START_ROW + 3
1442+ CA24 81                       ADD     A,C
1443+ CA25 4F                       LD      C,A
1444+ CA26
1445+ CA26 C5                       PUSH    BC ; store the position in BC
1446+ CA27 F7                       RST     $30
1447+ CA28 23                       DB      F_EDCPOS
1448+ CA29 0E 8B                    LD      C,VERTIC_CH
1449+ CA2B F7                       RST     $30
1450+ CA2C 21                       DB      F_EDCHOUT
1451+ CA2D C1                       POP     BC ; pop the position
1452+ CA2E
1453+ CA2E 3E 0D                    LD      A,13
1454+ CA30 80                       ADD     A,B
1455+ CA31 47                       LD      B,A
1456+ CA32
1457+ CA32 C5                       PUSH    BC ; mid cross position
1458+ CA33 F7                       RST     $30
1459+ CA34 23                       DB      F_EDCPOS
1460+ CA35 0E 8B                    LD      C,VERTIC_CH
1461+ CA37 F7                       RST     $30
1462+ CA38 21                       DB      F_EDCHOUT
1463+ CA39 C1                       POP     BC
1464+ CA3A
1465+ CA3A 3E 06                    LD      A,6
1466+ CA3C 80                       ADD     A,B
1467+ CA3D 47                       LD      B,A
1468+ CA3E
1469+ CA3E F7                       RST     $30 ; no need to store here the row position anymore
1470+ CA3F 23                       DB      F_EDCPOS
1471+ CA40 0E 8B                    LD      C,VERTIC_CH
1472+ CA42 F7                       RST     $30
1473+ CA43 21                       DB      F_EDCHOUT
1474+ CA44
1475+ CA44 C1                       POP     BC ; pop the counter in C
1476+ CA45
1477+ CA45 0C                       INC     C
1478+ CA46 3E 10                    LD      A,$10
1479+ CA48 B9                       CP      C
1480+ CA49 20 D4                    JR      nz,DRAW_TABLE_LOOP
1481+ CA4B
1482+ CA4B 01 15 01                 LD      BC,START_COL * $100 + START_ROW + 19
1483+ CA4E F7                       RST     $30
1484+ CA4F 23                       DB      F_EDCPOS
1485+ CA50 21 9C CA                 LD      HL,BOT1_HEADER_LINE
1486+ CA53 CD FB D8                 CALL    PRINT_STRING
1487+ CA56
1488+ CA56 01 16 01                 LD      BC,START_COL * $100 + START_ROW + 20
1489+ CA59 F7                       RST     $30
1490+ CA5A 23                       DB      F_EDCPOS
1491+ CA5B 0E 8B                    LD      C,VERTIC_CH
1492+ CA5D F7                       RST     $30
1493+ CA5E 21                       DB      F_EDCHOUT
1494+ CA5F 01 16 14                 LD      BC,(START_COL + 19) * $100 + START_ROW + 20
1495+ CA62 F7                       RST     $30
1496+ CA63 23                       DB      F_EDCPOS
1497+ CA64 0E 8B                    LD      C,VERTIC_CH
1498+ CA66 F7                       RST     $30
1499+ CA67 21                       DB      F_EDCHOUT
1500+ CA68
1501+ CA68 01 17 01                 LD      BC,START_COL * $100 + START_ROW + 21
1502+ CA6B F7                       RST     $30
1503+ CA6C 23                       DB      F_EDCPOS
1504+ CA6D 21 A2 CA                 LD      HL,BOT2_HEADER_LINE
1505+ CA70 CD FB D8                 CALL    PRINT_STRING
1506+ CA73
1507+ CA73 F3                       DI       ; disable interrupts and
1508+ CA74 F1                       POP     AF ; restore first instruction of RST $38
1509+ CA75 32 38 00                 LD      ($0038),A
1510+ CA78 C9                       RET
1511+ CA79
1512+ CA79
1513+ CA79              ; top-left : 89h
1514+ CA79              ; horiz   : 91h
1515+ CA79              ; top-right: 99h
1516+ CA79              ; vert    : 8bh
1517+ CA79              ; bot-left: 8ah
1518+ CA79              ; bot-righ: 9ah
1519+ CA79              ; mid-cros: 8eh
1520+ CA79              ; top-cros: 8dh
1521+ CA79              ; left-cr : 8ch
1522+ CA79              ; right-c : 9ch
1523+ CA79              ; bot-cros: 9dh
1524+ CA79              TOP_LEFT_CH EQU     $89
1525+ CA79              HORIZ_CH    EQU     $9B
1526+ CA79              TOP_RIGHT_CH EQU    $99
1527+ CA79              VERTIC_CH   EQU     $8B
1528+ CA79              BOTT_LEFT_CH EQU    $8A
1529+ CA79              BOTT_RIGHT_CH EQU   $9A
1530+ CA79              MID_CROSS_CH EQU    $8E
1531+ CA79              TOP_CROSS_CH EQU    $8D
1532+ CA79              LEFT_CROSS_CH EQU   $8C
1533+ CA79              RIGHT_CROSS_CH EQU  $9C
1534+ CA79              BOTT_CROSS_CH EQU   $9D
1535+ CA79
1536+ CA79              ; TABLE STRINGS
1537+ CA79              ; .  12 ch     . 5ch . => 20 ch
1538+ CA79              ; +------------+-----+  TOP
1539+ CA79              ; |    NAME    | SIZE|
1540+ CA79              ; +------------+-----+  MID
1541+ CA79              ; |            |     |  x 16
1542+ CA79              ; |            |     |
1543+ CA79              ;    . . . .
1544+ CA79              ; +------------+-----+  BOTTOM
1545+ CA79              ;
1546+ CA79
1547+ CA79
1548+ CA79              TOP_HEADER_LINE:
1549+ CA79 16                       DB      22
1550+ CA7A 89                       DB      TOP_LEFT_CH
NanoSDROM_MENU.a80(1551): error: Unrecognized instruction: FILL    HORIZ_CH,12
1551+ CA7B                          FILL    HORIZ_CH,12
1552+ CA7B 8D                       DB      TOP_CROSS_CH
NanoSDROM_MENU.a80(1553): error: Unrecognized instruction: FILL    HORIZ_CH,5
1553+ CA7C                          FILL    HORIZ_CH,5
1554+ CA7C 99                       DB      TOP_RIGHT_CH
1555+ CA7D 0D 0A                    DB      "\r\n"
1556+ CA7F
1557+ CA7F              TXT_HEADER_LINE:
1558+ CA7F 16                       DB      22
1559+ CA80 8B                       DB      VERTIC_CH
1560+ CA81 20 20 20 20              DB      "    NAME    "
1560+ CA85 4E 41 4D 45
1560+ CA89 20 20 20 20
1561+ CA8D 8B                       DB      VERTIC_CH
1562+ CA8E 20 53 49 5A              DB      " SIZE"
1562+ CA92 45
1563+ CA93 8B                       DB      VERTIC_CH
1564+ CA94 0D 0A                    DB      "\r\n"
1565+ CA96
1566+ CA96              MID_HEADER_LINE:
1567+ CA96 16                       DB      22
1568+ CA97 8C                       DB      LEFT_CROSS_CH
NanoSDROM_MENU.a80(1569): error: Unrecognized instruction: FILL    HORIZ_CH,12
1569+ CA98                          FILL    HORIZ_CH,12
1570+ CA98 8E                       DB      MID_CROSS_CH
NanoSDROM_MENU.a80(1571): error: Unrecognized instruction: FILL    HORIZ_CH,5
1571+ CA99                          FILL    HORIZ_CH,5
1572+ CA99 9C                       DB      RIGHT_CROSS_CH
1573+ CA9A 0D 0A                    DB      "\r\n"
1574+ CA9C
1575+ CA9C              BOT1_HEADER_LINE:
1576+ CA9C 14                       DB      20
1577+ CA9D 8C                       DB      LEFT_CROSS_CH
NanoSDROM_MENU.a80(1578): error: Unrecognized instruction: FILL    HORIZ_CH,12
1578+ CA9E                          FILL    HORIZ_CH,12
1579+ CA9E 9D                       DB      BOTT_CROSS_CH
NanoSDROM_MENU.a80(1580): error: Unrecognized instruction: FILL    HORIZ_CH,5
1580+ CA9F                          FILL    HORIZ_CH,5
1581+ CA9F 9C                       DB      RIGHT_CROSS_CH
1582+ CAA0 0D 0A                    DB      "\r\n"
1583+ CAA2
1584+ CAA2              BOT2_HEADER_LINE:
1585+ CAA2 16                       DB      22
1586+ CAA3 8A                       DB      BOTT_LEFT_CH
NanoSDROM_MENU.a80(1587): error: Unrecognized instruction: FILL    HORIZ_CH,18
1587+ CAA4                          FILL    HORIZ_CH,18
1588+ CAA4 9A                       DB      BOTT_RIGHT_CH
1589+ CAA5 0D 0A                    DB      "\r\n"
1590+ CAA7
1591+ CAA7              TRUNCATED_PATH_STR:
NanoSDROM_MENU.a80(1592): error: Unrecognized instruction: .PSTR   "[..]"
1592+ CAA7                          .PSTR   "[..]"
1593+ CAA7              PWD_READ_FAILED_STR:
NanoSDROM_MENU.a80(1594): error: Unrecognized instruction: .PSTR   "PWD read failed!"
1594+ CAA7                          .PSTR   "PWD read failed!"
1595+ CAA7
1596+ CAA7
1597+ CAA7              PRINT_STATUS_MSG:
1598+ CAA7 E5                       PUSH    HL
1599+ CAA8 21 41 06                 LD      hl,64*(START_ROW-1+20) + START_COL + $100
1600+ CAAB 11 80 20                 LD      de,STATUS_LINE_BACKUP
1601+ CAAE 01 12 00                 LD      bc,18
1602+ CAB1 ED B0                    LDIR
1603+ CAB3 AF                       XOR     a
1604+ CAB4 12                       LD      (de),a
1605+ CAB5 E1                       POP     HL
1606+ CAB6 01 16 02                 LD      bc,$100*(START_COL+1) + START_ROW + 20
1607+ CAB9 F7                       RST     $30
1608+ CABA 23                       DB      F_EDCPOS
1609+ CABB CD 9F D8                 CALL    INIT_PRINT_STRING
1610+ CABE C9                       RET
1611+ CABF
1612+ CABF              REVERT_STATUS_MSG:
1613+ CABF 01 16 02                 LD      bc,$100*(START_COL+1) + START_ROW + 20
1614+ CAC2 F7                       RST     $30
1615+ CAC3 23                       DB      F_EDCPOS
1616+ CAC4 21 80 20                 LD      HL,STATUS_LINE_BACKUP
1617+ CAC7 CD D6 D8                 CALL    INIT_PRINT_CSTRING
1618+ CACA C9                       RET
1619+ CACB
1620+ CACB
1621+ CACB              CDUP_RECORD:
1622+ CACB 2E 2E 20 20              DB      "..          "
1622+ CACF 20 20 20 20
1622+ CAD3 20 20 20 20
1623+ CAD7 00 00 00 00              DB      0,0,0,0,0
1623+ CADB 00
1624+ CADC
1625+ CADC
1626+ CADC              TEST_RECORDS:
1627+ CADC 54 45 53 54              DB      "TESTFIL8.TXT"
1627+ CAE0 46 49 4C 38
1627+ CAE4 2E 54 58 54
1628+ CAE8 01 0F 0F 00              DB      1,15,15,0,0
1628+ CAEC 00
1629+ CAED 42 49 47 46              DB      "BIGFILE6.TXT"
1629+ CAF1 49 4C 45 36
1629+ CAF5 2E 54 58 54
1630+ CAF9 01 0F 0F 01              DB      1,15,15,1,0
1630+ CAFD 00
1631+ CAFE 44 49 52 45              DB      "DIRECTO2    "
1631+ CB02 43 54 4F 32
1631+ CB06 20 20 20 20
1632+ CB0A 00 00 00 00              DB      0,0,0,0,0
1632+ CB0E 00
1633+ CB0F 54 45 53 54              DB      "TESTFIL3.TXT"
1633+ CB13 46 49 4C 33
1633+ CB17 2E 54 58 54
1634+ CB1B 01 0F 0F 00              DB      1,15,15,0,0
1634+ CB1F 00
1635+ CB20 42 49 47 46              DB      "BIGFILE4.TXT"
1635+ CB24 49 4C 45 34
1635+ CB28 2E 54 58 54
1636+ CB2C 01 0F 0F 01              DB      1,15,15,1,0
1636+ CB30 00
1637+ CB31 44 49 52 45              DB      "DIRECTO5    "
1637+ CB35 43 54 4F 35
1637+ CB39 20 20 20 20
1638+ CB3D 00 00 00 00              DB      0,0,0,0,0
1638+ CB41 00
1639+ CB42 54 45 53 54              DB      "TESTFIL6.TXT"
1639+ CB46 46 49 4C 36
1639+ CB4A 2E 54 58 54
1640+ CB4E 01 0F 0F 00              DB      1,15,15,0,0
1640+ CB52 00
1641+ CB53 42 49 47 46              DB      "BIGFILE7.TXT"
1641+ CB57 49 4C 45 37
1641+ CB5B 2E 54 58 54
1642+ CB5F 01 0F 0F 01              DB      1,15,15,1,0
1642+ CB63 00
1643+ CB64 54 45 53 54              DB      "TESTFIL2.TXT"
1643+ CB68 46 49 4C 32
1643+ CB6C 2E 54 58 54
1644+ CB70 01 0F 0F 00              DB      1,15,15,0,0
1644+ CB74 00
1645+ CB75 42 49 47 46              DB      "BIGFILE1.TXT"
1645+ CB79 49 4C 45 31
1645+ CB7D 2E 54 58 54
1646+ CB81 01 0F 0F 01              DB      1,15,15,1,0
1646+ CB85 00
1647+ CB86 44 49 52 45              DB      "DIRECT10    "
1647+ CB8A 43 54 31 30
1647+ CB8E 20 20 20 20
1648+ CB92 00 00 00 00              DB      0,0,0,0,0
1648+ CB96 00
1649+ CB97 54 45 53 54              DB      "TESTFI21.TXT"
1649+ CB9B 46 49 32 31
1649+ CB9F 2E 54 58 54
1650+ CBA3 01 0F 0F 00              DB      1,15,15,0,0
1650+ CBA7 00
1651+ CBA8 42 49 47 46              DB      "BIGFIL12.TXT"
1651+ CBAC 49 4C 31 32
1651+ CBB0 2E 54 58 54
1652+ CBB4 01 0F 0F 01              DB      1,15,15,1,0
1652+ CBB8 00
1653+ CBB9 44 49 52 45              DB      "DIRECT33    "
1653+ CBBD 43 54 33 33
1653+ CBC1 20 20 20 20
1654+ CBC5 00 00 00 00              DB      0,0,0,0,0
1654+ CBC9 00
1655+ CBCA 54 45 53 54              DB      "TESTFI11.TXT"
1655+ CBCE 46 49 31 31
1655+ CBD2 2E 54 58 54
1656+ CBD6 01 0F 0F 00              DB      1,15,15,0,0
1656+ CBDA 00
1657+ CBDB 42 49 47 46              DB      "BIGFIL15.TXT"
1657+ CBDF 49 4C 31 35
1657+ CBE3 2E 54 58 54
1658+ CBE7 01 0F 0F 01              DB      1,15,15,1,0
1658+ CBEB 00
1659+ CBEC 42 49 47 46              DB      "BIGFIL09.TXT"
1659+ CBF0 49 4C 30 39
1659+ CBF4 2E 54 58 54
1660+ CBF8 01 0F 11 00              DB      1,15,17,0,0
1660+ CBFC 00
1661+ CBFD              TEST_RECORDS_END:
1662+ CBFD              TEST_REC_ADDR:
1663+ CBFD 00 30                    DW      DIR_DATA
1664+ CBFF 11 30                    DW      DIR_DATA +  1*17
1665+ CC01 22 30                    DW      DIR_DATA +  2*17
1666+ CC03 33 30                    DW      DIR_DATA +  3*17
1667+ CC05 44 30                    DW      DIR_DATA +  4*17
1668+ CC07 55 30                    DW      DIR_DATA +  5*17
1669+ CC09 66 30                    DW      DIR_DATA +  6*17
1670+ CC0B 77 30                    DW      DIR_DATA +  7*17
1671+ CC0D 88 30                    DW      DIR_DATA +  8*17
1672+ CC0F 99 30                    DW      DIR_DATA +  9*17
1673+ CC11 AA 30                    DW      DIR_DATA + 10*17
1674+ CC13 BB 30                    DW      DIR_DATA + 11*17
1675+ CC15 CC 30                    DW      DIR_DATA + 12*17
1676+ CC17 DD 30                    DW      DIR_DATA + 13*17
1677+ CC19 EE 30                    DW      DIR_DATA + 14*17
1678+ CC1B FF 30                    DW      DIR_DATA + 15*17
1679+ CC1D 10 31                    DW      DIR_DATA + 16*17
1680+ CC1F              TEST_REC_ADDR_END:
1681+ CC1F              ;                           1         2         3   3
1682+ CC1F              TEST_PWD:            ;   1        0         0         0   4
NanoSDROM_MENU.a80(1683): error: Unrecognized instruction: .CSTR   "/this/is/a/long/working/directory/"
1683+ CC1F                          .CSTR   "/this/is/a/long/working/directory/"
1684+ CC1F 00 00 00 00              DB      0,0,0,0,0,0,0,0,0,0,0,0,0
1684+ CC23 00 00 00 00
1684+ CC27 00 00 00 00
1684+ CC2B 00
1685+ CC2C 00 00 00 00              DB      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34
1685+ CC30 00 00 00 00
1685+ CC34 00 00 00 00
1685+ CC38 00 00 00 22
1686+ CC3C
1687+ CC3C              FILL_PWD_WITH_TEST_DATA:
1688+ CC3C 21 1F CC                 LD      hl,TEST_PWD
1689+ CC3F 11 00 20                 LD      DE,PATH_INPUT
1690+ CC42 01 40 00                 LD      BC,$40
1691+ CC45 ED B0                    LDIR
1692+ CC47 C9                       RET
1693+ CC48
1694+ CC48              FILL_DIR_WITH_TEST_DATA:
1695+ CC48 21 DC CA                 LD      HL,TEST_RECORDS
1696+ CC4B 11 00 30                 LD      DE,DIR_DATA
1697+ CC4E 01 21 01                 LD      BC,TEST_RECORDS_END - TEST_RECORDS
1698+ CC51 ED B0                    LDIR
1699+ CC53 21 11 00                 LD      HL,17
1700+ CC56 22 F3 1F                 LD      (DIR_SIZE),HL
1701+ CC59 21 FD CB                 LD      HL,TEST_REC_ADDR
1702+ CC5C 11 00 21                 LD      DE,DIR_ENTRY_POIS
1703+ CC5F 01 22 00                 LD      BC,TEST_REC_ADDR_END - TEST_REC_ADDR
1704+ CC62 ED B0                    LDIR
1705+ CC64 C9                       RET
1706+ CC65
1707+ CC65
1708+ CC65              MENU_ON_BOOT_STR:
NanoSDROM_MENU.a80(1709): error: Unrecognized instruction: .PSTR   "Enter menu on boot: "
1709+ CC65                          .PSTR   "Enter menu on boot: "
1710+ CC65              MENU_ON_BOOT_YES_STR:
NanoSDROM_MENU.a80(1711): error: Unrecognized instruction: .PSTR   "Yes"
1711+ CC65                          .PSTR   "Yes"
1712+ CC65              MENU_ON_BOOT_NO_STR:
NanoSDROM_MENU.a80(1713): error: Unrecognized instruction: .PSTR   "No "
1713+ CC65                          .PSTR   "No "
1714+ CC65
1715+ CC65
1716+ CC65              MENU_HELP_TEXT_STR:
1717+ CC65              ;                           1         2         3         4
1718+ CC65              ;                  123456789012345678901234567890123456789012
NanoSDROM_MENU.a80(1719): error: Unrecognized instruction: .CSTR   "Simple File Selection Menu for NanoSD"
1719+ CC65                          .CSTR   "Simple File Selection Menu for NanoSD"
NanoSDROM_MENU.a80(1720): error: Unrecognized instruction: .CSTR   "                                IO Card"
1720+ CC65                          .CSTR   "                                IO Card"
NanoSDROM_MENU.a80(1721): error: Unrecognized instruction: .CSTR   ""
1721+ CC65                          .CSTR   ""
NanoSDROM_MENU.a80(1722): error: Unrecognized instruction: .CSTR   "- Use Joy UP/DOWN or key A/Y for moving"
1722+ CC65                          .CSTR   "- Use Joy UP/DOWN or key A/Y for moving"
NanoSDROM_MENU.a80(1723): error: Unrecognized instruction: .CSTR   "  the selection up and down!"
1723+ CC65                          .CSTR   "  the selection up and down!"
NanoSDROM_MENU.a80(1724): error: Unrecognized instruction: .CSTR   "- Use Joy LEFT/RIGHT or key \u081 /: to"
1724+ CC65                          .CSTR   "- Use Joy LEFT/RIGHT or key \u081 /: to"
NanoSDROM_MENU.a80(1725): error: Unrecognized instruction: .CSTR   "  move one page up or down!"
1725+ CC65                          .CSTR   "  move one page up or down!"
NanoSDROM_MENU.a80(1726): error: Unrecognized instruction: .CSTR   "- Use key Return to enter a subdirectory"
1726+ CC65                          .CSTR   "- Use key Return to enter a subdirectory"
NanoSDROM_MENU.a80(1727): error: Unrecognized instruction: .CSTR   "  or to start a .CAS file!"
1727+ CC65                          .CSTR   "  or to start a .CAS file!"
NanoSDROM_MENU.a80(1728): error: Unrecognized instruction: .CSTR   "- Use SPACE to skip the file selection"
1728+ CC65                          .CSTR   "- Use SPACE to skip the file selection"
NanoSDROM_MENU.a80(1729): error: Unrecognized instruction: .CSTR   "  during boot up next time."
1729+ CC65                          .CSTR   "  during boot up next time."
NanoSDROM_MENU.a80(1730): error: Unrecognized instruction: .CSTR   "- Sort by (S)ize or (N)ame, n(o) sort"
1730+ CC65                          .CSTR   "- Sort by (S)ize or (N)ame, n(o) sort"
NanoSDROM_MENU.a80(1731): error: Unrecognized instruction: .CSTR   ""
1731+ CC65                          .CSTR   ""
NanoSDROM_MENU.a80(1732): error: Unrecognized instruction: .CSTR   "During boot pressing the ESC will enter"
1732+ CC65                          .CSTR   "During boot pressing the ESC will enter"
NanoSDROM_MENU.a80(1733): error: Unrecognized instruction: .CSTR   "this screen"
1733+ CC65                          .CSTR   "this screen"
NanoSDROM_MENU.a80(1734): error: Unrecognized instruction: .CSTR   "                              Have Fun!"
1734+ CC65                          .CSTR   "                              Have Fun!"
1735+ CC65 FF                       DB      255
1736+ CC66
1737+ CC66              LOAD_STR:
1738+ CC66 20 4C 4F 41              DB      " LOAD ",$22
1738+ CC6A 44 20 22
1739+ CC6D              LOAD_STR_END:
1740+ CC6D              LOADING_DIRECTORY_STR:
NanoSDROM_MENU.a80(1741): error: Unrecognized instruction: .PSTR   "Loading dir:      "
1741+ CC6D                          .PSTR   "Loading dir:      "
1742+ CC6D              SORTING_BY_NAME_STR:
NanoSDROM_MENU.a80(1743): error: Unrecognized instruction: .PSTR   "Sorting by name..."
1743+ CC6D                          .PSTR   "Sorting by name..."
1744+ CC6D              SORTING_BY_SIZE_STR:
NanoSDROM_MENU.a80(1745): error: Unrecognized instruction: .PSTR   "Sorting by size..."
1745+ CC6D                          .PSTR   "Sorting by size..."
1746+ CC6D              ; SORTING_BY_NONE_STR:
1747+ CC6D              ;             .PSTR   "Reverting sort... "
1748+ CC6D
1749+ CC6D
1750+ CC6D
1751+ CC6D
1752+ CC6D
1753+ CC6D
1754+ CC6D
1755+ CC6D
1756+ CC6D
1757+ CC6D
1758+ CC6D
1759+ CC6D
1760+ CC6D
1761+ CC6D
1762+ CC6D
1763+ CC6D
1764+ CC6D
1765+ CC6D
1766+ CC6D
1767+ CC6D
# file closed: NanoSDROM_MENU.a80
 298  CC6D
 299  CC6D                      INCLUDE "NanoSDROM_CLI.a80"
# file opened: NanoSDROM_CLI.a80
   1+ CC6D              CHINPUT_BUFFER EQU  0x0D26 ; cassette output buffer
   2+ CC6D
   3+ CC6D              COMMAND_RECS:
   4+ CC6D B7 CF                    DW      CMD_HELP
   5+ CC6F 48 45 4C 50              DB      "HELP",$00,$FF
   5+ CC73 00 FF
   6+ CC75 BF CF                    DW      CMD_DIRWIDE
   7+ CC77 44 49 52 20              DB      "DIR /W",$00 ; 9 bytes long record
   7+ CC7B 2F 57 00
   8+ CC7E FF FF 00 FF              DB      $FF,$FF,$00,$ff,$ff,$ff,$ff ; 7 bytes long fake record
   8+ CC82 FF FF FF
   9+ CC85 C5 CF                    DW      CMD_DIR
  10+ CC87 44 49 52 00              DB      "DIR",$00,$FF,$FF
  10+ CC8B FF FF
  11+ CC8D 95 D0                    DW      CMD_CD
  12+ CC8F 43 44 00 FF              DB      "CD",$00,$FF,$FF,$FF
  12+ CC93 FF FF
  13+ CC95 9A D0                    DW      CMD_PWD
  14+ CC97 50 57 44 00              DB      "PWD",$00,$FF,$FF
  14+ CC9B FF FF
  15+ CC9D 18 D1                    DW      CMD_EXIT
  16+ CC9F 45 58 49 54              DB      "EXIT",$00,$FF
  16+ CCA3 00 FF
  17+ CCA5 19 D1                    DW      CMD_MKDIR
  18+ CCA7 4D 4B 44 49              DB      "MKDIR",$00
  18+ CCAB 52 00
  19+ CCAD 3D D1                    DW      CMD_RMDIR
  20+ CCAF 52 4D 44 49              DB      "RMDIR",$00
  20+ CCB3 52 00
  21+ CCB5 61 D1                    DW      CMD_DEL
  22+ CCB7 44 45 4C 00              DB      "DEL",$00,$FF,$FF
  22+ CCBB FF FF
  23+ CCBD 8E D1                    DW      CMD_VER
  24+ CCBF 56 45 52 00              DB      "VER",$00,$FF,$FF
  24+ CCC3 FF FF
  25+ CCC5 A9 D1                    DW      CMD_CLS
  26+ CCC7 43 4C 53 00              DB      "CLS",$00,$FF,$FF
  26+ CCCB FF FF
  27+ CCCD
  28+ CCCD 18 D1                    DW      CMD_EXIT
  29+ CCCF 58 00 FF FF              DB      "X",$00,$FF,$FF,$FF,$FF
  29+ CCD3 FF FF
  30+ CCD5 B7 CF                    DW      CMD_HELP
  31+ CCD7 48 00 FF FF              DB      "H",$00,$FF,$FF,$FF,$FF
  31+ CCDB FF FF
  32+ CCDD 00 00                    DB      $00,$00
  33+ CCDF
  34+ CCDF              HELP_CSTR:
  35+ CCDF 41 76 61 69              DB      "Available cmds:\r\n"
  35+ CCE3 6C 61 62 6C
  35+ CCE7 65 20 63 6D
  35+ CCEB 64 73 3A 0D
  35+ CCEF 0A
  36+ CCF0 20 2D 20 48              DB      " - HELP: prints the available commands (shortcut: H)\r\n"
  36+ CCF4 45 4C 50 3A
  36+ CCF8 20 70 72 69
  36+ CCFC 6E 74 73 20
  36+ CD00 74 68 65 20
  36+ CD04 61 76 61 69
  36+ CD08 6C 61 62 6C
  36+ CD0C 65 20 63 6F
  36+ CD10 6D 6D 61 6E
  36+ CD14 64 73 20 28
  36+ CD18 73 68 6F 72
  36+ CD1C 74 63 75 74
  36+ CD20 3A 20 48 29
  36+ CD24 0D 0A
  37+ CD26 20 2D 20 44              DB      " - DIR [/w]: lists the directories and files in the current\r\n"
  37+ CD2A 49 52 20 5B
  37+ CD2E 2F 77 5D 3A
  37+ CD32 20 6C 69 73
  37+ CD36 74 73 20 74
  37+ CD3A 68 65 20 64
  37+ CD3E 69 72 65 63
  37+ CD42 74 6F 72 69
  37+ CD46 65 73 20 61
  37+ CD4A 6E 64 20 66
  37+ CD4E 69 6C 65 73
  37+ CD52 20 69 6E 20
  37+ CD56 74 68 65 20
  37+ CD5A 63 75 72 72
  37+ CD5E 65 6E 74 0D
  37+ CD62 0A
  38+ CD63 20 20 20 64              DB      "   directory. DIR /W prints condensed directory list\r\n"
  38+ CD67 69 72 65 63
  38+ CD6B 74 6F 72 79
  38+ CD6F 2E 20 44 49
  38+ CD73 52 20 2F 57
  38+ CD77 20 70 72 69
  38+ CD7B 6E 74 73 20
  38+ CD7F 63 6F 6E 64
  38+ CD83 65 6E 73 65
  38+ CD87 64 20 64 69
  38+ CD8B 72 65 63 74
  38+ CD8F 6F 72 79 20
  38+ CD93 6C 69 73 74
  38+ CD97 0D 0A
  39+ CD99 20 2D 20 43              DB      " - CD [dir]: prints the current directory or changes into\r\n"
  39+ CD9D 44 20 5B 64
  39+ CDA1 69 72 5D 3A
  39+ CDA5 20 70 72 69
  39+ CDA9 6E 74 73 20
  39+ CDAD 74 68 65 20
  39+ CDB1 63 75 72 72
  39+ CDB5 65 6E 74 20
  39+ CDB9 64 69 72 65
  39+ CDBD 63 74 6F 72
  39+ CDC1 79 20 6F 72
  39+ CDC5 20 63 68 61
  39+ CDC9 6E 67 65 73
  39+ CDCD 20 69 6E 74
  39+ CDD1 6F 0D 0A
  40+ CDD4 20 20 20 74              DB      "   the given 'dir' directory\r\n"
  40+ CDD8 68 65 20 67
  40+ CDDC 69 76 65 6E
  40+ CDE0 20 27 64 69
  40+ CDE4 72 27 20 64
  40+ CDE8 69 72 65 63
  40+ CDEC 74 6F 72 79
  40+ CDF0 0D 0A
  41+ CDF2 20 2D 20 50              DB      " - PWD: prints the current directory (shortcut: CD)\r\n"
  41+ CDF6 57 44 3A 20
  41+ CDFA 70 72 69 6E
  41+ CDFE 74 73 20 74
  41+ CE02 68 65 20 63
  41+ CE06 75 72 72 65
  41+ CE0A 6E 74 20 64
  41+ CE0E 69 72 65 63
  41+ CE12 74 6F 72 79
  41+ CE16 20 28 73 68
  41+ CE1A 6F 72 74 63
  41+ CE1E 75 74 3A 20
  41+ CE22 43 44 29 0D
  41+ CE26 0A
  42+ CE27 20 2D 20 4D              DB      " - MKDIR <dir>: creates a new directory\r\n"
  42+ CE2B 4B 44 49 52
  42+ CE2F 20 3C 64 69
  42+ CE33 72 3E 3A 20
  42+ CE37 63 72 65 61
  42+ CE3B 74 65 73 20
  42+ CE3F 61 20 6E 65
  42+ CE43 77 20 64 69
  42+ CE47 72 65 63 74
  42+ CE4B 6F 72 79 0D
  42+ CE4F 0A
  43+ CE50 20 2D 20 52              DB      " - RMDIR <dir>: removes an empty directory\r\n"
  43+ CE54 4D 44 49 52
  43+ CE58 20 3C 64 69
  43+ CE5C 72 3E 3A 20
  43+ CE60 72 65 6D 6F
  43+ CE64 76 65 73 20
  43+ CE68 61 6E 20 65
  43+ CE6C 6D 70 74 79
  43+ CE70 20 64 69 72
  43+ CE74 65 63 74 6F
  43+ CE78 72 79 0D 0A
  44+ CE7C 20 2D 20 44              DB      " - DEL <file>: deletes a file\r\n"
  44+ CE80 45 4C 20 3C
  44+ CE84 66 69 6C 65
  44+ CE88 3E 3A 20 64
  44+ CE8C 65 6C 65 74
  44+ CE90 65 73 20 61
  44+ CE94 20 66 69 6C
  44+ CE98 65 0D 0A
  45+ CE9B 20 2D 20 56              DB      " - VER: prints the version of the NanoSD firmware\r\n"
  45+ CE9F 45 52 3A 20
  45+ CEA3 70 72 69 6E
  45+ CEA7 74 73 20 74
  45+ CEAB 68 65 20 76
  45+ CEAF 65 72 73 69
  45+ CEB3 6F 6E 20 6F
  45+ CEB7 66 20 74 68
  45+ CEBB 65 20 4E 61
  45+ CEBF 6E 6F 53 44
  45+ CEC3 20 66 69 72
  45+ CEC7 6D 77 61 72
  45+ CECB 65 0D 0A
  46+ CECE 20 2D 20 43              DB      " - CLS: clears screen\r\n"
  46+ CED2 4C 53 3A 20
  46+ CED6 63 6C 65 61
  46+ CEDA 72 73 20 73
  46+ CEDE 63 72 65 65
  46+ CEE2 6E 0D 0A
  47+ CEE5 20 2D 20 45              DB      " - EXIT: leaves the CLI of the Nano SD IO card \r\n"
  47+ CEE9 58 49 54 3A
  47+ CEED 20 6C 65 61
  47+ CEF1 76 65 73 20
  47+ CEF5 74 68 65 20
  47+ CEF9 43 4C 49 20
  47+ CEFD 6F 66 20 74
  47+ CF01 68 65 20 4E
  47+ CF05 61 6E 6F 20
  47+ CF09 53 44 20 49
  47+ CF0D 4F 20 63 61
  47+ CF11 72 64 20 0D
  47+ CF15 0A
NanoSDROM_CLI.a80(48): error: Unrecognized instruction: .CSTR   "   (shortcut: X)\r\n"
  48+ CF16                          .CSTR   "   (shortcut: X)\r\n"
  49+ CF16
  50+ CF16              ; IN params
  51+ CF16              ; A - latest PORT03
  52+ CF16              ; B - orig PORT03
  53+ CF16              ; C - IO CARD RAM in U0
  54+ CF16              ; OUT params
  55+ CF16              ; C - must contain $03
  56+ CF16              ; B - must contain the original PORT03_SHADOW value
  57+ CF16              ; A - must contain the original PORT02_SHADOW value
  58+ CF16              CLI_MAIN:
  59+ CF16 DD E5                    PUSH    IX
  60+ CF18 32 11 0B                 LD      (PORT03_SHADOW),a
  61+ CF1B AF                       XOR     a
  62+ CF1C 67                       LD      h,a
  63+ CF1D 69                       LD      l,c
  64+ CF1E E5                       PUSH    hl
  65+ CF1F DD E1                    POP     ix ; IX contains memory CARD's base memory in U0
  66+ CF21 3A 03 00                 LD      a,(PORT02_SHADOW)
  67+ CF24 4F                       LD      c,a
  68+ CF25 C5                       PUSH    bc ; BC - original PORT03/PORT2 shadow regs
  69+ CF26 3E F0                    LD      a,$f0
  70+ CF28 32 03 00                 LD      (PORT02_SHADOW),a
  71+ CF2B FB                       EI
  72+ CF2C
  73+ CF2C 21 CE D1                 LD      hl,CLI_HDR_STR
  74+ CF2F CD FB D8                 CALL    PRINT_STRING
  75+ CF32 21 00 D2                 LD      hl,CLI_THELP_STR
  76+ CF35 CD FB D8                 CALL    PRINT_STRING
  77+ CF38 CD 47 CF                 CALL    CLI_LOOP
  78+ CF3B
  79+ CF3B C1                       POP     BC
  80+ CF3C F3                       DI
  81+ CF3D 78                       LD      A,B
  82+ CF3E 32 11 0B                 LD      (PORT03_SHADOW),A
  83+ CF41 79                       LD      A,C
  84+ CF42 0E 03                    LD      C,$03
  85+ CF44
  86+ CF44 DD E1                    POP     IX
  87+ CF46 C9                       RET
  88+ CF47
  89+ CF47              CLI_LOOP:
  90+ CF47 21 20 D2                 LD      HL,PROMPT_STR
  91+ CF4A CD FB D8                 CALL    PRINT_STRING
  92+ CF4D F7                       RST     $30
  93+ CF4E 24                       DB      $24 ; ED-CFIX
  94+ CF4F              CHAR_READ:
  95+ CF4F F7                       RST     $30
  96+ CF50 A1                       DB      $A1 ; ED-CHIN
  97+ CF51 79                       LD      A,C
  98+ CF52 FE 0D                    CP      $0D
  99+ CF54 28 F1                    JR      z,CLI_LOOP
 100+ CF56 FE 20                    CP      $20
 101+ CF58 28 F5                    JR      z,CHAR_READ
 102+ CF5A FE 1B                    CP      $1B ; Exit on ESC
 103+ CF5C CA 0E D1                 JP      z,CMD_ESC
 104+ CF5F 21 26 0D                 LD      HL,CHINPUT_BUFFER
 105+ CF62 77                       LD      (HL),A
 106+ CF63 23                       INC     HL
 107+ CF64              LINE_READ_LOOP:
 108+ CF64 F7                       RST     $30
 109+ CF65 A1                       DB      $A1
 110+ CF66 79                       LD      a,c
 111+ CF67 FE 0D                    CP      $0D
 112+ CF69 28 07                    JR      z,LINE_DONE
 113+ CF6B 77                       LD      (hl),a
 114+ CF6C 23                       INC     hl
 115+ CF6D 7D                       LD      a,l
 116+ CF6E FE 56                    CP      $26+$30 ; $0D26 -> $0D56
 117+ CF70 20 F2                    JR      nz,LINE_READ_LOOP
 118+ CF72              LINE_DONE:
 119+ CF72 AF                       XOR     a
 120+ CF73 77                       LD      (hl),a
 121+ CF74 21 6D CC                 LD      hl,COMMAND_RECS
 122+ CF77 11 26 0D                 LD      de,CHINPUT_BUFFER
 123+ CF7A E5                       PUSH    hl
 124+ CF7B 23                       INC     hl
 125+ CF7C 23                       INC     hl
 126+ CF7D              CMD_CHECK_LOOP:
 127+ CF7D 7E                       LD      A,(HL)
 128+ CF7E FE 00                    CP      $00
 129+ CF80 28 23                    JR      z,COMMAND_FOUND
 130+ CF82 1A                       LD      A,(DE)
 131+ CF83 FE 00                    CP      $00
 132+ CF85 28 0D                    JR      z,CHECK_NEXT_CMD
 133+ CF87 FE 60                    CP      $60
 134+ CF89 38 02                    JR      c,UPPER_CASE
 135+ CF8B E6 DF                    AND     11011111B
 136+ CF8D              UPPER_CASE:
 137+ CF8D BE                       CP      (hl)
 138+ CF8E 20 04                    JR      nz,CHECK_NEXT_CMD
 139+ CF90 23                       INC     hl
 140+ CF91 13                       INC     de
 141+ CF92 18 E9                    JR      CMD_CHECK_LOOP
 142+ CF94              CHECK_NEXT_CMD:
 143+ CF94 E1                       POP     hl
 144+ CF95 11 08 00                 LD      de,$0008
 145+ CF98 19                       ADD     hl,de
 146+ CF99 E5                       PUSH    hl
 147+ CF9A 7E                       LD      a,(hl)
 148+ CF9B 23                       INC     hl
 149+ CF9C B6                       OR      (hl)
 150+ CF9D 28 0E                    JR      z,COMMAND_NOT_FOUND
 151+ CF9F 23                       INC     hl
 152+ CFA0 11 26 0D                 LD      de,CHINPUT_BUFFER
 153+ CFA3 18 D8                    JR      CMD_CHECK_LOOP
 154+ CFA5              COMMAND_FOUND:
 155+ CFA5 E1                       POP     hl
 156+ CFA6 D5                       PUSH    DE
 157+ CFA7 5E                       LD      e,(hl)
 158+ CFA8 23                       INC     hl
 159+ CFA9 56                       LD      d,(hl)
 160+ CFAA EB                       EX      de,hl
 161+ CFAB D1                       POP     DE
 162+ CFAC E9                       JP      (hl)
 163+ CFAD              COMMAND_NOT_FOUND:
 164+ CFAD E1                       POP     hl
 165+ CFAE 21 23 D2                 LD      hl,COMMAND_NOT_FOUND_STR
 166+ CFB1 CD FB D8                 CALL    PRINT_STRING
 167+ CFB4 C3 47 CF                 JP      CLI_LOOP
 168+ CFB7
 169+ CFB7              CMD_HELP:
 170+ CFB7 21 DF CC                 LD      HL,HELP_CSTR
 171+ CFBA CD 07 D9                 CALL    PRINT_CSTRING
 172+ CFBD 18 88                    JR      CLI_LOOP
 173+ CFBF              CMD_DIRWIDE:
 174+ CFBF D9                       EXX      ; C' can be safely used in an EXT function
 175+ CFC0 0E 00                    LD      C,0
 176+ CFC2 D9                       EXX
 177+ CFC3 18 04                    JR      AFTER_WIDENESS
 178+ CFC5              CMD_DIR:
 179+ CFC5 D9                       EXX
 180+ CFC6 0E 01                    LD      C,1
 181+ CFC8 D9                       EXX
 182+ CFC9              AFTER_WIDENESS:
 183+ CFC9 11 26 0D                 LD      DE,CHINPUT_BUFFER
 184+ CFCC F7                       RST     $30
 185+ CFCD D7                       DB      F_DIRFIRST
 186+ CFCE              DIR_REPLY_LOOP:
 187+ CFCE B7                       OR      A
 188+ CFCF 28 14                    JR      z,PROCESS_ONE_DIR_REC
 189+ CFD1 FE 01                    CP      1
 190+ CFD3 CA 8C D0                 JP      z,DIR_READ_DONE
 191+ CFD6 21 6D D2                 LD      HL,DIR_READ_FAILURE_STR
 192+ CFD9 CD FB D8                 CALL    PRINT_STRING
 193+ CFDC CD 19 D9                 CALL    PRINT_HEX_BYTE
 194+ CFDF CD 14 D9                 CALL    PRINT_NEWLINE
 195+ CFE2 C3 47 CF                 JP      CLI_LOOP
 196+ CFE5              PROCESS_ONE_DIR_REC:
 197+ CFE5 CD C9 D1                 CALL    IS_IT_WIDE_DIR ; z is set if yes
NanoSDROM_CLI.a80(198): error: Label not found: skip_open_brace
NanoSDROM_CLI.a80(198): error: [JR] Target out of range (-53226)
 198+ CFE8 20 00                    JR      nz,skip_open_brace
 199+ CFEA 3A 32 0D                 LD      A,(CHINPUT_BUFFER+12)
 200+ CFED B7                       OR      A
NanoSDROM_CLI.a80(201): error: Label not found: skip_open_brace
NanoSDROM_CLI.a80(201): error: [JR] Target out of range (-53232)
 201+ CFEE 20 00                    JR      nz,skip_open_brace ; not a directory
 202+ CFF0 0E 5B                    LD      C,"["
 203+ CFF2 F7                       RST     $30
 204+ CFF3 21                       DB      F_EDCHOUT
 205+ CFF4              SKIP_OPEN_BRACE:
 206+ CFF4 06 0C                    LD      B,12
 207+ CFF6 21 26 0D                 LD      HL,CHINPUT_BUFFER
 208+ CFF9              DIR_ENTRY_NAME_LOOP:
 209+ CFF9 7E                       LD      A,(HL)
 210+ CFFA FE 20                    CP      $20 ; this is padding, SPC is not allowed in 8.3 filenames
 211+ CFFC 28 08                    JR      z,SPACE_FOUND
 212+ CFFE C5                       PUSH    BC
 213+ CFFF CD 36 D9                 CALL    PRINT_CHAR
 214+ D002 C1                       POP     BC
 215+ D003 23                       INC     HL
 216+ D004 10 F3                    DJNZ    DIR_ENTRY_NAME_LOOP
 217+ D006              SPACE_FOUND:
 218+ D006 C5                       PUSH    BC
 219+ D007 CD C9 D1                 CALL    IS_IT_WIDE_DIR ; z is set if yes
NanoSDROM_CLI.a80(220): error: Label not found: skip_close_brace
NanoSDROM_CLI.a80(220): error: [JR] Target out of range (-53260)
 220+ D00A 20 00                    JR      nz,skip_close_brace
 221+ D00C 3A 32 0D                 LD      a,(CHINPUT_BUFFER+12)
 222+ D00F B7                       OR      A
NanoSDROM_CLI.a80(223): error: Label not found: skip_close_brace
NanoSDROM_CLI.a80(223): error: [JR] Target out of range (-53266)
 223+ D010 20 00                    JR      nz,skip_close_brace ; it is a file
 224+ D012 0E 5D                    LD      c,"]"
 225+ D014 F7                       RST     $30
 226+ D015 21                       DB      F_EDCHOUT
 227+ D016              SKIP_CLOSE_BRACE:
 228+ D016 C1                       POP     BC
 229+ D017 AF                       XOR     a
 230+ D018 B8                       CP      b
 231+ D019 28 08                    JR      z,FULLY_PRINTED
 232+ D01B 0E 20                    LD      c,$20
 233+ D01D              RIGHT_PAD:
 234+ D01D C5                       PUSH    bc
 235+ D01E F7                       RST     $30
 236+ D01F 21                       DB      F_EDCHOUT
 237+ D020 C1                       POP     bc
 238+ D021 10 FA                    DJNZ    RIGHT_PAD
 239+ D023              FULLY_PRINTED:
 240+ D023 0E 09                    LD      C,09
 241+ D025 F7                       RST     $30
 242+ D026 21                       DB      F_EDCHOUT
 243+ D027 CD C9 D1                 CALL    IS_IT_WIDE_DIR ; z is set if yes
 244+ D02A 28 26                    JR      z,END_OF_DIR_ENTRY_NO_NL
 245+ D02C 3A 32 0D                 LD      A,(CHINPUT_BUFFER+12)
 246+ D02F B7                       OR      A
 247+ D030 20 08                    JR      nz,FILE_TYPE
 248+ D032 21 87 D2                 LD      hl,TYPE_DIR_STR
 249+ D035 CD FB D8                 CALL    PRINT_STRING
 250+ D038 18 15                    JR      END_OF_DIR_ENTRY
 251+ D03A              FILE_TYPE:
 252+ D03A 2A 35 0D                 LD      HL,(CHINPUT_BUFFER+15)
 253+ D03D 7D                       LD      A,L
 254+ D03E B4                       OR      H
 255+ D03F 20 08                    JR      nz,LARGE_FILE
 256+ D041              NORMAL_SIZED_FILE:
 257+ D041 2A 33 0D                 LD      HL,(CHINPUT_BUFFER+13)
 258+ D044 CD 42 D9                 CALL    PRINT_16BIT_DECIMAL_NUMBER
 259+ D047 18 06                    JR      END_OF_DIR_ENTRY
 260+ D049              LARGE_FILE:
 261+ D049 21 8D D2                 LD      HL,LARGE_SIZE_STR
 262+ D04C CD FB D8                 CALL    PRINT_STRING
 263+ D04F              END_OF_DIR_ENTRY:
 264+ D04F CD 14 D9                 CALL    PRINT_NEWLINE
 265+ D052              END_OF_DIR_ENTRY_NO_NL:
 266+ D052 3A 16 0B                 LD      A,($0B16) ; check CTRL-ESC
 267+ D055 FE FF                    CP      $FF
 268+ D057 20 19                    JR      nz,KEEP_ON_READING
 269+ D059 CD C9 D1                 CALL    IS_IT_WIDE_DIR
 270+ D05C CC 14 D9                 CALL    z,PRINT_NEWLINE
 271+ D05F AF                       XOR     A
 272+ D060 32 16 0B                 LD      ($0B16),A
 273+ D063 32 E5 0B                 LD      ($0BE5),A
 274+ D066 21 28 D3                 LD      HL,DIR_BROKE_STR
 275+ D069 CD FB D8                 CALL    PRINT_STRING
 276+ D06C AF                       XOR     A
 277+ D06D F7                       RST     $30
 278+ D06E 58                       DB      F_DIRNEXT - $80 ; breaks the iteration
 279+ D06F C3 47 CF                 JP      CLI_LOOP
 280+ D072              KEEP_ON_READING:
 281+ D072              ; Check if CTRL is down
 282+ D072 3A E8 0B                 LD      a,($0BE8)
 283+ D075 FE 04                    CP      $04
 284+ D077 20 0B                    JR      nz,SKIP_CTRL_PRESS_WAIT
 285+ D079 21 F4 01                 LD      HL,500
 286+ D07C              CTRL_WAIT_LOOP:
NanoSDROM_CLI.a80(287): error: Label not found: wait_1ms
 287+ D07C CD 00 00                 CALL    wait_1ms
 288+ D07F 2B                       DEC     HL
 289+ D080 7D                       LD      A,L
 290+ D081 B4                       OR      H
 291+ D082 20 F8                    JR      nz,CTRL_WAIT_LOOP
 292+ D084              SKIP_CTRL_PRESS_WAIT:
 293+ D084 11 26 0D                 LD      DE,CHINPUT_BUFFER
 294+ D087 F7                       RST     $30
 295+ D088 D8                       DB      F_DIRNEXT
 296+ D089 C3 CE CF                 JP      DIR_REPLY_LOOP
 297+ D08C
 298+ D08C              DIR_READ_DONE:
 299+ D08C CD C9 D1                 CALL    IS_IT_WIDE_DIR
 300+ D08F CC 14 D9                 CALL    z,PRINT_NEWLINE
 301+ D092 C3 47 CF                 JP      CLI_LOOP
 302+ D095
 303+ D095              CMD_CD:
 304+ D095 1A                       LD      a,(DE)
 305+ D096 FE 20                    CP      $20
 306+ D098 28 2E                    JR      z,CD_PARAM
 307+ D09A              CMD_PWD:
 308+ D09A DD 4E 00                 LD      C,(IX+0)
 309+ D09D 3E 07                    LD      a,SDISK_NANO_CMD_GETCDIR
 310+ D09F ED 79                    OUT     (C),A
NanoSDROM_CLI.a80(311): error: Label not found: WAIT_100us
 311+ D0A1 CD 00 00                 CALL    WAIT_100us
 312+ D0A4 ED 78                    IN      A,(C) ; let's drop the first response
 313+ D0A6              CDIR_LOOP:
NanoSDROM_CLI.a80(314): error: Label not found: WAIT_100us
 314+ D0A6 CD 00 00                 CALL    WAIT_100us
 315+ D0A9 ED 78                    IN      A,(C)
 316+ D0AB F2 B5 D0                 JP      p,CDIR_READY ; 10T
 317+ D0AE FE 80                    CP      RETVAL_DATA_NOT_READY_YET
 318+ D0B0 28 F4                    JR      z,CDIR_LOOP
 319+ D0B2 C3 B3 D1                 JP      IO_ERROR
 320+ D0B5              CDIR_READY:
 321+ D0B5 47                       LD      b,a ; 4T
 322+ D0B6              CDIR_READ_LOOP:
 323+ D0B6 CD 83 D8                 CALL    WAIT_27T
 324+ D0B9 C5                       PUSH    BC
 325+ D0BA ED 78                    IN      A,(C)
 326+ D0BC CD 36 D9                 CALL    PRINT_CHAR
 327+ D0BF C1                       POP     BC
 328+ D0C0 10 F4                    DJNZ    CDIR_READ_LOOP
 329+ D0C2 CD 14 D9                 CALL    PRINT_NEWLINE
 330+ D0C5 C3 47 CF                 JP      CLI_LOOP
 331+ D0C8              CD_PARAM:
 332+ D0C8 13                       INC     DE
 333+ D0C9 1A                       LD      A,(DE)
 334+ D0CA FE 20                    CP      $20
 335+ D0CC 28 FA                    JR      z,CD_PARAM
 336+ D0CE FE 00                    CP      $00
 337+ D0D0 28 C3                    JR      z,CMD_CD ; end of paramstr reached, no param found
 338+ D0D2 DD 4E 00                 LD      C,(IX+0)
 339+ D0D5 3E 02                    LD      A,SDISK_NANO_CMD_CHDIR
 340+ D0D7 ED 79                    OUT     (C),A ; CDIR command sent
NanoSDROM_CLI.a80(341): error: Label not found: WAIT_100us
 341+ D0D9 CD 00 00                 CALL    WAIT_100us
 342+ D0DC ED 78                    IN      A,(C) ; let's drop the first response
NanoSDROM_CLI.a80(343): warning: Label has different value in pass 3: previous value 55244 not equal 53470
 343+ D0DE              PATH_SEND_LOOP:
NanoSDROM_CLI.a80(344): error: Label not found: WAIT_100us
 344+ D0DE CD 00 00                 CALL    WAIT_100us
 345+ D0E1 1A                       LD      A,(DE)
 346+ D0E2 ED 79                    OUT     (C),A
 347+ D0E4 B7                       OR      A
NanoSDROM_CLI.a80(348): error: [JR] Target out of range (+1777)
 348+ D0E5 28 00                    JR      z,SEND_PATH_CLOSE
 349+ D0E7 13                       INC     DE
 350+ D0E8 18 F4                    JR      PATH_SEND_LOOP
NanoSDROM_CLI.a80(351): warning: Label has different value in pass 3: previous value 55256 not equal 53482
 351+ D0EA              SEND_PATH_CLOSE:
 352+ D0EA 11 F4 01                 LD      DE,500
NanoSDROM_CLI.a80(353): warning: Label has different value in pass 3: previous value 55101 not equal 53485
 353+ D0ED              WAIT_FOR_CD_RESPONSE:
NanoSDROM_CLI.a80(354): error: Label not found: WAIT_1ms
 354+ D0ED CD 00 00                 CALL    WAIT_1ms
 355+ D0F0 ED 78                    IN      A,(C)
 356+ D0F2 FE 8C                    CP      RETVAL_CHDIR_OK
 357+ D0F4 21 59 D2                 LD      HL,CD_OK_STR
NanoSDROM_CLI.a80(358): error: [JR] Target out of range (+1628)
 358+ D0F7 28 00                    JR      z,CD_EXIT
 359+ D0F9 FE 8D                    CP      RETVAL_CHDIR_FAILED
 360+ D0FB 21 61 D2                 LD      HL,CD_NOK_STR
NanoSDROM_CLI.a80(361): error: [JR] Target out of range (+1621)
 361+ D0FE 28 00                    JR      z,CD_EXIT
 362+ D100 1B                       DEC     DE
 363+ D101 7A                       LD      A,D
 364+ D102 B3                       OR      E
 365+ D103
 366+ D103 20 E8                    JR      nz,WAIT_FOR_CD_RESPONSE
 367+ D105 21 42 D2                 LD      HL,TIMEOUT_STR
NanoSDROM_CLI.a80(368): warning: Label has different value in pass 3: previous value 55125 not equal 53512
 368+ D108              CD_EXIT:
 369+ D108 CD FB D8                 CALL    PRINT_STRING
 370+ D10B C3 47 CF                 JP      CLI_LOOP
 371+ D10E
 372+ D10E              CMD_ESC:
 373+ D10E AF                       XOR     A
 374+ D10F 32 16 0B                 LD      ($0B16),A
 375+ D112 32 E5 0B                 LD      ($0BE5),A
 376+ D115 CD 14 D9                 CALL    PRINT_NEWLINE
 377+ D118              CMD_EXIT:
 378+ D118 C9                       RET
 379+ D119
 380+ D119              CMD_MKDIR:
 381+ D119 1A                       LD      a,(DE)
 382+ D11A FE 20                    CP      $20
 383+ D11C C2 85 D1                 JP      nz,MISSING_PARAM
 384+ D11F 13                       INC     de
 385+ D120 1A                       LD      a,(DE)
 386+ D121 B7                       OR      a
 387+ D122 CA 85 D1                 JP      z,MISSING_PARAM
 388+ D125 F7                       RST     $30
 389+ D126 5A                       DB      F_MKDIR+$50
 390+ D127 21 A8 D2                 LD      HL,MKDIR_OK_STR
 391+ D12A B7                       OR      A
 392+ D12B 28 0A                    JR      z,MKDIR_DONE
 393+ D12D FE F1                    CP      $F1
 394+ D12F 21 BC D2                 LD      HL,MKDIR_NOK_STR
 395+ D132 28 03                    JR      z,MKDIR_DONE
 396+ D134 21 42 D2                 LD      HL,TIMEOUT_STR
 397+ D137              MKDIR_DONE:
 398+ D137 CD FB D8                 CALL    PRINT_STRING
 399+ D13A C3 47 CF                 JP      CLI_LOOP
 400+ D13D              CMD_RMDIR:
 401+ D13D 1A                       LD      a,(DE)
 402+ D13E FE 20                    CP      $20
 403+ D140 C2 85 D1                 JP      nz,MISSING_PARAM
 404+ D143 13                       INC     de
 405+ D144 1A                       LD      a,(DE)
 406+ D145 B7                       OR      a
 407+ D146 CA 85 D1                 JP      z,MISSING_PARAM
 408+ D149 F7                       RST     $30
 409+ D14A 5B                       DB      F_RMDIR+$50
 410+ D14B 21 D6 D2                 LD      HL,RMDIR_OK_STR
 411+ D14E B7                       OR      A
 412+ D14F 28 0A                    JR      z,RMDIR_DONE
 413+ D151 FE F1                    CP      $F1
 414+ D153 21 EA D2                 LD      HL,RMDIR_NOK_STR
 415+ D156 28 03                    JR      z,RMDIR_DONE
 416+ D158 21 42 D2                 LD      HL,TIMEOUT_STR
 417+ D15B              RMDIR_DONE:
 418+ D15B CD FB D8                 CALL    PRINT_STRING
 419+ D15E C3 47 CF                 JP      CLI_LOOP
 420+ D161
 421+ D161              CMD_DEL:
 422+ D161 1A                       LD      a,(DE)
 423+ D162 FE 20                    CP      $20
 424+ D164 C2 85 D1                 JP      nz,MISSING_PARAM
 425+ D167 13                       INC     de
 426+ D168 1A                       LD      a,(DE)
 427+ D169 B7                       OR      a
 428+ D16A CA 85 D1                 JP      z,MISSING_PARAM
 429+ D16D F7                       RST     $30
 430+ D16E 5C                       DB      F_DELETE+$50
 431+ D16F 21 04 D3                 LD      HL,DELETE_OK_STR
 432+ D172 B7                       OR      A
 433+ D173 28 0A                    JR      z,DELETE_DONE
 434+ D175 21 13 D3                 LD      HL,DELETE_NOK_STR
 435+ D178 FE F1                    CP      $F1
 436+ D17A 28 03                    JR      z,DELETE_DONE
 437+ D17C 21 42 D2                 LD      HL,TIMEOUT_STR
 438+ D17F              DELETE_DONE:
 439+ D17F CD FB D8                 CALL    PRINT_STRING
 440+ D182 C3 47 CF                 JP      CLI_LOOP
 441+ D185
 442+ D185              MISSING_PARAM:
 443+ D185 21 93 D2                 LD      HL,MISSING_PARAM_STR
 444+ D188 CD FB D8                 CALL    PRINT_STRING
 445+ D18B C3 47 CF                 JP      CLI_LOOP
 446+ D18E
 447+ D18E              CMD_VER:
 448+ D18E 21 EB D1                 LD      HL,CLI_VER_STR
 449+ D191 CD FB D8                 CALL    PRINT_STRING
 450+ D194 11 26 0D                 ld      DE,CHINPUT_BUFFER
 451+ D197 0E 03                    LD      C,3
 452+ D199 F7                       RST     $30
 453+ D19A DD                       DB      F_GETPARAM
 454+ D19B BF                       CP      A
 455+ D19C C2 A6 D1                 JP      nz,VER_DONE
 456+ D19F EB                       EX      DE,HL
 457+ D1A0 CD 07 D9                 CALL    PRINT_CSTRING
 458+ D1A3 CD 14 D9                 CALL    PRINT_NEWLINE
 459+ D1A6              VER_DONE:
 460+ D1A6 C3 47 CF                 JP      CLI_LOOP
 461+ D1A9              CMD_CLS:
 462+ D1A9 F7                       RST     $30
 463+ D1AA 05                       DB      $05
 464+ D1AB 01 01 01                 LD      BC,$0101
 465+ D1AE F7                       RST     $30
 466+ D1AF 23                       DB      F_EDCPOS
 467+ D1B0 C3 47 CF                 JP      CLI_LOOP
 468+ D1B3
 469+ D1B3              IO_ERROR:
 470+ D1B3 F5                       PUSH    AF
 471+ D1B4 21 37 D2                 LD      HL,IO_ERROR_STR
 472+ D1B7 CD FB D8                 CALL    PRINT_STRING
 473+ D1BA F1                       POP     AF
 474+ D1BB CD 19 D9                 CALL    PRINT_HEX_BYTE
 475+ D1BE 3E 68                    LD      A,"h"
 476+ D1C0 CD 36 D9                 CALL    PRINT_CHAR
 477+ D1C3 CD 14 D9                 CALL    PRINT_NEWLINE
 478+ D1C6 C3 47 CF                 JP      CLI_LOOP
 479+ D1C9
 480+ D1C9              IS_IT_WIDE_DIR:      ; z is set if yes
 481+ D1C9 D9                       EXX
 482+ D1CA 79                       LD      A,C
 483+ D1CB B7                       OR      A
 484+ D1CC D9                       EXX
 485+ D1CD C9                       RET
 486+ D1CE
 487+ D1CE              CLI_HDR_STR:
 488+ D1CE                      PSTR   "** NanoSD IO Card - CLI **\r\n"
 488+ D1CE 1C          >        BYTE .endstr-.startstr
 488+ D1CF             >.startstr
 488+ D1CF 2A 2A 20 4E >        BYTE "** NanoSD IO Card - CLI **\r\n"
 488+ D1D3 61 6E 6F 53 >
 488+ D1D7 44 20 49 4F >
 488+ D1DB 20 43 61 72 >
 488+ D1DF 64 20 2D 20 >
 488+ D1E3 43 4C 49 20 >
 488+ D1E7 2A 2A 0D 0A >
 488+ D1EB             >.endstr
 489+ D1EB
 490+ D1EB              CLI_VER_STR:
 491+ D1EB                      PSTR   "NanoSD IO Card ROM v" + BUILDVER + "\r\n"
 491+ D1EB 14          >        BYTE .endstr-.startstr
 491+ D1EC             >.startstr
NanoSDROM.a80(281): error: Unexpected: + BUILDVER + "\r\n"
NanoSDROM_CLI.a80(491): ^ emitted from here
 491+ D1EC 4E 61 6E 6F >        BYTE "NanoSD IO Card ROM v" + BUILDVER + "\r\n"
 491+ D1F0 53 44 20 49 >
 491+ D1F4 4F 20 43 61 >
 491+ D1F8 72 64 20 52 >
 491+ D1FC 4F 4D 20 76 >
 491+ D200             >.endstr
 492+ D200              CLI_THELP_STR:
 493+ D200                      PSTR   "Type HELP for available cmds!\r\n"
 493+ D200 1F          >        BYTE .endstr-.startstr
 493+ D201             >.startstr
 493+ D201 54 79 70 65 >        BYTE "Type HELP for available cmds!\r\n"
 493+ D205 20 48 45 4C >
 493+ D209 50 20 66 6F >
 493+ D20D 72 20 61 76 >
 493+ D211 61 69 6C 61 >
 493+ D215 62 6C 65 20 >
 493+ D219 63 6D 64 73 >
 493+ D21D 21 0D 0A    >
 493+ D220             >.endstr
 494+ D220
 495+ D220              PROMPT_STR:
 496+ D220                      PSTR   "> "
 496+ D220 02          >        BYTE .endstr-.startstr
 496+ D221             >.startstr
 496+ D221 3E 20       >        BYTE "> "
 496+ D223             >.endstr
 497+ D223
 498+ D223              COMMAND_NOT_FOUND_STR:
 499+ D223                      PSTR   "Command not found\r\n"
 499+ D223 13          >        BYTE .endstr-.startstr
 499+ D224             >.startstr
 499+ D224 43 6F 6D 6D >        BYTE "Command not found\r\n"
 499+ D228 61 6E 64 20 >
 499+ D22C 6E 6F 74 20 >
 499+ D230 66 6F 75 6E >
 499+ D234 64 0D 0A    >
 499+ D237             >.endstr
 500+ D237              IO_ERROR_STR:
 501+ D237                      PSTR   "IO ERROR: "
 501+ D237 0A          >        BYTE .endstr-.startstr
 501+ D238             >.startstr
 501+ D238 49 4F 20 45 >        BYTE "IO ERROR: "
 501+ D23C 52 52 4F 52 >
 501+ D240 3A 20       >
 501+ D242             >.endstr
 502+ D242              TIMEOUT_STR:
 503+ D242                      PSTR   "Operaton timed out..\r\n"
 503+ D242 16          >        BYTE .endstr-.startstr
 503+ D243             >.startstr
 503+ D243 4F 70 65 72 >        BYTE "Operaton timed out..\r\n"
 503+ D247 61 74 6F 6E >
 503+ D24B 20 74 69 6D >
 503+ D24F 65 64 20 6F >
 503+ D253 75 74 2E 2E >
 503+ D257 0D 0A       >
 503+ D259             >.endstr
 504+ D259              CD_OK_STR:
 505+ D259                      PSTR   "CD OK\r\n"
 505+ D259 07          >        BYTE .endstr-.startstr
 505+ D25A             >.startstr
 505+ D25A 43 44 20 4F >        BYTE "CD OK\r\n"
 505+ D25E 4B 0D 0A    >
 505+ D261             >.endstr
 506+ D261              CD_NOK_STR:
 507+ D261                      PSTR   "CD Failed\r\n"
 507+ D261 0B          >        BYTE .endstr-.startstr
 507+ D262             >.startstr
 507+ D262 43 44 20 46 >        BYTE "CD Failed\r\n"
 507+ D266 61 69 6C 65 >
 507+ D26A 64 0D 0A    >
 507+ D26D             >.endstr
 508+ D26D              DIR_READ_FAILURE_STR:
 509+ D26D                      PSTR   "Error reading directory: "
 509+ D26D 19          >        BYTE .endstr-.startstr
 509+ D26E             >.startstr
 509+ D26E 45 72 72 6F >        BYTE "Error reading directory: "
 509+ D272 72 20 72 65 >
 509+ D276 61 64 69 6E >
 509+ D27A 67 20 64 69 >
 509+ D27E 72 65 63 74 >
 509+ D282 6F 72 79 3A >
 509+ D286 20          >
 509+ D287             >.endstr
 510+ D287              TYPE_DIR_STR:
 511+ D287                      PSTR   "<DIR>"
 511+ D287 05          >        BYTE .endstr-.startstr
 511+ D288             >.startstr
 511+ D288 3C 44 49 52 >        BYTE "<DIR>"
 511+ D28C 3E          >
 511+ D28D             >.endstr
 512+ D28D              LARGE_SIZE_STR:
 513+ D28D                      PSTR   "64+kB"
 513+ D28D 05          >        BYTE .endstr-.startstr
 513+ D28E             >.startstr
 513+ D28E 36 34 2B 6B >        BYTE "64+kB"
 513+ D292 42          >
 513+ D293             >.endstr
 514+ D293              MISSING_PARAM_STR:
 515+ D293                      PSTR   "Missing parameter!\r\n"
 515+ D293 14          >        BYTE .endstr-.startstr
 515+ D294             >.startstr
 515+ D294 4D 69 73 73 >        BYTE "Missing parameter!\r\n"
 515+ D298 69 6E 67 20 >
 515+ D29C 70 61 72 61 >
 515+ D2A0 6D 65 74 65 >
 515+ D2A4 72 21 0D 0A >
 515+ D2A8             >.endstr
 516+ D2A8              MKDIR_OK_STR:
 517+ D2A8                      PSTR   "Directory created\r\n"
 517+ D2A8 13          >        BYTE .endstr-.startstr
 517+ D2A9             >.startstr
 517+ D2A9 44 69 72 65 >        BYTE "Directory created\r\n"
 517+ D2AD 63 74 6F 72 >
 517+ D2B1 79 20 63 72 >
 517+ D2B5 65 61 74 65 >
 517+ D2B9 64 0D 0A    >
 517+ D2BC             >.endstr
 518+ D2BC              MKDIR_NOK_STR:
 519+ D2BC                      PSTR   "Directory create failed\r\n"
 519+ D2BC 19          >        BYTE .endstr-.startstr
 519+ D2BD             >.startstr
 519+ D2BD 44 69 72 65 >        BYTE "Directory create failed\r\n"
 519+ D2C1 63 74 6F 72 >
 519+ D2C5 79 20 63 72 >
 519+ D2C9 65 61 74 65 >
 519+ D2CD 20 66 61 69 >
 519+ D2D1 6C 65 64 0D >
 519+ D2D5 0A          >
 519+ D2D6             >.endstr
 520+ D2D6              RMDIR_OK_STR:
 521+ D2D6                      PSTR   "Directory removed\r\n"
 521+ D2D6 13          >        BYTE .endstr-.startstr
 521+ D2D7             >.startstr
 521+ D2D7 44 69 72 65 >        BYTE "Directory removed\r\n"
 521+ D2DB 63 74 6F 72 >
 521+ D2DF 79 20 72 65 >
 521+ D2E3 6D 6F 76 65 >
 521+ D2E7 64 0D 0A    >
 521+ D2EA             >.endstr
 522+ D2EA              RMDIR_NOK_STR:
 523+ D2EA                      PSTR   "Directory remove failed\r\n"
 523+ D2EA 19          >        BYTE .endstr-.startstr
 523+ D2EB             >.startstr
 523+ D2EB 44 69 72 65 >        BYTE "Directory remove failed\r\n"
 523+ D2EF 63 74 6F 72 >
 523+ D2F3 79 20 72 65 >
 523+ D2F7 6D 6F 76 65 >
 523+ D2FB 20 66 61 69 >
 523+ D2FF 6C 65 64 0D >
 523+ D303 0A          >
 523+ D304             >.endstr
 524+ D304              DELETE_OK_STR:
 525+ D304                      PSTR   "File deleted\r\n"
 525+ D304 0E          >        BYTE .endstr-.startstr
 525+ D305             >.startstr
 525+ D305 46 69 6C 65 >        BYTE "File deleted\r\n"
 525+ D309 20 64 65 6C >
 525+ D30D 65 74 65 64 >
 525+ D311 0D 0A       >
 525+ D313             >.endstr
 526+ D313              DELETE_NOK_STR:
 527+ D313                      PSTR   "File delete failed\r\n"
 527+ D313 14          >        BYTE .endstr-.startstr
 527+ D314             >.startstr
 527+ D314 46 69 6C 65 >        BYTE "File delete failed\r\n"
 527+ D318 20 64 65 6C >
 527+ D31C 65 74 65 20 >
 527+ D320 66 61 69 6C >
 527+ D324 65 64 0D 0A >
 527+ D328             >.endstr
 528+ D328              DIR_BROKE_STR:
 529+ D328                      PSTR   "Dir interrupted ...\r\n"
 529+ D328 15          >        BYTE .endstr-.startstr
 529+ D329             >.startstr
 529+ D329 44 69 72 20 >        BYTE "Dir interrupted ...\r\n"
 529+ D32D 69 6E 74 65 >
 529+ D331 72 72 75 70 >
 529+ D335 74 65 64 20 >
 529+ D339 2E 2E 2E 0D >
 529+ D33D 0A          >
 529+ D33E             >.endstr
 530+ D33E
 531+ D33E
 532+ D33E
 533+ D33E
 534+ D33E
 535+ D33E
 536+ D33E
# file closed: NanoSDROM_CLI.a80
 300  D33E
 301  D33E                      INCLUDE "NanoSDROM_ISR.a80"
# file opened: NanoSDROM_ISR.a80
   1+ D33E              ; This  ISR should be called only at the boot process a few times until
   2+ D33E              ; the area of USR-TAB cleared by the OS. When it's done, the ISR updates
   3+ D33E              ; the EXT0 vector and cleaers itself out of the way.
   4+ D33E              ; The reason for this, that most of the initialization routines executed
   5+ D33E              ; AFTER the card's INIT routine.
   6+ D33E
   7+ D33E              ; INPUT registers
   8+ D33E              ; A - latest PORT03
   9+ D33E              ; B - orig PORT03
  10+ D33E              ; C - IO CARD RAM in U0 (48, 78, A8, D8)
  11+ D33E              ; AF and BC already pushed onto stack by jumper code
  12+ D33E              ;
  13+ D33E              ; OUTPUT registers
  14+ D33E              ; C - must contain $03
  15+ D33E              ; B - must contain the original PORT03_SHADOW value
  16+ D33E              ; A - must contain the original PORT02_SHADOW value
  17+ D33E
  18+ D33E              INTERRUPT_HANDLER:
  19+ D33E E5                       PUSH    HL
  20+ D33F D5                       PUSH    DE
  21+ D340 3A FB 1F                 LD      a,(KEY_PRESS_IDX) ; filled with non-FF value if LOAD on-the-way
  22+ D343 FE FF                    CP      $FF
  23+ D345 20 37                    JR      nz,SKIP_REVERT
  24+ D347 2A 21 00                 LD      hl,($0021) ; let's wait until 0021 is zeroed
  25+ D34A 7C                       LD      a,h
  26+ D34B B5                       OR      l
  27+ D34C 20 4E                    JR      nz,SKIP_KEYBOARD_BUF_FILL
  28+ D34E
  29+ D34E              REVERT_ISR:
  30+ D34E 2A 00 00                 LD      HL,($0000) ; route back ISR
  31+ D351 22 3E 00                 LD      ($003e),HL
  32+ D354
  33+ D354 AF                       XOR     A ; let's call CLI_MAIN instead of ISR from the jump code
  34+ D355 67                       LD      H,A
  35+ D356 69                       LD      L,C
  36+ D357 11 16 00                 LD      DE,SUBROUTINTE_CALL - JUMPER_CODE_U0 + 1 + 2
  37+ D35A 19                       ADD     HL,DE
  38+ D35B 11 16 CF                 LD      DE,CLI_MAIN
  39+ D35E 73                       LD      (HL),E
  40+ D35F 23                       INC     HL
  41+ D360 72                       LD      (HL),D
  42+ D361
  43+ D361 67                       LD      H,A
  44+ D362 69                       LD      L,C
  45+ D363 11 22 00                 LD      DE,FINISH_JUMPER_CODE - JUMPER_CODE_U0 + 1 + 2
  46+ D366 19                       ADD     HL,DE
  47+ D367 11 41 0B                 LD      DE,$0B41
  48+ D36A 73                       LD      (HL),E
  49+ D36B 23                       INC     HL
  50+ D36C 72                       LD      (HL),D
  51+ D36D
  52+ D36D
  53+ D36D
  54+ D36D 57                       LD      D,A ; let's set EXT0 to our jump code
  55+ D36E 59                       LD      E,C
  56+ D36F 13                       INC     DE
  57+ D370 13                       INC     DE
  58+ D371 21 21 00                 LD      HL,$0021
  59+ D374 73                       LD      (HL),E
  60+ D375 23                       INC     HL
  61+ D376 72                       LD      (HL),D
  62+ D377
  63+ D377 3E FF                    ld a,$FF
  64+ D379 32 FB 1F                 ld (KEY_PRESS_IDX),A
  65+ D37C
  66+ D37C
  67+ D37C 18 1E                    jr SKIP_KEYBOARD_BUF_FILL
  68+ D37E
  69+ D37E              SKIP_REVERT:
  70+ D37E 3A E5 0B                 LD      A,($0BE5)
  71+ D381 B7                       OR      A ; check if kbd already read
  72+ D382 20 18                    JR      nz,SKIP_KEYBOARD_BUF_FILL ; if not - jump
  73+ D384 3D                       DEC A
  74+ D385 32 E5 0B                 LD      ($0BE5),A
  75+ D388 3A FB 1F                 LD      A,(KEY_PRESS_IDX)
  76+ D38B 21 00 1F                 LD      HL,AUTOLOAD_STR_BUFFER
  77+ D38E 85                       ADD     A,L
  78+ D38F 6F                       LD      L,A
  79+ D390 7E                       LD      a,(hl)
  80+ D391 32 E9 0B                 LD      ($0BE9),A
  81+ D394 FE 0D                    CP $0D                      ; last char check
  82+ D396 28 B6                    JR      z,REVERT_ISR
  83+ D398 21 FB 1F                 LD      HL,KEY_PRESS_IDX
  84+ D39B 34                       INC     (HL)
  85+ D39C
  86+ D39C              SKIP_KEYBOARD_BUF_FILL:
  87+ D39C D3 07                    OUT     ($07),A ; acknowledge INT req
  88+ D39E D1                       POP     DE
  89+ D39F E1                       POP     HL
  90+ D3A0 78                       LD      A,B
  91+ D3A1 32 11 0B                 LD      (PORT03_SHADOW),A
  92+ D3A4 0E 03                    LD      C,$03
  93+ D3A6 3A 03 00                 LD      A,(PORT02_SHADOW)
  94+ D3A9              INTERRUPT_HANDLER_EXIT:
  95+ D3A9 C9                       RET
  96+ D3AA
# file closed: NanoSDROM_ISR.a80
 302  D3AA
 303  D3AA                      INCLUDE "NanoSDROM_func_chrio.a80"
# file opened: NanoSDROM_func_chrio.a80
   1+ D3AA              CHARIO_HANDLER:
   2+ D3AA F2 24 D4                 JP      p,CHAR_OUT
   3+ D3AD CD 86 D8                 CALL    OPEN_FILE_4READ_CHECK
   4+ D3B0 C8                       RET     z
   5+ D3B1              ; check 0D0B, for the last error
   6+ D3B1 CD 96 D8                 CALL    FILE_READ_CHECK
   7+ D3B4 C0                       RET     nz
   8+ D3B5              CHARGET_NOCHECK:
   9+ D3B5 DD 4E 00                 LD      C,(IX+0)
  10+ D3B8 21 F4 0B                 LD      HL,AVAILABLE_FOR_GET
  11+ D3BB 7E                       LD      A,(HL) ; 7T
  12+ D3BC              CHECK_BUF_LEN:
  13+ D3BC B7                       OR      A ; 4T
  14+ D3BD 20 34                    JR      nz,GET_NEXT_CHAR ; 12T on jr, 7T on not jr
  15+ D3BF              ; first time data request: GETDATA
  16+ D3BF              INITIATE_FILL_NANO_BUFFER:
  17+ D3BF 3A 4F 0B                 LD      A,(BORDER_COLOR)
  18+ D3C2 D6 02                    SUB     2
  19+ D3C4 D3 00                    OUT     ($00),A
  20+ D3C6 3E 05                    LD      A,SDISK_NANO_CMD_GETDATA
  21+ D3C8 ED 79                    OUT     (C),A
NanoSDROM_func_chrio.a80(22): error: Label not found: WAIT_100us
  22+ D3CA CD 00 00                 CALL    WAIT_100us
  23+ D3CD ED 78                    IN      A,(C) ; let's drop the first response
  24+ D3CF
  25+ D3CF              CHARINPUT_CMD_LOOP:
NanoSDROM_func_chrio.a80(26): error: Label not found: WAIT_100us
  26+ D3CF CD 00 00                 CALL    WAIT_100us ; let's give some time to Nano to fill len + n byts in its buffer
  27+ D3D2 ED 78                    IN      A,(C)
  28+ D3D4 F2 F0 D3                 JP      p,DATA_AVAILABLE
  29+ D3D7 FE 83                    CP      RETVAL_END_OF_FILE
  30+ D3D9 28 0D                    JR      z,END_OF_FILE_READ
  31+ D3DB FE 89                    CP      RETVAL_BUFFER_UNDERRUN
  32+ D3DD 28 F0                    JR      z,CHARINPUT_CMD_LOOP
  33+ D3DF FE 80                    CP      RETVAL_DATA_NOT_READY_YET
  34+ D3E1 28 EC                    JR      z,CHARINPUT_CMD_LOOP
  35+ D3E3              END_OF_FILE_ERROR:
  36+ D3E3 3E EE                    LD      A,$EE
  37+ D3E5 32 0B 0D                 LD      ($0D0B),A
  38+ D3E8              END_OF_FILE_READ:
  39+ D3E8 3E FD                    LD      A,$fd
  40+ D3EA 32 6E 0B                 LD      (END_OF_FILE),A
  41+ D3ED B7                       OR      A
  42+ D3EE 18 2C                    JR      CHAR_IN_DONE
  43+ D3F0              DATA_AVAILABLE:
  44+ D3F0 77                       LD      (HL),A
  45+ D3F1 18 C9                    JR      CHECK_BUF_LEN ; in case the length of the buffer is 0, but there is
  46+ D3F3              GET_NEXT_CHAR:
  47+ D3F3 3A 4F 0B                 LD      A,(BORDER_COLOR)
  48+ D3F6 C6 02                    ADD     A,2
  49+ D3F8 D3 00                    OUT     ($00),A
  50+ D3FA 35                       DEC     (HL)
  51+ D3FB ED 78                    IN      A,(C)
  52+ D3FD 4F                       LD      C,A
  53+ D3FE              ; LOW 16 bits (2 bytes)
  54+ D3FE 2A 05 0D                 LD      HL,(REMAINING_BYTES)
  55+ D401 2B                       DEC     HL
  56+ D402 22 05 0D                 LD      (REMAINING_BYTES),HL
  57+ D405 7D                       LD      A,L
  58+ D406 B4                       OR      H
  59+ D407 20 12                    JR      nz,CHAR_IN_OK_DONE
  60+ D409              ; HIGH 16 bits (2 bytes)
  61+ D409              ;           upper two bytes are decremented one tick earlier
  62+ D409 2A 07 0D                 LD      HL,(REMAINING_BYTES+2)
  63+ D40C 2B                       DEC     HL
  64+ D40D 22 07 0D                 LD      (REMAINING_BYTES+2),HL
  65+ D410 7D                       LD      A,L
  66+ D411 A4                       AND     H
  67+ D412 FE FF                    CP      $FF
  68+ D414 20 05                    JR      nz,CHAR_IN_OK_DONE
  69+ D416 3E FF                    LD      A,$FF
  70+ D418 32 6E 0B                 LD      (END_OF_FILE),A
  71+ D41B              CHAR_IN_OK_DONE:
  72+ D41B AF                       XOR     A
  73+ D41C              CHAR_IN_DONE:
  74+ D41C F5                       PUSH    AF
  75+ D41D 3A 4F 0B                 LD      A,(BORDER_COLOR)
  76+ D420 D3 00                    OUT     ($00),A
  77+ D422 F1                       POP     AF
  78+ D423 C9                       RET
  79+ D424
  80+ D424
  81+ D424              CHAR_OUT:
  82+ D424 CD 8F D8                 CALL    OPEN_FILE_4WRITE_CHECK
  83+ D427 C8                       RET     z
  84+ D428 79                       LD      A,C
  85+ D429 DD 4E 00                 LD      C,(IX+0)
  86+ D42C 06 0B                    LD      B,SDISK_NANO_CMD_PUTDATA
  87+ D42E ED 41                    OUT     (C),B
  88+ D430 CD 83 D8                 CALL    WAIT_27T
  89+ D433 CD 83 D8                 CALL    WAIT_27T
  90+ D436 06 01                    LD      B,1
  91+ D438 ED 41                    OUT     (C),B
  92+ D43A CD 83 D8                 CALL    WAIT_27T
  93+ D43D CD 83 D8                 CALL    WAIT_27T
  94+ D440 ED 40                    IN      B,(C)       ; let's drop the first response
  95+ D442 CD 83 D8                 CALL    WAIT_27T
  96+ D445 CD 83 D8                 CALL    WAIT_27T
  97+ D448 ED 79                    OUT     (C),A
  98+ D44A CD 83 D8                 CALL    WAIT_27T
  99+ D44D
 100+ D44D              DS_WAIT_LOOP:
 101+ D44D CD 84 D8                 CALL    WAIT_39T
 102+ D450 ED 78                    IN      A,(C)
 103+ D452 FE 80                    CP      RETVAL_DATA_NOT_READY_YET
 104+ D454 28 F7                    JR      z,DS_WAIT_LOOP
 105+ D456 FE 91                    CP      RETVAL_DATA_RECEIVED
 106+ D458 28 02                    JR      z,CHAR_SENT
 107+ D45A B7                       OR      A
 108+ D45B C9                       RET
 109+ D45C              CHAR_SENT:
 110+ D45C AF                       XOR     A
 111+ D45D C9                       RET
 112+ D45E
 113+ D45E
 114+ D45E
 115+ D45E
 116+ D45E
 117+ D45E
 118+ D45E
 119+ D45E
# file closed: NanoSDROM_func_chrio.a80
 304  D45E                      INCLUDE "NanoSDROM_func_blkio.a80"
# file opened: NanoSDROM_func_blkio.a80
   1+ D45E              BLOCKIO_HANDLER:
   2+ D45E F2 9A D4                 JP      p,BLOCK_OUT
   3+ D461 CD 86 D8                 CALL    OPEN_FILE_4READ_CHECK
   4+ D464 C8                       RET     z
   5+ D465              BLOCKREAD_LOOP:
   6+ D465 C5                       PUSH BC
   7+ D466 D5                       push DE
   8+ D467 CD B5 D3                 call CHARGET_NOCHECK
   9+ D46A D1                       POP  DE
  10+ D46B 20 0B                    jr nz,CHARGET_FAILED
  11+ D46D 79                       ld a,c
  12+ D46E 12                       ld (de),a
  13+ D46F 13                       inc de
  14+ D470 C1                       pop bc
  15+ D471 0B                       dec bc
  16+ D472 78                       ld a,b
  17+ D473 B1                       or c
  18+ D474 20 EF                    jr nz,BLOCKREAD_LOOP
  19+ D476 AF                       xor A
  20+ D477 C9                       ret
  21+ D478              CHARGET_FAILED:
  22+ D478 C1                       pop BC
  23+ D479 D5                       PUSH DE
  24+ D47A C5                       PUSH BC
  25+ D47B 4F                       ld c,a
  26+ D47C 08                       EX AF,AF'
NanoSDROM_func_blkio.a80(27): error: Label not found: print_hex_byte
  27+ D47D CD 00 00                 call print_hex_byte
  28+ D480 21 0C D5                 ld hl,BC_STR
  29+ D483 CD FB D8                 call PRINT_STRING
  30+ D486 E1                       pop hl              ; BC in HL
  31+ D487 E5                       PUSH HL
NanoSDROM_func_blkio.a80(32): error: Label not found: print_16bit_decimal_number
  32+ D488 CD 00 00                 call print_16bit_decimal_number
  33+ D48B 21 0C D5                 ld hl,DE_STR
  34+ D48E CD FB D8                 call PRINT_STRING
  35+ D491 C1                       POP BC
  36+ D492 E1                       pop HL
NanoSDROM_func_blkio.a80(37): error: Label not found: print_16bit_decimal_number
  37+ D493 CD 00 00                 call print_16bit_decimal_number
  38+ D496 EB                       EX DE,HL
  39+ D497 08                       EX AF,AF'
  40+ D498 B7                       OR A
  41+ D499 C9                       ret
  42+ D49A
  43+ D49A              ; ==========================================================
  44+ D49A
  45+ D49A              BLOCK_OUT:
  46+ D49A CD 8F D8                 CALL    OPEN_FILE_4WRITE_CHECK
  47+ D49D C8                       RET     z
  48+ D49E
  49+ D49E              FULL_DATA_SEND_CYCLE:
  50+ D49E D5                       PUSH DE
  51+ D49F C5                       PUSH BC
  52+ D4A0              INNER_DATA_SEND_CYCLE:
  53+ D4A0 D5                       push DE
  54+ D4A1 60                       ld H,B
  55+ D4A2 69                       ld L,C      ; BC -> HL
  56+ D4A3 11 40 00                 ld DE,64
  57+ D4A6 AF                       xor A       ; clear C
  58+ D4A7 ED 52                    SBC HL,DE   ; HL=BC-64
  59+ D4A9 D1                       pop DE
  60+ D4AA 38 04                    jr c,LAST_BLOCK
  61+ D4AC 06 40                    ld B,64
  62+ D4AE 18 08                    jr SKIP_BLOCK_SET
  63+ D4B0              LAST_BLOCK:
  64+ D4B0 21 00 00                 ld HL,$0000 ; no more data to send
  65+ D4B3 41                       ld B,C      ; BC is less than 64, C contains the remaining bytes
  66+ D4B4 78                       ld A,B
  67+ D4B5 B7                       or A        ; is there anything at all?
  68+ D4B6 28 45                    jr z, WRITE_CYCLE_OK ; no need to send anything!
  69+ D4B8              SKIP_BLOCK_SET:
  70+ D4B8 3A 4F 0B                 ld a,(BORDER_COLOR)
  71+ D4BB C6 04                    add A,4
  72+ D4BD D3 00                    OUT ($00),A
  73+ D4BF
  74+ D4BF DD 4E 00                 ld C,(IX+0)
  75+ D4C2 3E 0B                    ld A,SDISK_NANO_CMD_PUTDATA
  76+ D4C4 ED 79                    OUT (C),A       ; send Command
  77+ D4C6 CD 84 D8                 call WAIT_39T
  78+ D4C9 ED 41                    OUT (C),B       ; size of BLOCK
  79+ D4CB CD 84 D8                 CALL WAIT_39T
  80+ D4CE ED 78                    IN A,(C)        ; let's drop the first response
  81+ D4D0 CD 84 D8                 CALL WAIT_39T
  82+ D4D3              SEND_SMALL_BLOCK_LOOP:
  83+ D4D3 1A                       ld A,(DE)       ; 7T
  84+ D4D4 ED 79                    OUT (C),A
  85+ D4D6 13                       inc DE          ; 6T
  86+ D4D7 CD 83 D8                 call WAIT_27T
  87+ D4DA 10 F7                    djnz SEND_SMALL_BLOCK_LOOP ; 13T
  88+ D4DC 3A 4F 0B                 ld A,(BORDER_COLOR)
  89+ D4DF D6 04                    SUB 4
  90+ D4E1 D3 00                    OUT ($00),A
  91+ D4E3              WAIT_FOR_RESPONSE:
  92+ D4E3 CD 83 D8                 call WAIT_27T
  93+ D4E6 ED 78                    IN  A,(C)
  94+ D4E8 FE 91                    CP RETVAL_DATA_RECEIVED
  95+ D4EA 28 11                    jr z,WRITE_CYCLE_OK
  96+ D4EC FE 80                    CP RETVAL_DATA_NOT_READY_YET
  97+ D4EE 28 F3                    jr z,WAIT_FOR_RESPONSE
  98+ D4F0              ;            CP RETVAL_DATA_FAILED_TO_RECEIVE
  99+ D4F0              ;            jr z,WRITE_CYCLE_FAILED
 100+ D4F0              WRITE_CYCLE_FAILED:
 101+ D4F0 C1                       POP BC  ; drop it
 102+ D4F1 44                       ld b,h
 103+ D4F2 4D                       ld c,l
 104+ D4F3 F5                       push AF
 105+ D4F4 3A 4F 0B                 ld a,(BORDER_COLOR)
 106+ D4F7 D3 00                    OUT ($00),A
 107+ D4F9 F1                       pop AF
 108+ D4FA B7                       OR A
 109+ D4FB D1                       POP DE
 110+ D4FC C9                       RET
 111+ D4FD              WRITE_CYCLE_OK:
 112+ D4FD 44                       ld b,h
 113+ D4FE 4D                       ld c,l
 114+ D4FF 7C                       ld a,h
 115+ D500 B5                       or l
 116+ D501 20 9D                    jr nz,INNER_DATA_SEND_CYCLE  ; bytes to send? yes->JUMP
 117+ D503 3A 4F 0B                 ld a,(BORDER_COLOR)
 118+ D506 D3 00                    OUT ($00),A
 119+ D508 AF                       XOR A
 120+ D509 C1                       POP BC
 121+ D50A D1                       POP DE
 122+ D50B C9                       RET
 123+ D50C
 124+ D50C
 125+ D50C              DE_STR:
NanoSDROM_func_blkio.a80(126): error: Unrecognized instruction: .pstr "\r\nDE: "
 126+ D50C                  .pstr "\r\nDE: "
 127+ D50C              BC_STR:
NanoSDROM_func_blkio.a80(128): error: Unrecognized instruction: .pstr "\r\nBC: "
 128+ D50C                  .pstr "\r\nBC: "
# file closed: NanoSDROM_func_blkio.a80
 305  D50C                      INCLUDE "NanoSDROM_func_open.a80"
# file opened: NanoSDROM_func_open.a80
   1+ D50C              RECEIVED_FILENAME EQU $0BF5
   2+ D50C
   3+ D50C              OPEN_HANDLER:
   4+ D50C B7                       OR      A ; checking bit7
   5+ D50D F2 C2 D5                 JP      P,OPEN_WRITE
   6+ D510              OPEN_READONLY:
   7+ D510 CD 86 D8                 CALL    OPEN_FILE_4READ_CHECK ; is there a file open for read?
   8+ D513 3E EB                    LD      A,$EB
   9+ D515 C0                       RET     nz ; there is, error code is EB
  10+ D516 CD 8F D8                 CALL    OPEN_FILE_4WRITE_CHECK ; is there a file open for write?
  11+ D519 3E EB                    LD      A,$EB
  12+ D51B C0                       RET     nz ; there is, error code is EB
  13+ D51C
  14+ D51C D5                       PUSH    DE
  15+ D51D 21 F3 0B                 LD      HL,OPEN_FOR_READ_FILE_TYPE
  16+ D520 01 21 01                 LD      BC,$0121
  17+ D523 CD 95 D9                 CALL    CLEAN_MEMORY ; clean 0BF3 - 0D13
  18+ D526
  19+ D526 CD 14 D9                 CALL    PRINT_NEWLINE ; new line
  20+ D529 21 1F D6                 LD      HL,SEARCHING_STR
  21+ D52C CD FB D8                 CALL    PRINT_STRING ; Print "Searching"
  22+ D52F CD 14 D9                 CALL    PRINT_NEWLINE ; new line
  23+ D532
  24+ D532 D1                       POP     DE
  25+ D533 D5                       PUSH    DE
  26+ D534
  27+ D534 DD 4E 00                 LD      C,(IX+0)
  28+ D537 3E 00                    LD      A,SDISK_NANO_CMD_OPEN_RO
  29+ D539 ED 79                    OUT     (C),A ; send OPEN_RO command
  30+ D53B CD 79 D5                 CALL    SEND_FILENAME
NanoSDROM_func_open.a80(31): error: Label not found: wait_1ms
  31+ D53E CD 00 00                 CALL    wait_1ms
  32+ D541 ED 78                    IN      A,(C) ; let's drop this intermediate value
  33+ D543 CD 8F D5                 CALL    RECEIVE_FILENAME
  34+ D546 D1                       POP     DE
  35+ D547 B7                       OR      A
  36+ D548 28 11                    JR      z,OPEN_OK
  37+ D54A              OPEN_NOK:
  38+ D54A F5                       PUSH    AF
  39+ D54B 21 1F D6                 LD      HL,FILE_NOT_FOUND_STR
  40+ D54E D5                       PUSH    DE
  41+ D54F CD FB D8                 CALL    PRINT_STRING
  42+ D552 E1                       POP     HL
  43+ D553 CD FB D8                 CALL    PRINT_STRING
  44+ D556 CD 14 D9                 CALL    PRINT_NEWLINE ; new line
  45+ D559 F1                       POP     AF
  46+ D55A C9                       RET
  47+ D55B
  48+ D55B              OPEN_OK:
  49+ D55B 21 1F D6                 LD      HL,FILE_FOUND_STR
  50+ D55E CD FB D8                 CALL    PRINT_STRING
  51+ D561 21 F5 0B                 LD      HL,RECEIVED_FILENAME
  52+ D564 CD FB D8                 CALL    PRINT_STRING
  53+ D567 CD 14 D9                 CALL    PRINT_NEWLINE ; new line
  54+ D56A 11 F5 0B                 LD      DE,RECEIVED_FILENAME
  55+ D56D 21 F3 0B                 LD      HL,OPEN_FOR_READ_FILE_TYPE ; should not be zero, only 1 file may be open at a time for reading
  56+ D570 3E 11                    LD      A,$11
  57+ D572 77                       LD      (HL),A
  58+ D573 AF                       XOR     A
  59+ D574 32 F4 0B                 LD      (AVAILABLE_FOR_GET),A ; first read should send a GETDATA
  60+ D577 AF                       XOR     A
  61+ D578 C9                       RET
  62+ D579
  63+ D579              SEND_FILENAME:       ; 17T - just the CALL instruction
  64+ D579 1A                       LD      A,(DE) ; 7T
  65+ D57A B7                       OR      A ; 4T
  66+ D57B 28 0B                    JR      z,FILENAME_ZERO_TERMINATE ; 12T on jump, 7T on
  67+ D57D 47                       LD      B,A ; 7T - length of file
  68+ D57E              ; There are 42T between OPEN command and filename OUT's
  69+ D57E              FILENAME_SEND_LOOP:
  70+ D57E CD 83 D8                 CALL    WAIT_27T
  71+ D581 13                       INC     DE ; 6T
  72+ D582 1A                       LD      A,(DE) ; 7T
  73+ D583 ED 79                    OUT     (C),A
  74+ D585 10 F7                    DJNZ    FILENAME_SEND_LOOP ; 13T on jump, 8T otherwise
  75+ D587 00                       NOP      ; let's have a 4T wait here
  76+ D588              FILENAME_ZERO_TERMINATE:
NanoSDROM_func_open.a80(77): error: Label not found: wait_27T
  77+ D588 CD 00 00                 CALL    wait_27T
  78+ D58B AF                       XOR     A ; 4T
  79+ D58C ED 79                    OUT     (C),A
  80+ D58E C9                       RET      ; 10T
  81+ D58F
  82+ D58F              RECEIVE_FILENAME:
  83+ D58F              ; let's wait longer - 1 ms - between INs to give time to Nano to process
  84+ D58F              ; the open the file..
NanoSDROM_func_open.a80(85): error: Label not found: WAIT_1ms
  85+ D58F CD 00 00                 CALL    WAIT_1ms
  86+ D592 ED 78                    IN      A,(C)
  87+ D594 F2 A2 D5                 JP      P,COPY_CHARS ; 10T - positive response, not an errorcode
  88+ D597 FE 80                    CP      RETVAL_DATA_NOT_READY_YET ; 7T
  89+ D599 28 F4                    JR      z,RECEIVE_FILENAME ; 12T if jump, 7T otherwise
  90+ D59B FE 81                    CP      RETVAL_WAITING_FOR_INPUT ; 7T
  91+ D59D 28 F0                    JR      z,RECEIVE_FILENAME ; 12T if jump, 7T otherwise
  92+ D59F 3E ED                    LD      A,$ED
  93+ D5A1 C9                       RET
  94+ D5A2              COPY_CHARS:
  95+ D5A2 21 F5 0B                 LD      HL,RECEIVED_FILENAME ; 10T
  96+ D5A5 77                       LD      (HL),A ; 7T
  97+ D5A6 47                       LD      B,A ; 7T
  98+ D5A7 28 09                    JR      z,RECEIVE_FILE_SIZE ; should not happen, Nano always send back some filename!
  99+ D5A9              COPY_CHARS_LOOP:
 100+ D5A9 23                       INC     HL ; 6T
 101+ D5AA ED 78                    IN      A,(C)
 102+ D5AC 77                       LD      (HL),A ; 7T
 103+ D5AD CD 83 D8                 CALL    WAIT_27T ; 27T
 104+ D5B0 10 F7                    DJNZ    COPY_CHARS_LOOP ; 13T on jump
 105+ D5B2
 106+ D5B2              RECEIVE_FILE_SIZE:
 107+ D5B2 21 05 0D                 LD      HL,REMAINING_BYTES ; 10T
 108+ D5B5 06 04                    LD      b,4
 109+ D5B7              FILE_SIZE_LOOP:
 110+ D5B7 ED 78                    IN      A,(C) ;
 111+ D5B9 77                       LD      (HL),A ; 7T
 112+ D5BA 23                       INC     HL ; 4T
 113+ D5BB CD 83 D8                 CALL    WAIT_27T ; 27T
 114+ D5BE 10 F7                    DJNZ    FILE_SIZE_LOOP ; 13T
 115+ D5C0              FINISHED_COPY_CHARS:
 116+ D5C0 AF                       XOR     A
 117+ D5C1 C9                       RET
 118+ D5C2
 119+ D5C2
 120+ D5C2              OPEN_WRITE:
NanoSDROM_func_open.a80(121): error: Unrecognized instruction: debug_stripe
 121+ D5C2                          debug_stripe
 122+ D5C2              ; Nano SD cannot open two different file even for write and for read...
 123+ D5C2 CD 86 D8                 CALL    OPEN_FILE_4READ_CHECK ; is there a file open for read?
 124+ D5C5 3E EB                    LD      A,$EB
 125+ D5C7 C0                       RET     nz ; there is, error code is EB
 126+ D5C8 CD 8F D8                 CALL    OPEN_FILE_4WRITE_CHECK ; is there a file open for write?
 127+ D5CB 3E EC                    LD      A,$EC
 128+ D5CD C0                       RET     nz ; there is, error code is EB
 129+ D5CE
 130+ D5CE              ;ok, so there is no open file
NanoSDROM_func_open.a80(131): error: Unrecognized instruction: debug_stripe
 131+ D5CE                          debug_stripe
 132+ D5CE DD 4E 00                 LD      C,(IX+0)
 133+ D5D1 3E 0A                    LD      A,SDISK_NANO_CMD_CREATE
 134+ D5D3 ED 79                    OUT     (C),A
 135+ D5D5 CD 83 D8                 CALL    WAIT_27T
 136+ D5D8 CD 83 D8                 CALL    WAIT_27T
 137+ D5DB 1A                       LD      a,(DE)
 138+ D5DC 47                       ld      B,A
 139+ D5DD ED 79                    OUT     (C),A
 140+ D5DF B7                       OR      A
 141+ D5E0 28 0A                    JR      z,FILE_NAME_SENT
 142+ D5E2 13                       INC     DE
 143+ D5E3              SEND_SAVEFILENAME_LOOP:
 144+ D5E3 1A                       LD      A,(DE)
 145+ D5E4 ED 79                    OUT     (C),a
 146+ D5E6 13                       INC     DE
 147+ D5E7 CD 83 D8                 CALL    WAIT_27T
 148+ D5EA 10 F7                    DJNZ    SEND_SAVEFILENAME_LOOP
 149+ D5EC              FILE_NAME_SENT:
 150+ D5EC CD 83 D8                 CALL    WAIT_27T
 151+ D5EF 3A 6B 0B                 LD      A,(BUFFER) ; let's send the buffer type also (buffered, non-buffered)
 152+ D5F2 B7                       OR      A
 153+ D5F3 3E 01                    LD      A,$01
 154+ D5F5 20 02                    JR      nz,SKIP_TO_BUFFER_SET
 155+ D5F7 3E 11                    LD      A,$11
 156+ D5F9              SKIP_TO_BUFFER_SET:
 157+ D5F9 32 14 0D                 LD      (OPEN_FOR_WRITE_FILE_TYPE),A
 158+ D5FC 32 2F 0E                 LD      ($0E2F),A
 159+ D5FF ED 79                    OUT     (C),A
NanoSDROM_func_open.a80(160): error: Label not found: wait_100us
 160+ D601 CD 00 00                 CALL    wait_100us
 161+ D604 ED 78                    IN      A,(C) ; let's drop the first response.
 162+ D606              CREATE_FILE_LOOP:
NanoSDROM_func_open.a80(163): error: Label not found: wait_100us
 163+ D606 CD 00 00                 CALL    wait_100us
 164+ D609 ED 78                    IN      A,(C)
 165+ D60B FE 80                    CP      RETVAL_DATA_NOT_READY_YET
 166+ D60D 28 F7                    JR      z,CREATE_FILE_LOOP
 167+ D60F FE 90                    CP      RETVAL_CREATE_FAILED
 168+ D611 28 06                    JR      z,CREATE_FAILED
 169+ D613 FE 8F                    CP      RETVAL_CREATE_OK
 170+ D615 28 06                    JR      z,CREATE_OK
 171+ D617 18 02                    JR      SKIP_CREATE_FAILED_ERROR_CODE
 172+ D619              CREATE_FAILED:
 173+ D619 3E ED                    LD      A,$ED
 174+ D61B              SKIP_CREATE_FAILED_ERROR_CODE:
 175+ D61B B7                       OR      A
 176+ D61C C9                       RET
 177+ D61D              CREATE_OK:
 178+ D61D AF                       XOR     A
 179+ D61E C9                       RET
 180+ D61F
 181+ D61F              SEARCHING_STR:
NanoSDROM_func_open.a80(182): error: Unrecognized instruction: .PSTR   "Searching"
 182+ D61F                          .PSTR   "Searching"
 183+ D61F              FILE_FOUND_STR:
NanoSDROM_func_open.a80(184): error: Unrecognized instruction: .PSTR   "Found: "
 184+ D61F                          .PSTR   "Found: "
 185+ D61F              FILE_NOT_FOUND_STR:
NanoSDROM_func_open.a80(186): error: Unrecognized instruction: .PSTR   "Not Found: "
 186+ D61F                          .PSTR   "Not Found: "
 187+ D61F
# file closed: NanoSDROM_func_open.a80
 306  D61F                      INCLUDE "NanoSDROM_func_close.a80"
# file opened: NanoSDROM_func_close.a80
   1+ D61F              CLOSE_HANDLER:
   2+ D61F F2 4E D6                 JP      p,CLOSE_FOR_WRITE
   3+ D622 CD 86 D8                 CALL    OPEN_FILE_4READ_CHECK ; is there a file open for read?
   4+ D625 3E EB                    LD      A,$EB
   5+ D627 C8                       RET     z ; there is not, error code is EB
   6+ D628 DD 4E 00                 LD      C,(IX+0)
   7+ D62B 3E 01                    LD      A,SDISK_NANO_CMD_CLOSE_RO
   8+ D62D ED 79                    OUT     (C),A
NanoSDROM_func_close.a80(9): error: Label not found: wait_100us
   9+ D62F CD 00 00                 CALL    wait_100us ; let's leave time for ISR in Nano
  10+ D632 ED 78                    IN      A,(C) ; drop the first value from register
  11+ D634 AF                       XOR     A
  12+ D635 32 F3 0B                 LD      (OPEN_FOR_READ_FILE_TYPE),A
  13+ D638 32 0C 0D                 LD      ($0D0C),A
  14+ D63B              CLOSE_LOOP:
NanoSDROM_func_close.a80(15): error: Label not found: wait_100us
  15+ D63B CD 00 00                 CALL    wait_100us ;
  16+ D63E ED 78                    IN      A,(C)
  17+ D640 FE 8A                    CP      RETVAL_CLOSE_OK
  18+ D642 28 08                    JR      z,CLOSE_OK
  19+ D644 FE 80                    CP      RETVAL_DATA_NOT_READY_YET
  20+ D646 28 F3                    JR      z,CLOSE_LOOP
  21+ D648 3E EC                    LD      A,$EC
  22+ D64A 18 01                    JR      CLOSE_DONE
  23+ D64C              CLOSE_OK:
  24+ D64C AF                       XOR     A
  25+ D64D              CLOSE_DONE:
  26+ D64D C9                       RET
  27+ D64E
  28+ D64E              CLOSE_FOR_WRITE:
  29+ D64E CD 8F D8                 CALL    OPEN_FILE_4WRITE_CHECK ; is there a file open for write?
  30+ D651 3E 00                    LD      A,$00
  31+ D653 C8                       RET     z ; there is not, no error, but let's leave now
  32+ D654 32 14 0D                 LD      (OPEN_FOR_WRITE_FILE_TYPE),A
  33+ D657
  34+ D657 DD 4E 00                 LD      C,(IX+0)
  35+ D65A 3E 0C                    LD      A,SDISK_NANO_CMD_CLOSEWRITE
  36+ D65C ED 79                    OUT     (C),A
NanoSDROM_func_close.a80(37): error: Label not found: wait_100us
  37+ D65E CD 00 00                 CALL    wait_100us
  38+ D661 ED 78                    IN      A,(C) ; let's drop the first response
  39+ D663              WAIT_FOR_CLOSERW:
NanoSDROM_func_close.a80(40): error: Label not found: WAIT_100us
  40+ D663 CD 00 00                 CALL    WAIT_100us
  41+ D666 ED 78                    IN      A,(C)
  42+ D668 FE 80                    CP      RETVAL_DATA_NOT_READY_YET
  43+ D66A 28 F7                    JR      z,WAIT_FOR_CLOSERW
  44+ D66C FE 8A                    CP      RETVAL_CLOSE_OK
  45+ D66E 28 0A                    JR      z,CLOSERW_OK
  46+ D670 FE 8B                    CP      RETVAL_CLOSE_FAILED
  47+ D672 28 02                    JR      z,CLOSERW_FAILED
  48+ D674 18 02                    JR      SKIP_CLOSERW_ERRCODE
  49+ D676              CLOSERW_FAILED:
  50+ D676 3E EC                    LD      a,$EC
  51+ D678              SKIP_CLOSERW_ERRCODE:
  52+ D678 B7                       OR      A
  53+ D679 C9                       RET
  54+ D67A              CLOSERW_OK:
  55+ D67A AF                       XOR     A
  56+ D67B C9                       RET
  57+ D67C
# file closed: NanoSDROM_func_close.a80
 307  D67C                      INCLUDE "NanoSDROM_func_verify.a80"
# file opened: NanoSDROM_func_verify.a80
   1+ D67C              VERIFY_HANDLER:
   2+ D67C CD 86 D8                 CALL    OPEN_FILE_4READ_CHECK
   3+ D67F C8                       RET     z
   4+ D680              BLOCKVERIFY_LOOP:
   5+ D680 C5                       PUSH    BC
   6+ D681 D5                       PUSH    DE
   7+ D682 CD B5 D3                 CALL    CHARGET_NOCHECK
   8+ D685 D1                       POP     DE
   9+ D686 20 13                    JR      nz,READ_FAILED
  10+ D688 69                       LD      L,C
  11+ D689 1A                       LD      A,(DE)
  12+ D68A BD                       CP      L
  13+ D68B 20 09                    JR      nz,VERIFY_FAILED
  14+ D68D
  15+ D68D 13                       INC     DE
  16+ D68E C1                       POP     BC
  17+ D68F 0B                       DEC     BC
  18+ D690 78                       LD      A,B
  19+ D691 B1                       OR      C
  20+ D692 20 EC                    JR      nz,BLOCKVERIFY_LOOP
  21+ D694 AF                       XOR     A
  22+ D695 C9                       RET
  23+ D696              VERIFY_FAILED:
  24+ D696 C1                       POP     BC
  25+ D697 3E F0                    LD      a,$F0
  26+ D699 B7                       OR      A
  27+ D69A C9                       RET
  28+ D69B              READ_FAILED:
  29+ D69B C1                       POP     BC
  30+ D69C 3E F1                    LD      a,$F1
  31+ D69E B7                       OR      A
  32+ D69F C9                       RET
# file closed: NanoSDROM_func_verify.a80
 308  D6A0                      INCLUDE "NanoSDROM_func_pwd.a80"
# file opened: NanoSDROM_func_pwd.a80
   1+ D6A0              ; INPUT
   2+ D6A0              ;   DE: pointer to a min 65 byte length buffer
   3+ D6A0              ; OUTPUT:
   4+ D6A0              ;   A:
   5+ D6A0              ;     - 00: OK, buffer filled with a null terminated string
   6+ D6A0              ;     - ED: ERR, getting PWD failed
   7+ D6A0              ;   DE points a zero terminated string, max 63 characters
   8+ D6A0
   9+ D6A0              PWD_HANDLER:
NanoSDROM_func_pwd.a80(10): error: Unrecognized instruction: pwd
  10+ D6A0              .block pwd
  11+ D6A0 C5                       PUSH    BC
  12+ D6A1 D5                       PUSH    DE
  13+ D6A2 DD 4E 00                 LD      C,(IX+0)
  14+ D6A5 3E 07                    LD      A,SDISK_NANO_CMD_GETCDIR
  15+ D6A7 ED 79                    OUT     (C),A
NanoSDROM_func_pwd.a80(16): error: Label not found: WAIT_100us
  16+ D6A9 CD 00 00                 CALL    WAIT_100us
  17+ D6AC ED 78                    IN      A,(C) ; let's drop th first response
  18+ D6AE              PWD_LOOP:
NanoSDROM_func_pwd.a80(19): error: Label not found: WAIT_100us
  19+ D6AE CD 00 00                 CALL    WAIT_100us
  20+ D6B1 ED 78                    IN      A,(C)
  21+ D6B3 F2 BC D6                 JP      p,PWD_READY ; 10T
  22+ D6B6 FE 80                    CP      RETVAL_DATA_NOT_READY_YET
  23+ D6B8 28 F4                    JR      z,PWD_LOOP
  24+ D6BA 18 0F                    JR      PWD_ERROR
  25+ D6BC              PWD_READY:
  26+ D6BC 47                       LD      B,A ; 4T
  27+ D6BD              PWD_READ_LOOP:
  28+ D6BD CD 83 D8                 CALL    WAIT_27T
  29+ D6C0 ED 78                    IN      A,(C)
  30+ D6C2 12                       LD      (DE),A
  31+ D6C3 13                       INC     DE
  32+ D6C4 10 F7                    DJNZ    PWD_READ_LOOP
  33+ D6C6 AF                       XOR     A
  34+ D6C7 12                       LD      (DE),A
  35+ D6C8              PWD_EXIT:
  36+ D6C8 D1                       POP     DE
  37+ D6C9 C1                       POP     BC
  38+ D6CA C9                       RET
  39+ D6CB              PWD_ERROR:
  40+ D6CB 3E ED                    LD      A,$ED
  41+ D6CD 18 F9                    JR      PWD_EXIT
  42+ D6CF
  43+ D6CF              .endblock
# file closed: NanoSDROM_func_pwd.a80
 309  D6CF                      INCLUDE "NanoSDROM_func_dir.a80"
# file opened: NanoSDROM_func_dir.a80
   1+ D6CF              ; To obtain the directory list of the current path from nano
   2+ D6CF              ; DIRFIRST must be called first (bit 7 is irrelevant). Check its return value,
   3+ D6CF              ; then call DIRNEXT (bit 7 must be set) in loop - checking its retval. If
   4+ D6CF              ; bit 7 is clear during DIRNEXT call, the directory read iteration is broken,
   5+ D6CF              ; other command can be sent to Nano without iterating fully through the
   6+ D6CF              ; directory.
   7+ D6CF              ;
   8+ D6CF              ; INPUT
   9+ D6CF              ;    - direction bit (bit 7) shall be set on function code
  10+ D6CF              ;      - if it is clear on DIRNEXT, that will close the directory read iteration
  11+ D6CF              ;    - DE: pointer to a 17 bytes long directory buffer, where the data is copied
  12+ D6CF              ; OUTPUT
  13+ D6CF              ;    - A: $F0 Failed directory read
  14+ D6CF              ;         $00 Structure filled with data
  15+ D6CF              ;         $01 End of list reached
  16+ D6CF              ;         $80+ unhandled error code - should not leak back to enduser..
  17+ D6CF              ;
  18+ D6CF              ;
  19+ D6CF              ; Directory record structure:
  20+ D6CF              ; - 12 bytes file name (max 8.3, right padded with SPACE)
  21+ D6CF              ; - 1 byte file type where 00 is directory, 01 is file
  22+ D6CF              ; - 4 bytes file length (09012345h long file length is stored in the following
  23+ D6CF              ;   order: 45h 23h 01h 09h )
  24+ D6CF
  25+ D6CF
  26+ D6CF              DIRFIRST_HANDLER:
  27+ D6CF DD 4E 00                 LD      C,(IX+0)
  28+ D6D2 3E 03                    LD      A,SDISK_NANO_CMD_LIST
  29+ D6D4 ED 79                    OUT     (C),A
NanoSDROM_func_dir.a80(30): error: Label not found: wait_1ms
  30+ D6D6 CD 00 00                 CALL    wait_1ms
  31+ D6D9 ED 78                    IN      A,(C) ; drop the first response!
  32+ D6DB              DFH_DIR_REPLY_LOOP:
NanoSDROM_func_dir.a80(33): error: Label not found: wait_100us
  33+ D6DB CD 00 00                 CALL    wait_100us
  34+ D6DE ED 78                    IN      A,(C)
  35+ D6E0 FE 00                    CP      RETVAL_OK
  36+ D6E2 28 0E                    JR      z,DFH_PROCESS_ONE_DIR_REC
  37+ D6E4 FE 80                    CP      RETVAL_DATA_NOT_READY_YET
  38+ D6E6 28 F3                    JR      z,DFH_DIR_REPLY_LOOP
  39+ D6E8 FE 89                    CP      RETVAL_BUFFER_UNDERRUN
  40+ D6EA 28 EF                    JR      z,DFH_DIR_REPLY_LOOP
  41+ D6EC FE 84                    CP      RETVAL_END_OF_LIST
  42+ D6EE CA 01 D7                 JP      z,DFH_END_OF_DIR_ENTRY
  43+ D6F1 C9                       RET     ; no PUSH DE yet
  44+ D6F2              DFH_PROCESS_ONE_DIR_REC:
  45+ D6F2 D5                       PUSH    DE
  46+ D6F3 06 11                    LD      B,17
  47+ D6F5              DFH_DIR_ENTRY_LOOP:
NanoSDROM_func_dir.a80(48): error: Label not found: wait_39T
  48+ D6F5 CD 00 00                 CALL    wait_39T
  49+ D6F8 ED 78                    IN      A,(C)
  50+ D6FA 12                       LD      (DE),A
  51+ D6FB 13                       INC     DE
  52+ D6FC 10 F7                    DJNZ    DFH_DIR_ENTRY_LOOP
  53+ D6FE AF                       XOR     A
  54+ D6FF D1                       POP     DE
  55+ D700 C9                       RET
  56+ D701              DFH_END_OF_DIR_ENTRY:
  57+ D701 3E 01                    ld a,1
  58+ D703 C9                       RET ; NO PUSH DE YET
  59+ D704
  60+ D704              DIRNEXT_HANDLER:
  61+ D704 F2 16 D7                 jp      p,DIRNEXT_BREAK
  62+ D707 3E 04                    LD      A,SDISK_NANO_CMD_ACKLIST
  63+ D709 DD 4E 00                 LD      C,(IX+0)
  64+ D70C ED 79                    OUT     (C),A
NanoSDROM_func_dir.a80(65): error: Label not found: wait_100us
  65+ D70E CD 00 00                 CALL    wait_100us
  66+ D711 ED 78                    IN      A,(C) ; let's drop this one
  67+ D713 C3 DB D6                 JP      DFH_DIR_REPLY_LOOP
  68+ D716              DIRNEXT_BREAK:
  69+ D716 3E FF                    LD      A,$FF
  70+ D718 DD 4E 00                 LD      C,(IX+0)
  71+ D71B ED 79                    OUT     (C),A
NanoSDROM_func_dir.a80(72): error: Label not found: wait_100us
  72+ D71D CD 00 00                 CALL    wait_100us
  73+ D720 AF                       xor a
  74+ D721 C9                       ret
# file closed: NanoSDROM_func_dir.a80
 310  D722                      INCLUDE "NanoSDROM_func_cd.a80"
# file opened: NanoSDROM_func_cd.a80
   1+ D722              ; INPUT:
   2+ D722              ; - DE: points a null terminated string to change to
   3+ D722              ; OUTPUT
   4+ D722              ; - A:
   5+ D722              ;    - $00: OK
   6+ D722              ;    - $F1: Cannot change into given dir
   7+ D722              ;    - $F2: timeout during communicating with Nano
   8+ D722
   9+ D722              CHDIR_HANDLER:
NanoSDROM_func_cd.a80(10): error: Label not found: chdir
  10+ D722                          .BLOCK  chdir
  11+ D722 DD 4E 00                 LD      C,(IX+0)
  12+ D725 3E 02                    LD      A,SDISK_NANO_CMD_CHDIR
  13+ D727 ED 79                    OUT     (C),A ; CDIR command sent
NanoSDROM_func_cd.a80(14): error: Label not found: WAIT_100us
  14+ D729 CD 00 00                 CALL    WAIT_100us
  15+ D72C ED 78                    IN      A,(C) ; let's drop the first response
NanoSDROM_func_cd.a80(16): warning: Label has different value in pass 3: previous value 53470 not equal 55086
  16+ D72E              PATH_SEND_LOOP:
NanoSDROM_func_cd.a80(17): error: Label not found: WAIT_100us
  17+ D72E CD 00 00                 CALL    WAIT_100us
  18+ D731 1A                       LD      A,(DE)
  19+ D732 ED 79                    OUT     (C),A
  20+ D734 B7                       OR      A
NanoSDROM_func_cd.a80(21): error: [JR] Target out of range (-1613)
  21+ D735 28 00                    JR      z,SEND_PATH_CLOSE
  22+ D737 13                       INC     DE
  23+ D738 18 F4                    JR      PATH_SEND_LOOP
NanoSDROM_func_cd.a80(24): warning: Label has different value in pass 3: previous value 53482 not equal 55098
  24+ D73A              SEND_PATH_CLOSE:
  25+ D73A 11 F4 01                 LD      DE,500
NanoSDROM_func_cd.a80(26): warning: Label has different value in pass 3: previous value 53485 not equal 55101
  26+ D73D              WAIT_FOR_CD_RESPONSE:
NanoSDROM_func_cd.a80(27): error: Label not found: WAIT_1ms
  27+ D73D CD 00 00                 CALL    WAIT_1ms
  28+ D740 ED 78                    IN      A,(C)
  29+ D742 FE 8C                    CP      RETVAL_CHDIR_OK
  30+ D744 3E 00                    LD      A,$00
NanoSDROM_func_cd.a80(31): error: [JR] Target out of range (-1600)
  31+ D746 28 00                    JR      z,CD_EXIT
  32+ D748 FE 8D                    CP      RETVAL_CHDIR_FAILED
  33+ D74A 3E F1                    LD      A,$F1
NanoSDROM_func_cd.a80(34): error: [JR] Target out of range (-1606)
  34+ D74C 28 00                    JR      z,CD_EXIT
  35+ D74E 1B                       DEC     DE
  36+ D74F 7A                       LD      A,D
  37+ D750 B3                       OR      E
  38+ D751 20 EA                    JR      nz,WAIT_FOR_CD_RESPONSE
  39+ D753 3E F2                    LD      A,$F2
NanoSDROM_func_cd.a80(40): warning: Label has different value in pass 3: previous value 53512 not equal 55125
  40+ D755              CD_EXIT:
  41+ D755 C9                       RET
NanoSDROM_func_cd.a80(42): error: Unrecognized instruction: .ENDBLOCK
  42+ D756                          .ENDBLOCK
  43+ D756
# file closed: NanoSDROM_func_cd.a80
 311  D756                      INCLUDE "NanoSDROM_func_mkdir.a80"
# file opened: NanoSDROM_func_mkdir.a80
   1+ D756              ; INPUT:
   2+ D756              ; - DE: points a null terminated string to a directory name to create
   3+ D756              ; OUTPUT
   4+ D756              ; - C:
   5+ D756              ;    - $00: OK
   6+ D756              ;    - $F1: Cannot create directory
   7+ D756              ;    - $F2: timeout during communicating with Nano
   8+ D756
   9+ D756              MKDIR_HANDLER:
NanoSDROM_func_mkdir.a80(10): error: Label not found: mkdir
  10+ D756                          .BLOCK  mkdir
  11+ D756 DD 4E 00                 LD      C,(IX+0)
  12+ D759 3E 0F                    LD      A,SDISK_NANO_CMD_MKDIR
  13+ D75B ED 79                    OUT     (C),A ; MKDIR command sent
NanoSDROM_func_mkdir.a80(14): error: Label not found: WAIT_100us
  14+ D75D CD 00 00                 CALL    WAIT_100us
  15+ D760 ED 78                    IN      A,(C) ; let's drop the first response
NanoSDROM_func_mkdir.a80(16): warning: Label has different value in pass 3: previous value 55086 not equal 55138
  16+ D762              PATH_SEND_LOOP:
NanoSDROM_func_mkdir.a80(17): error: Label not found: WAIT_100us
  17+ D762 CD 00 00                 CALL    WAIT_100us
  18+ D765 1A                       LD      A,(DE)
  19+ D766 ED 79                    OUT     (C),A
  20+ D768 B7                       OR      A
  21+ D769 28 CF                    JR      z,SEND_PATH_CLOSE
  22+ D76B 13                       INC     DE
  23+ D76C 18 F4                    JR      PATH_SEND_LOOP
NanoSDROM_func_mkdir.a80(24): warning: Label has different value in pass 3: previous value 55098 not equal 55150
  24+ D76E              SEND_PATH_CLOSE:
  25+ D76E 11 88 13                 LD      DE,5000
  26+ D771              WAIT_FOR_MKDIR_RESPONSE:
NanoSDROM_func_mkdir.a80(27): error: Label not found: WAIT_1ms
  27+ D771 CD 00 00                 CALL    WAIT_1ms
  28+ D774 ED 78                    IN      A,(C)
  29+ D776 FE 93                    CP      RETVAL_MKDIR_OK
  30+ D778 06 00                    LD      b,$00
  31+ D77A 28 0D                    JR      z,MKDIR_EXIT
  32+ D77C FE 94                    CP      RETVAL_MKDIR_FAILED
  33+ D77E 06 F1                    LD      b,$F1
  34+ D780 28 07                    JR      z,MKDIR_EXIT
  35+ D782 1B                       DEC     DE
  36+ D783 7A                       LD      A,D
  37+ D784 B3                       OR      E
  38+ D785 20 EA                    JR      nz,WAIT_FOR_MKDIR_RESPONSE
  39+ D787 06 F2                    LD      B,$F2
  40+ D789              MKDIR_EXIT:
  41+ D789 78                       LD      A,B
  42+ D78A C9                       RET
NanoSDROM_func_mkdir.a80(43): error: Unrecognized instruction: .ENDBLOCK
  43+ D78B                          .ENDBLOCK
  44+ D78B
# file closed: NanoSDROM_func_mkdir.a80
 312  D78B                      INCLUDE "NanoSDROM_func_rmdir.a80"
# file opened: NanoSDROM_func_rmdir.a80
   1+ D78B              ; INPUT:
   2+ D78B              ; - DE: points a null terminated string to a directory name to delete
   3+ D78B              ; OUTPUT
   4+ D78B              ; - C:
   5+ D78B              ;    - $00: OK
   6+ D78B              ;    - $F1: Cannot remove directory
   7+ D78B              ;    - $F2: timeout during communicating with Nano
   8+ D78B
   9+ D78B              RMDIR_HANDLER:
NanoSDROM_func_rmdir.a80(10): error: Label not found: mkdir
  10+ D78B                          .BLOCK  mkdir
  11+ D78B DD 4E 00                 LD      C,(IX+0)
  12+ D78E 3E 10                    LD      A,SDISK_NANO_CMD_RMDIR
  13+ D790 ED 79                    OUT     (C),A ; CDIR command sent
NanoSDROM_func_rmdir.a80(14): error: Label not found: WAIT_100us
  14+ D792 CD 00 00                 CALL    WAIT_100us
  15+ D795 ED 78                    IN      A,(C) ; let's drop the first response
NanoSDROM_func_rmdir.a80(16): warning: Label has different value in pass 3: previous value 55138 not equal 55191
  16+ D797              PATH_SEND_LOOP:
NanoSDROM_func_rmdir.a80(17): error: Label not found: WAIT_100us
  17+ D797 CD 00 00                 CALL    WAIT_100us
  18+ D79A 1A                       LD      A,(DE)
  19+ D79B ED 79                    OUT     (C),A
  20+ D79D B7                       OR      A
  21+ D79E 28 CE                    JR      z,SEND_PATH_CLOSE
  22+ D7A0 13                       INC     DE
  23+ D7A1 18 F4                    JR      PATH_SEND_LOOP
NanoSDROM_func_rmdir.a80(24): warning: Label has different value in pass 3: previous value 55150 not equal 55203
  24+ D7A3              SEND_PATH_CLOSE:
  25+ D7A3 11 88 13                 LD      DE,5000
  26+ D7A6              WAIT_FOR_RMDIR_RESPONSE:
NanoSDROM_func_rmdir.a80(27): error: Label not found: WAIT_1ms
  27+ D7A6 CD 00 00                 CALL    WAIT_1ms
  28+ D7A9 ED 78                    IN      A,(C)
  29+ D7AB FE 95                    CP      RETVAL_RMDIR_OK
  30+ D7AD 06 00                    LD      B,$00
  31+ D7AF 28 0D                    JR      z,RMDIR_EXIT
  32+ D7B1 FE 96                    CP      RETVAL_RMDIR_FAILED
  33+ D7B3 06 F1                    LD      B,$F1
  34+ D7B5 28 07                    JR      z,RMDIR_EXIT
  35+ D7B7 1B                       DEC     DE
  36+ D7B8 7A                       LD      A,D
  37+ D7B9 B3                       OR      E
  38+ D7BA 20 EA                    JR      nz,WAIT_FOR_RMDIR_RESPONSE
  39+ D7BC 06 F2                    LD      B,$F2
  40+ D7BE              RMDIR_EXIT:
  41+ D7BE 78                       LD      A,B
  42+ D7BF C9                       RET
NanoSDROM_func_rmdir.a80(43): error: Unrecognized instruction: .ENDBLOCK
  43+ D7C0                          .ENDBLOCK
  44+ D7C0
# file closed: NanoSDROM_func_rmdir.a80
 313  D7C0                      INCLUDE "NanoSDROM_func_delete.a80"
# file opened: NanoSDROM_func_delete.a80
   1+ D7C0              ; INPUT:
   2+ D7C0              ; - DE: points a null terminated string to a filename to delete
   3+ D7C0              ; OUTPUT
   4+ D7C0              ; - C:
   5+ D7C0              ;    - $00: OK
   6+ D7C0              ;    - $F1: Cannot delete file
   7+ D7C0              ;    - $F2: timeout during communicating with Nano
   8+ D7C0
   9+ D7C0              DELETE_HANDLER:
NanoSDROM_func_delete.a80(10): error: Label not found: delete
  10+ D7C0                          .BLOCK  delete
  11+ D7C0 DD 4E 00                 LD      C,(IX+0)
  12+ D7C3 3E 11                    LD      A,SDISK_NANO_CMD_DELETE
  13+ D7C5 ED 79                    OUT     (C),A ; DELETE command sent
NanoSDROM_func_delete.a80(14): error: Label not found: WAIT_100us
  14+ D7C7 CD 00 00                 CALL    WAIT_100us
  15+ D7CA ED 78                    IN      A,(C) ; let's drop the first response
NanoSDROM_func_delete.a80(16): warning: Label has different value in pass 3: previous value 55191 not equal 55244
  16+ D7CC              PATH_SEND_LOOP:
NanoSDROM_func_delete.a80(17): error: Label not found: WAIT_100us
  17+ D7CC CD 00 00                 CALL    WAIT_100us
  18+ D7CF 1A                       LD      A,(DE)
  19+ D7D0 ED 79                    OUT     (C),A
  20+ D7D2 B7                       OR      A
  21+ D7D3 28 CE                    JR      z,SEND_PATH_CLOSE
  22+ D7D5 13                       INC     DE
  23+ D7D6 18 F4                    JR      PATH_SEND_LOOP
NanoSDROM_func_delete.a80(24): warning: Label has different value in pass 3: previous value 55203 not equal 55256
  24+ D7D8              SEND_PATH_CLOSE:
  25+ D7D8 11 88 13                 LD      DE,5000
  26+ D7DB              WAIT_FOR_DELETE_RESPONSE:
NanoSDROM_func_delete.a80(27): error: Label not found: WAIT_1ms
  27+ D7DB CD 00 00                 CALL    WAIT_1ms
  28+ D7DE ED 78                    IN      A,(C)
  29+ D7E0 FE 97                    CP      RETVAL_DELETE_OK
  30+ D7E2 06 00                    LD      B,$00
  31+ D7E4 28 0D                    JR      z,DELETE_EXIT
  32+ D7E6 FE 98                    CP      RETVAL_DELETE_FAILED
  33+ D7E8 06 F1                    LD      B,$F1
  34+ D7EA 28 07                    JR      z,DELETE_EXIT
  35+ D7EC 1B                       DEC     DE
  36+ D7ED 7A                       LD      A,D
  37+ D7EE B3                       OR      E
  38+ D7EF 20 EA                    JR      nz,WAIT_FOR_DELETE_RESPONSE
  39+ D7F1 06 F2                    LD      B,$F2
  40+ D7F3              DELETE_EXIT:
  41+ D7F3 78                       LD      A,B
  42+ D7F4 C9                       RET
NanoSDROM_func_delete.a80(43): error: Unrecognized instruction: .ENDBLOCK
  43+ D7F5                          .ENDBLOCK
  44+ D7F5
# file closed: NanoSDROM_func_delete.a80
 314  D7F5                      INCLUDE "NanoSDROM_func_param.a80"
# file opened: NanoSDROM_func_param.a80
   1+ D7F5              ; INPUT
   2+ D7F5              ;   C: the ID of the parameter to get or set
   3+ D7F5              ;   DE:
   4+ D7F5              ;     SET: the value of an integer typed param or a pointer to a string
   5+ D7F5              ;          type param
   6+ D7F5              ;     GET: a pointer to a C string buffer in case of string type variable
   7+ D7F5              ; OUTPUT:
   8+ D7F5              ;   A:
   9+ D7F5              ;     - 00: OK, param retreived/parameter is set
  10+ D7F5              ;     - otherwise parameters in not found/nano is not available
  11+ D7F5              ;   DE:
  12+ D7F5              ;     GET:
  13+ D7F5              ;       Integer value: the value itself
  14+ D7F5              ;       String  value: the pointer that was given to the call
  15+ D7F5              ;
  16+ D7F5              ; Known parameters:
  17+ D7F5              ;  0 - Menustatus *byte)
  18+ D7F5              ;      0: NO
  19+ D7F5              ;      1: YES (Show menu on cold reset)
  20+ D7F5              ;  1 - sort order (byte)
  21+ D7F5              ;      0: no sort
  22+ D7F5              ;      1: sort by name
  23+ D7F5              ;      2: sort by size
  24+ D7F5              ;  2 - SD card inserted (read-only gives param not found on write)
  25+ D7F5              ;      0: not available, dir not available
  26+ D7F5              ;      1: SD inserted, dir available
  27+ D7F5              ;  3 - NanoSD fw version string. Only GET
  28+ D7F5
  29+ D7F5              PARAM_HANDLER:
NanoSDROM_func_param.a80(30): error: Label not found: pwd
  30+ D7F5                          .BLOCK  pwd
  31+ D7F5 41                       LD      B,C
  32+ D7F6 DD 4E 00                 LD      C,(IX+0)
  33+ D7F9 B7                       OR      A
  34+ D7FA F2 47 D8                 JP      P,SET_PARAMETER
  35+ D7FD 3E 0D                    LD      A,SDISK_NANO_CMD_GETPARAMETER
  36+ D7FF ED 79                    OUT     (C),A
NanoSDROM_func_param.a80(37): error: Label not found: WAIT_100us
  37+ D801 CD 00 00                 CALL    WAIT_100us
  38+ D804 ED 41                    OUT     (C),B
NanoSDROM_func_param.a80(39): error: Label not found: WAIT_100us
  39+ D806 CD 00 00                 CALL    WAIT_100us
  40+ D809 ED 78                    IN      A,(C) ; let's drop th first response
  41+ D80B
  42+ D80B              PARAM_GETTING_LOOP:
NanoSDROM_func_param.a80(43): error: Label not found: WAIT_100us
  43+ D80B CD 00 00                 CALL    WAIT_100us
  44+ D80E ED 78                    IN      A,(C)
  45+ D810 F2 21 D8                 JP      P,PARAM_FOUND
  46+ D813 FE 99                    CP      RETVAL_INVALID_PARAMETER_ID
  47+ D815 28 07                    JR      z,PARAM_NOT_FOUND
  48+ D817 FE 80                    CP      RETVAL_DATA_NOT_READY_YET
  49+ D819 28 F0                    JR      z,PARAM_GETTING_LOOP
  50+ D81B 3E 02                    LD      a,2
  51+ D81D 21                       DB      00100001B ; LD HL,nn ... let's skip next instruction
  52+ D81E              PARAM_NOT_FOUND:
  53+ D81E 3E 01                    LD      a,1
  54+ D820 C9                       RET
  55+ D821              PARAM_FOUND:
  56+ D821 CD 84 D8                 CALL    WAIT_39T
  57+ D824 FE 03                    CP      3
  58+ D826 28 12                    JR      z,READ_STRING
  59+ D828 FE 02                    CP      2
  60+ D82A 28 05                    JR      z,READ_WORD
  61+ D82C ED 58                    IN      E,(C)
  62+ D82E AF                       XOR     A
  63+ D82F 57                       LD      D,A
  64+ D830 C9                       RET
  65+ D831              READ_WORD:
  66+ D831 ED 58                    IN      E,(C)
  67+ D833 CD 84 D8                 CALL    WAIT_39T
  68+ D836 ED 50                    IN      D,(C)
  69+ D838 AF                       XOR     A
  70+ D839 C9                       RET
  71+ D83A              READ_STRING:
  72+ D83A D5                       PUSH    DE
  73+ D83B              READ_STRING_LOOP:
  74+ D83B CD 84 D8                 CALL    WAIT_39T
  75+ D83E ED 78                    IN      A,(C)
  76+ D840 12                       LD      (DE),A
  77+ D841 13                       INC     DE
  78+ D842 20 F7                    JR      nz,READ_STRING_LOOP
  79+ D844 AF                       XOR     A
  80+ D845 D1                       POP     DE
  81+ D846 C9                       RET
  82+ D847
  83+ D847              SET_PARAMETER:
  84+ D847 3E 0E                    LD      A,SDISK_NANO_CMD_SETPARAMETER
  85+ D849 ED 79                    OUT     (C),A
NanoSDROM_func_param.a80(86): error: Label not found: WAIT_100us
  86+ D84B CD 00 00                 CALL    WAIT_100us
  87+ D84E ED 41                    OUT     (C),B
NanoSDROM_func_param.a80(88): error: Label not found: WAIT_100us
  88+ D850 CD 00 00                 CALL    WAIT_100us
  89+ D853 ED 59                    OUT     (C),E
NanoSDROM_func_param.a80(90): error: Label not found: WAIT_100us
  90+ D855 CD 00 00                 CALL    WAIT_100us
  91+ D858 ED 78                    IN      A,(C) ; let's drop th first response
  92+ D85A
  93+ D85A              PARAM_SETTING_LOOP:
NanoSDROM_func_param.a80(94): error: Label not found: WAIT_100us
  94+ D85A CD 00 00                 CALL    WAIT_100us
  95+ D85D ED 78                    IN      A,(C)
  96+ D85F FE 9A                    CP      RETVAL_PARAMETER_SET
  97+ D861 28 0B                    JR      z,PARAM_SET
  98+ D863 FE 99                    CP      RETVAL_INVALID_PARAMETER_ID
  99+ D865 28 04                    JR      z,PARAM_NOT_SET
 100+ D867 FE 80                    CP      RETVAL_DATA_NOT_READY_YET
 101+ D869 28 EF                    JR      z,PARAM_SETTING_LOOP
 102+ D86B              PARAM_NOT_SET:
 103+ D86B 3E 02                    LD      a,2
 104+ D86D C9                       RET
 105+ D86E
 106+ D86E              PARAM_SET:
 107+ D86E AF                       XOR     A
 108+ D86F C9                       RET
 109+ D870
 110+ D870
 111+ D870
# file closed: NanoSDROM_func_param.a80
 315  D870
 316  D870                      INCLUDE "NanoSDROM_tools.a80"
# file opened: NanoSDROM_tools.a80
   1+ D870              WAIT_1MS:            ; (17T to reach here)  3125T to wait
   2+ D870 F5                       PUSH    af ; 11T                   77T is the frame
   3+ D871 C5                       PUSH    bc ; 11T
   4+ D872 06 B4                    LD      b,180 ; 6T    179*17 + 12 => Total wait time is 3132T
   5+ D874              WAIT_1MS_LOOP:       ;
   6+ D874 00                       NOP      ; 4T
NanoSDROM_tools.a80(7): error: Label not found: wait_1ms_loop
NanoSDROM_tools.a80(7): error: [DJNZ] Target out of range (-55415)
   7+ D875 10 00                    DJNZ    wait_1ms_loop ; 13T on jump, 8T on not jump
   8+ D877 C1                       POP     bc ; 11T
   9+ D878 F1                       POP     af ; 11T
  10+ D879 C9                       RET      ; 10T
  11+ D87A
  12+ D87A              WAIT_100US:          ; (17T to reach here)  312T to wait
  13+ D87A F5                       PUSH    af ; 11T                   77T is the frame
  14+ D87B C5                       PUSH    bc ; 11T
  15+ D87C 06 0E                    LD      b,14 ; 6T    13*17 + 12 => Total wait time is 310T
  16+ D87E              WAIT_100US_LOOP:     ;
  17+ D87E 00                       NOP      ; 4T
NanoSDROM_tools.a80(18): error: Label not found: wait_100us_loop
NanoSDROM_tools.a80(18): error: [DJNZ] Target out of range (-55425)
  18+ D87F 10 00                    DJNZ    wait_100us_loop ; 13T on jump, 8T on not jump
  19+ D881 C1                       POP     bc ; 11
  20+ D882 F1                       POP     af ; 11T
  21+ D883
  22+ D883              WAIT_27T:            ; CALL and RET is 17T + 10T
  23+ D883 C9                       RET
  24+ D884              WAIT_39T:
  25+ D884 18 FD                    JR      WAIT_27T
  26+ D886
  27+ D886
  28+ D886              ;   sets NOT VERIFY (00 into 0BF1) and checks if 0BF3 is 0
  29+ D886              OPEN_FILE_4READ_CHECK:
  30+ D886 AF                       XOR     a
  31+ D887 32 F1 0B                 LD      (VERIFY_ONGOING),a
  32+ D88A 3A F3 0B                 LD      a,(OPEN_FOR_READ_FILE_TYPE)
  33+ D88D 18 03                    JR      FILE_CHECK
  34+ D88F              OPEN_FILE_4WRITE_CHECK:
  35+ D88F 3A 14 0D                 LD      a,(OPEN_FOR_WRITE_FILE_TYPE) ; open for write
  36+ D892              FILE_CHECK:
  37+ D892 B7                       OR      a
  38+ D893 3E E9                    LD      a,$E9
  39+ D895 C9                       RET
  40+ D896
  41+ D896              FILE_READ_CHECK:
  42+ D896 21 0B 0D                 LD      HL,$0D0B
  43+ D899 7E                       LD      a,(hl)
  44+ D89A B7                       OR      a
  45+ D89B C8                       RET     z
  46+ D89C 36 EC                    LD      (hl),$ec
  47+ D89E C9                       RET
  48+ D89F
  49+ D89F              INIT_PRINT_STRING:   ; on v2.2 ROM ignores INT reqs enabled
  50+ D89F              ; by the ED-CH-OUT routine and disables INTs
  51+ D89F              ; on return
  52+ D89F 3A 38 00                 LD      A,(0038h) ; INT vector address
  53+ D8A2 F5                       PUSH    AF
  54+ D8A3 3E C9                    LD      A,$C9 ; RET instruction
  55+ D8A5 32 38 00                 LD      (0038h),A
  56+ D8A8 CD FB D8                 CALL    PRINT_STRING
  57+ D8AB F3                       DI       ; let's disable INT, during INIT it is supposed to be disabled
  58+ D8AC F1                       POP     AF
  59+ D8AD 32 38 00                 LD      (0038h),A ; restore original value
  60+ D8B0 C9                       RET
  61+ D8B1
  62+ D8B1
  63+ D8B1              INIT_PRINT_16BIT_DECIMAL_NUMBER:
  64+ D8B1 3A 38 00                 LD      A,(0038h) ; INT vector address
  65+ D8B4 F5                       PUSH    AF
  66+ D8B5 3E C9                    LD      A,$C9 ; RET instruction
  67+ D8B7 32 38 00                 LD      (0038h),A
  68+ D8BA CD 42 D9                 CALL    PRINT_16BIT_DECIMAL_NUMBER
  69+ D8BD F3                       DI       ; let's disable INT, during INIT it is supposed to be disabled
  70+ D8BE F1                       POP     AF
  71+ D8BF 32 38 00                 LD      (0038h),A ; restore original value
  72+ D8C2 C9                       RET
  73+ D8C3
  74+ D8C3              INIT_PRINT_HEX_BYTE:
  75+ D8C3 3A 38 00                 LD      A,(0038h) ; INT vector address
  76+ D8C6 F5                       PUSH    AF
  77+ D8C7 3E C9                    LD      A,$C9 ; RET instruction
  78+ D8C9 32 38 00                 LD      (0038h),A
  79+ D8CC 79                       LD      a,c
  80+ D8CD CD 19 D9                 CALL    PRINT_HEX_BYTE
  81+ D8D0 F3                       DI       ; let's disable INT, during INIT it is supposed to be disabled
  82+ D8D1 F1                       POP     AF
  83+ D8D2 32 38 00                 LD      (0038h),A ; restore original value
  84+ D8D5 C9                       RET
  85+ D8D6
  86+ D8D6              INIT_PRINT_CSTRING:
  87+ D8D6 3A 38 00                 LD      A,(0038h) ; INT vector address
  88+ D8D9 F5                       PUSH    AF
  89+ D8DA 3E C9                    LD      A,$C9 ; RET instruction
  90+ D8DC 32 38 00                 LD      (0038h),A
  91+ D8DF CD 07 D9                 CALL    PRINT_CSTRING
  92+ D8E2 F3                       DI       ; let's disable INT, during INIT it is supposed to be disabled
  93+ D8E3 F1                       POP     AF
  94+ D8E4 32 38 00                 LD      (0038h),A ; restore original value
  95+ D8E7 C9                       RET
  96+ D8E8
  97+ D8E8              INIT_PRINT_CHAR:     ; on v2.2 ROM ignores INT reqs enabled
  98+ D8E8              ; by the ED-CH-OUT routine and disables INTs
  99+ D8E8              ; on return
 100+ D8E8 F5                       PUSH    AF
 101+ D8E9 3A 38 00                 LD      A,(0038h) ; INT vector address
 102+ D8EC F5                       PUSH    AF
 103+ D8ED 3E C9                    LD      A,$C9 ; RET instruction
 104+ D8EF 32 38 00                 LD      (0038h),A
 105+ D8F2 F7                       RST     $30
 106+ D8F3 21                       DB      F_EDCHOUT
 107+ D8F4 F3                       DI       ; let's disable INT, during INIT it is supposed to be disabled
 108+ D8F5 F1                       POP     AF
 109+ D8F6 32 38 00                 LD      (0038h),A ; restore original value
 110+ D8F9 F1                       POP     AF
 111+ D8FA C9                       RET
 112+ D8FB
 113+ D8FB
 114+ D8FB              PRINT_STRING:
 115+ D8FB 46                       LD      b,(hl)
 116+ D8FC              PRINT_STRING_LOOP:
 117+ D8FC 23                       INC     hl
 118+ D8FD C5                       PUSH    bc
 119+ D8FE E5                       PUSH    hl
 120+ D8FF 4E                       LD      c,(hl)
 121+ D900 F7                       RST     30h
 122+ D901 21                       DB      $21
 123+ D902 E1                       POP     hl
 124+ D903 C1                       POP     bc
 125+ D904 10 F6                    DJNZ    PRINT_STRING_LOOP
 126+ D906 C9                       RET
 127+ D907
 128+ D907              PRINT_CSTRING:
 129+ D907 4E                       LD      c,(hl)
 130+ D908 AF                       XOR     a
 131+ D909 B9                       CP      c
 132+ D90A 28 07                    JR      z,CSTRING_DONE
 133+ D90C E5                       PUSH    hl
 134+ D90D F7                       RST     30h
 135+ D90E 21                       DB      $21
 136+ D90F E1                       POP     hl
 137+ D910 23                       INC     hl
 138+ D911 18 F4                    JR      PRINT_CSTRING
 139+ D913              CSTRING_DONE:
 140+ D913 C9                       RET
 141+ D914
 142+ D914              PRINT_NEWLINE:
 143+ D914 21 19 D9                 LD      hl,NEWLINE_STR
 144+ D917 18 E2                    JR      PRINT_STRING
 145+ D919              NEWLINE_STR:
NanoSDROM_tools.a80(146): error: Unrecognized instruction: .PSTR   "\r\n"
 146+ D919                          .PSTR   "\r\n"
 147+ D919
 148+ D919              PRINT_HEX_BYTE:
 149+ D919 C5                       PUSH    BC
 150+ D91A F5                       PUSH    AF
 151+ D91B 0F                       RRCA
 152+ D91C 0F                       RRCA
 153+ D91D 0F                       RRCA
 154+ D91E 0F                       RRCA
 155+ D91F E6 0F                    AND     $0F
 156+ D921 CD 2C D9                 CALL    PRINT_HEX_DIGIT
 157+ D924 F1                       POP     AF
 158+ D925 E6 0F                    AND     $0F
 159+ D927 CD 2C D9                 CALL    PRINT_HEX_DIGIT
 160+ D92A C1                       POP     BC
 161+ D92B C9                       RET
 162+ D92C              PRINT_HEX_DIGIT:
 163+ D92C FE 0A                    CP      10
 164+ D92E 30 04                    JR      nc,ALPHA_CHARS
 165+ D930 C6 30                    ADD     A,"0"
 166+ D932 18 02                    JR      PRINT_CHAR
 167+ D934              ALPHA_CHARS:
 168+ D934 C6 37                    ADD     A,"A" - 10
 169+ D936              PRINT_CHAR:
 170+ D936 4F                       LD      C,A
 171+ D937 F7                       RST     30h
 172+ D938 21                       DB      F_EDCHOUT
 173+ D939 C9                       RET
 174+ D93A
 175+ D93A              GET_DECIMAL_DIGIT:
 176+ D93A 0C                       INC     C
 177+ D93B ED 52                    SBC     HL,DE
 178+ D93D 30 FB                    JR      nc,GET_DECIMAL_DIGIT
 179+ D93F 0D                       DEC     C
 180+ D940 19                       ADD     HL,DE
 181+ D941 C9                       RET
 182+ D942
 183+ D942              PRINT_16BIT_DECIMAL_NUMBER:
 184+ D942 F5                       PUSH    AF
 185+ D943 C5                       PUSH    BC
 186+ D944 D5                       PUSH    DE
 187+ D945 E5                       PUSH    HL
 188+ D946 06 00                    LD      B,0
 189+ D948 0E 00                    LD      c,0
 190+ D94A              PRINT_DECIMAL_LOOP:
 191+ D94A C5                       PUSH    bc
 192+ D94B 79                       LD      a,c
 193+ D94C CB 07                    RLC     a ; MUL by 2
 194+ D94E 11 8B D9                 LD      de,DECIMAL_NUMS
 195+ D951 83                       ADD     a,e
 196+ D952 5F                       LD      e,a
 197+ D953 3E 00                    LD      a,$00
 198+ D955 8A                       ADC     a,d
 199+ D956 57                       LD      d,a
 200+ D957 E5                       PUSH    hl
 201+ D958 EB                       EX      de,hl
 202+ D959 5E                       LD      e,(hl)
 203+ D95A 23                       INC     hl
 204+ D95B 56                       LD      d,(hl)
 205+ D95C E1                       POP     hl
 206+ D95D
 207+ D95D 0E 00                    LD      c,0
 208+ D95F CD 3A D9                 CALL    GET_DECIMAL_DIGIT
 209+ D962 7B                       LD      a,e
 210+ D963 FE 01                    CP      1
 211+ D965 28 04                    JR      z,PRINT_DIGIT ; last digit, must print even on zero
 212+ D967 78                       LD      A,B
 213+ D968 B1                       OR      C
 214+ D969 28 0B                    JR      z,SKIP_DIGIT_PRINT
 215+ D96B              PRINT_DIGIT:
 216+ D96B 04                       INC     B
 217+ D96C 79                       LD      A,C
 218+ D96D C6 30                    ADD     a,"0"
 219+ D96F C5                       PUSH    bc
 220+ D970 CD 36 D9                 CALL    PRINT_CHAR
 221+ D973 C1                       POP     bc
 222+ D974 18 07                    JR      SKIP_SPACE_PRINT
 223+ D976              SKIP_DIGIT_PRINT:
 224+ D976 3E 20                    LD      a," "
 225+ D978 C5                       PUSH    bc
 226+ D979 CD 36 D9                 CALL    PRINT_CHAR
 227+ D97C C1                       POP     bc
 228+ D97D              SKIP_SPACE_PRINT:
 229+ D97D 78                       LD      a,b
 230+ D97E C1                       POP     bc
 231+ D97F 0C                       INC     c
 232+ D980 47                       LD      b,a
 233+ D981 79                       LD      a,c
 234+ D982 FE 05                    CP      5
 235+ D984 20 C4                    JR      nz,PRINT_DECIMAL_LOOP
 236+ D986
 237+ D986 E1                       POP     HL
 238+ D987 D1                       POP     DE
 239+ D988 C1                       POP     BC
 240+ D989 F1                       POP     AF
 241+ D98A C9                       RET
 242+ D98B
 243+ D98B
 244+ D98B              DECIMAL_NUMS:
 245+ D98B 10 27                    DW      10000
 246+ D98D E8 03                    DW      1000
 247+ D98F 64 00                    DW      100
 248+ D991 0A 00                    DW      10
 249+ D993 01 00                    DW      1
 250+ D995              ; fills memory starting from HL with BC 0 bytes
 251+ D995              CLEAN_MEMORY:
 252+ D995 36 00                    LD      (hl),00
 253+ D997 23                       INC     hl
 254+ D998 0B                       DEC     bc
 255+ D999 78                       LD      a,b
 256+ D99A B1                       OR      c
NanoSDROM_tools.a80(257): error: Label not found: clean_memory
NanoSDROM_tools.a80(257): error: [JR] Target out of range (-55709)
 257+ D99B 20 00                    JR      nz,clean_memory
 258+ D99D C9                       RET
 259+ D99E
 260+ D99E              JUMPER_CODE:
 261+ D99E                          .PHASE  $004a
 262+ 004A              JUMPER_CODE_U0:
 263+ 004A              ; This is the EXT0 entry point
 264+ 004A F3                       DI
 265+ 004B F5                       PUSH    AF ; needed in EXT0 because of the ISR exit routine
 266+ 004C              ; This is the ISR entry point
 267+ 004C 3E F0                    LD      A,$f0 ; U0-U1-U2-EXT
 268+ 004E D3 02                    OUT     ($02),A
 269+ 0050 C5                       PUSH    BC
 270+ 0051 3A 11 0B                 LD      A,(PORT03_SHADOW)
 271+ 0054 47                       LD      B,A
 272+ 0055 E6 0F                    AND     $0f
 273+ 0057              EXT_SELECTION:
 274+ 0057 F6 00                    OR      $00
 275+ 0059 D3 03                    OUT     ($03),A
 276+ 005B              IO_BASE_LDC:
 277+ 005B 0E 00                    LD      C,$00 ; RESIDENT in RAM, set by INIT to 48, 78, A8, D8
 278+ 005D              ; A - latest PORT03
 279+ 005D              ; B - orig PORT03
 280+ 005D              ; C - IO CARD RAM in U0
 281+ 005D
 282+ 005D              SUBROUTINTE_CALL:
 283+ 005D CD 3E D3                 CALL    INTERRUPT_HANDLER
 284+ 0060              ; C - must contain $03
 285+ 0060              ; B - must contain the original PORT03_SHADOW value
 286+ 0060              ; A - must contain the original PORT02_SHADOW value
 287+ 0060 ED 41                    OUT     (C),B
 288+ 0062 C1                       POP     BC
 289+ 0063 F5                       PUSH    AF
 290+ 0064 3E 70                    LD      A,$70 ; U0-U1-U2-SYS
 291+ 0066 D3 02                    OUT     ($02),A
 292+ 0068 F1                       POP     AF
 293+ 0069              FINISH_JUMPER_CODE:
 294+ 0069 C3 41 0B                 JP      $0b41 ; jump addr to be modified by ISR
 295+ 006C                          .DEPHASE
 296+ D9C0              JUMPER_CODE_END:
 297+ D9C0
 298+ D9C0
 299+ D9C0
 300+ D9C0
NanoSDROM_tools.a80(301): error: Label not found: debug
 301+ D9C0                          IF      debug=1
 302+ D9C0 ~            STRIPES:
 303+ D9C0 ~                        LD      hl,$0000
 304+ D9C0 ~                        PUSH    af
 305+ D9C0 ~                        PUSH    hl
 306+ D9C0 ~            STRIPES_LOOP:
 307+ D9C0 ~                        LD      a,l
 308+ D9C0 ~                        OUT     (0),a
 309+ D9C0 ~                        DEC     hl
 310+ D9C0 ~                        LD      a,h
 311+ D9C0 ~                        OR      l
 312+ D9C0 ~                        JR      nz,stripes_loop
 313+ D9C0 ~                        POP     hl
 314+ D9C0 ~                        POP     af
 315+ D9C0 ~                        RET
 316+ D9C0                          ENDIF
 317+ D9C0
 318+ D9C0                          .MACRO  debug_stripe
 319+ D9C0 ~                        IF      debug = 1
 320+ D9C0 ~                        CALL    stripes
 321+ D9C0 ~                        ENDIF
 322+ D9C0                          .ENDM
 323+ D9C0
 324+ D9C0
# file closed: NanoSDROM_tools.a80
 317  D9C0
 318  D9C0              ; FUNCTION_NOT_IMPLEMENTED_STR:
 319  D9C0              ;             .PSTR   "NanoSD Function not implemented - "
 320  D9C0
 321  D9C0
 322  D9C0              SDISK_VERSION_STR:
 323  D9C0                      PSTR2 "NanoSD IO Card present, ROM v", BUILDVER
 323  D9C0 1E          >        BYTE .endstr-.startstr
 323  D9C1             >.startstr
NanoSDROM.a80(288): warning: value 0x302E3332 is truncated to 8bit value: 0x32
NanoSDROM.a80(323): ^ emitted from here
 323  D9C1 4E 61 6E 6F >        BYTE "NanoSD IO Card present, ROM v", BUILDVER
 323  D9C5 53 44 20 49 >
 323  D9C9 4F 20 43 61 >
 323  D9CD 72 64 20 70 >
 323  D9D1 72 65 73 65 >
 323  D9D5 6E 74 2C 20 >
 323  D9D9 52 4F 4D 20 >
 323  D9DD 76 32       >
 323  D9DF             >.endstr
 324  D9DF              SDISK_BYSANYI_STR:
 325  D9DF                      PSTR "by Sanyi, 2021"
 325  D9DF 0E          >        BYTE .endstr-.startstr
 325  D9E0             >.startstr
 325  D9E0 62 79 20 53 >        BYTE "by Sanyi, 2021"
 325  D9E4 61 6E 79 69 >
 325  D9E8 2C 20 32 30 >
 325  D9EC 32 31       >
 325  D9EE             >.endstr
 326  D9EE              PRESS_ESC_STR:
 327  D9EE                      PSTR "Press ESC to enter file-select menu!"
 327  D9EE 24          >        BYTE .endstr-.startstr
 327  D9EF             >.startstr
 327  D9EF 50 72 65 73 >        BYTE "Press ESC to enter file-select menu!"
 327  D9F3 73 20 45 53 >
 327  D9F7 43 20 74 6F >
 327  D9FB 20 65 6E 74 >
 327  D9FF 65 72 20 66 >
 327  DA03 69 6C 65 2D >
 327  DA07 73 65 6C 65 >
 327  DA0B 63 74 20 6D >
 327  DA0F 65 6E 75 21 >
 327  DA13             >.endstr
 328  DA13              ; BUILD_VER_STR:
 329  DA13              ;       PSTR   BUILDVER
 330  DA13              FUNCTION_BLOCKOUT_STR:
 331  DA13                      PSTR "BLKOUT"
 331  DA13 06          >        BYTE .endstr-.startstr
 331  DA14             >.startstr
 331  DA14 42 4C 4B 4F >        BYTE "BLKOUT"
 331  DA18 55 54       >
 331  DA1A             >.endstr
 332  DA1A
 333  DA1A                      .ORG    $2000
 334  2000 2F 32 33 34          DZ      "/2345/78901234/67890/"
 334  2004 35 2F 37 38
 334  2008 39 30 31 32
 334  200C 33 34 2F 36
 334  2010 37 38 39 30
 334  2014 2F 00
 335  2016
 336  2016
 337  2016
 338  2016
 339  2016
# file closed: NanoSDROM.a80
